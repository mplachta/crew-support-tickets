[
  {
    "markdown": "Examples\n\n# CrewAI Examples\n\nA collection of examples that show how to use CrewAI framework to automate workflows.\n\n[**Marketing Strategy** \\\\\n\\\\\nAutomate marketing strategy creation with CrewAI.](https://github.com/crewAIInc/crewAI-examples/tree/main/marketing_strategy) [**Surprise Trip** \\\\\n\\\\\nCreate a surprise trip itinerary with CrewAI.](https://github.com/crewAIInc/crewAI-examples/tree/main/surprise_trip) [**Match Profile to Positions** \\\\\n\\\\\nMatch a profile to jobpositions with CrewAI.](https://github.com/crewAIInc/crewAI-examples/tree/main/match_profile_to_positions) [**Create Job Posting** \\\\\n\\\\\nCreate a job posting with CrewAI.](https://github.com/crewAIInc/crewAI-examples/tree/main/job-posting) [**Game Generator** \\\\\n\\\\\nCreate a game with CrewAI.](https://github.com/crewAIInc/crewAI-examples/tree/main/game-builder-crew) [**Find Job Candidates** \\\\\n\\\\\nFind job candidates with CrewAI.](https://github.com/crewAIInc/crewAI-examples/tree/main/recruitment)\n\nWas this page helpful?\n\nYesNo\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/examples/example",
      "title": "CrewAI Examples - CrewAI",
      "og:url": "https://docs.crewai.com/examples/example",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Examples&mode=dark&title=CrewAI+Examples&description=A+collection+of+examples+that+show+how+to+use+CrewAI+framework+to+automate+workflows.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "CrewAI Examples - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/examples/example",
      "statusCode": 200,
      "description": "A collection of examples that show how to use CrewAI framework to automate workflows.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Examples&mode=dark&title=CrewAI+Examples&description=A+collection+of+examples+that+show+how+to+use+CrewAI+framework+to+automate+workflows.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "CrewAI Examples - CrewAI",
      "og:description": "A collection of examples that show how to use CrewAI framework to automate workflows.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Spider Scraper\n\nThe `SpiderTool` is designed to extract and read the content of a specified website using Spider.\n\n# [​](\\#spidertool)  `SpiderTool`\n\n## [​](\\#description)  Description\n\n[Spider](https://spider.cloud/?ref=crewai) is the [fastest](https://github.com/spider-rs/spider/blob/main/benches/BENCHMARKS.md#benchmark-results)\nopen source scraper and crawler that returns LLM-ready data.\nIt converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI.\n\n## [​](\\#installation)  Installation\n\nTo use the `SpiderTool` you need to download the [Spider SDK](https://pypi.org/project/spider-client/)\nand the `crewai[tools]` SDK too:\n\nCopy\n\n```shell\npip install spider-client 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nThis example shows you how you can use the `SpiderTool` to enable your agent to scrape and crawl websites.\nThe data returned from the Spider API is already LLM-ready, so no need to do any cleaning there.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import SpiderTool\n\ndef main():\n    spider_tool = SpiderTool()\n\n    searcher = Agent(\n        role=\"Web Research Expert\",\n        goal=\"Find related information from specific URL's\",\n        backstory=\"An expert web researcher that uses the web extremely well\",\n        tools=[spider_tool],\n        verbose=True,\n    )\n\n    return_metadata = Task(\n        description=\"Scrape https://spider.cloud with a limit of 1 and enable metadata\",\n        expected_output=\"Metadata and 10 word summary of spider.cloud\",\n        agent=searcher\n    )\n\n    crew = Crew(\n        agents=[searcher],\n        tasks=[\\\n            return_metadata,\\\n        ],\n        verbose=2\n    )\n\n    crew.kickoff()\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n## [​](\\#arguments)  Arguments\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **api\\_key** | `string` | Specifies Spider API key. If not specified, it looks for `SPIDER_API_KEY` in environment variables. |\n| **params** | `object` | Optional parameters for the request. Defaults to `{\"return_format\": \"markdown\"}` to optimize content for LLMs. |\n| **request** | `string` | Type of request to perform ( `http`, `chrome`, `smart`). `smart` defaults to HTTP, switching to JavaScript rendering if needed. |\n| **limit** | `int` | Max pages to crawl per website. Set to `0` or omit for unlimited. |\n| **depth** | `int` | Max crawl depth. Set to `0` for no limit. |\n| **cache** | `bool` | Enables HTTP caching to speed up repeated runs. Default is `true`. |\n| **budget** | `object` | Sets path-based limits for crawled pages, e.g., `{\"*\":1}` for root page only. |\n| **locale** | `string` | Locale for the request, e.g., `en-US`. |\n| **cookies** | `string` | HTTP cookies for the request. |\n| **stealth** | `bool` | Enables stealth mode for Chrome requests to avoid detection. Default is `true`. |\n| **headers** | `object` | HTTP headers as a map of key-value pairs for all requests. |\n| **metadata** | `bool` | Stores metadata about pages and content, aiding AI interoperability. Defaults to `false`. |\n| **viewport** | `object` | Sets Chrome viewport dimensions. Default is `800x600`. |\n| **encoding** | `string` | Specifies encoding type, e.g., `UTF-8`, `SHIFT_JIS`. |\n| **subdomains** | `bool` | Includes subdomains in the crawl. Default is `false`. |\n| **user\\_agent** | `string` | Custom HTTP user agent. Defaults to a random agent. |\n| **store\\_data** | `bool` | Enables data storage for the request. Overrides `storageless` when set. Default is `false`. |\n| **gpt\\_config** | `object` | Allows AI to generate crawl actions, with optional chaining steps via an array for `\"prompt\"`. |\n| **fingerprint** | `bool` | Enables advanced fingerprinting for Chrome. |\n| **storageless** | `bool` | Prevents all data storage, including AI embeddings. Default is `false`. |\n| **readability** | `bool` | Pre-processes content for reading via [Mozilla’s readability](https://github.com/mozilla/readability). Improves content for LLMs. |\n| **return\\_format** | `string` | Format to return data: `markdown`, `raw`, `text`, `html2text`. Use `raw` for default page format. |\n| **proxy\\_enabled** | `bool` | Enables high-performance proxies to avoid network-level blocking. |\n| **query\\_selector** | `string` | CSS query selector for content extraction from markup. |\n| **full\\_resources** | `bool` | Downloads all resources linked to the website. |\n| **request\\_timeout** | `int` | Timeout in seconds for requests (5-60). Default is `30`. |\n| **run\\_in\\_background** | `bool` | Runs the request in the background, useful for data storage and triggering dashboard crawls. No effect if `storageless` is set. |\n\nWas this page helpful?\n\nYesNo\n\n[Selenium Scraper](/tools/seleniumscrapingtool) [TXT RAG Search](/tools/txtsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/spidertool",
      "title": "Spider Scraper - CrewAI",
      "og:url": "https://docs.crewai.com/tools/spidertool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Spider+Scraper&description=The+%60SpiderTool%60+is+designed+to+extract+and+read+the+content+of+a+specified+website+using+Spider.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Spider Scraper - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/spidertool",
      "statusCode": 200,
      "description": "The `SpiderTool` is designed to extract and read the content of a specified website using Spider.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Spider+Scraper&description=The+%60SpiderTool%60+is+designed+to+extract+and+read+the+content+of+a+specified+website+using+Spider.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Spider Scraper - CrewAI",
      "og:description": "The `SpiderTool` is designed to extract and read the content of a specified website using Spider.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# PDF RAG Search\n\nThe `PDFSearchTool` is designed to search PDF files and return the most relevant results.\n\n# [​](\\#pdfsearchtool)  `PDFSearchTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThe PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.\nThis capability makes it especially useful for extracting specific information from large PDF files quickly.\n\n## [​](\\#installation)  Installation\n\nTo get started with the PDFSearchTool, first, ensure the crewai\\_tools package is installed with the following command:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nHere’s how to use the PDFSearchTool to search within a PDF document:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import PDFSearchTool\n\n# Initialize the tool allowing for any PDF content search if the path is provided during execution\ntool = PDFSearchTool()\n\n# OR\n\n# Initialize the tool with a specific PDF path for exclusive search within that document\ntool = PDFSearchTool(pdf='path/to/your/document.pdf')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `pdf`: **Optional** The PDF path for the search. Can be provided at initialization or within the `run` method’s arguments. If provided at initialization, the tool confines its search to the specified document.\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = PDFSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[NL2SQL Tool](/tools/nl2sqltool) [PG RAG Search](/tools/pgsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/pdfsearchtool",
      "title": "PDF RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/pdfsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=PDF+RAG+Search&description=The+%60PDFSearchTool%60+is+designed+to+search+PDF+files+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "PDF RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/pdfsearchtool",
      "statusCode": 200,
      "description": "The `PDFSearchTool` is designed to search PDF files and return the most relevant results.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=PDF+RAG+Search&description=The+%60PDFSearchTool%60+is+designed+to+search+PDF+files+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "PDF RAG Search - CrewAI",
      "og:description": "The `PDFSearchTool` is designed to search PDF files and return the most relevant results.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Agent Monitoring with Langtrace\n\nHow to monitor cost, latency, and performance of CrewAI Agents using Langtrace, an external observability tool.\n\n# [​](\\#langtrace-overview)  Langtrace Overview\n\nLangtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases.\nWhile not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents.\nThis integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.\n\n![Overview of a select series of agent session runs](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/langtrace1.png)![Overview of agent traces](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/langtrace2.png)![Overview of llm traces in details](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/langtrace3.png)\n\n## [​](\\#setup-instructions)  Setup Instructions\n\n1\n\nSign up for Langtrace\n\nSign up by visiting [https://langtrace.ai/signup](https://langtrace.ai/signup).\n\n2\n\nCreate a project\n\nSet the project type to `CrewAI` and generate an API key.\n\n3\n\nInstall Langtrace in your CrewAI project\n\nUse the following command:\n\nCopy\n\n```bash\npip install langtrace-python-sdk\n\n```\n\n4\n\nImport Langtrace\n\nImport and initialize Langtrace at the beginning of your script, before any CrewAI imports:\n\nCopy\n\n```python\nfrom langtrace_python_sdk import langtrace\nlangtrace.init(api_key='<LANGTRACE_API_KEY>')\n\n# Now import CrewAI modules\nfrom crewai import Agent, Task, Crew\n\n```\n\n### [​](\\#features-and-their-application-to-crewai)  Features and Their Application to CrewAI\n\n1. **LLM Token and Cost Tracking**\n   - Monitor the token usage and associated costs for each CrewAI agent interaction.\n2. **Trace Graph for Execution Steps**\n   - Visualize the execution flow of your CrewAI tasks, including latency and logs.\n   - Useful for identifying bottlenecks in your agent workflows.\n3. **Dataset Curation with Manual Annotation**\n   - Create datasets from your CrewAI task outputs for future training or evaluation.\n4. **Prompt Versioning and Management**\n   - Keep track of different versions of prompts used in your CrewAI agents.\n   - Useful for A/B testing and optimizing agent performance.\n5. **Prompt Playground with Model Comparisons**\n   - Test and compare different prompts and models for your CrewAI agents before deployment.\n6. **Testing and Evaluations**\n   - Set up automated tests for your CrewAI agents and tasks.\n\nWas this page helpful?\n\nYesNo\n\n[Agent Monitoring with AgentOps](/how-to/agentops-observability) [Browserbase Web Loader](/tools/browserbaseloadtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/langtrace-observability",
      "title": "Agent Monitoring with Langtrace - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/langtrace-observability",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Agent+Monitoring+with+Langtrace&description=How+to+monitor+cost%2C+latency%2C+and+performance+of+CrewAI+Agents+using+Langtrace%2C+an+external+observability+tool.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Agent Monitoring with Langtrace - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/langtrace-observability",
      "statusCode": 200,
      "description": "How to monitor cost, latency, and performance of CrewAI Agents using Langtrace, an external observability tool.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Agent+Monitoring+with+Langtrace&description=How+to+monitor+cost%2C+latency%2C+and+performance+of+CrewAI+Agents+using+Langtrace%2C+an+external+observability+tool.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Agent Monitoring with Langtrace - CrewAI",
      "og:description": "How to monitor cost, latency, and performance of CrewAI Agents using Langtrace, an external observability tool.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Using LangChain Tools\n\nLearn how to integrate LangChain tools with CrewAI agents to enhance search-based queries and more.\n\n## [​](\\#using-langchain-tools)  Using LangChain Tools\n\nCrewAI seamlessly integrates with LangChain’s comprehensive [list of tools](https://python.langchain.com/docs/integrations/tools/), all of which can be used with CrewAI.\n\nCode\n\nCopy\n\n```python\nimport os\nfrom crewai import Agent\nfrom langchain.agents import Tool\nfrom langchain.utilities import GoogleSerperAPIWrapper\n\n# Setup API keys\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\"\n\nsearch = GoogleSerperAPIWrapper()\n\n# Create and assign the search tool to an agent\nserper_tool = Tool(\n  name=\"Intermediate Answer\",\n  func=search.run,\n  description=\"Useful for search-based queries\",\n)\n\nagent = Agent(\n  role='Research Analyst',\n  goal='Provide up-to-date market analysis',\n  backstory='An expert analyst with a keen eye for market trends.',\n  tools=[serper_tool]\n)\n\n# rest of the code ...\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nTools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms,\nand the flexibility of tool arguments to optimize your agents’ performance and capabilities.\n\nWas this page helpful?\n\nYesNo\n\n[Tools](/concepts/tools) [Using LlamaIndex Tools](/concepts/llamaindex-tools)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/langchain-tools",
      "title": "Using LangChain Tools - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/langchain-tools",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Using+LangChain+Tools&description=Learn+how+to+integrate+LangChain+tools+with+CrewAI+agents+to+enhance+search-based+queries+and+more.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Using LangChain Tools - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/langchain-tools",
      "statusCode": 200,
      "description": "Learn how to integrate LangChain tools with CrewAI agents to enhance search-based queries and more.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Using+LangChain+Tools&description=Learn+how+to+integrate+LangChain+tools+with+CrewAI+agents+to+enhance+search-based+queries+and+more.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Using LangChain Tools - CrewAI",
      "og:description": "Learn how to integrate LangChain tools with CrewAI agents to enhance search-based queries and more.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Code Docs RAG Search\n\nThe `CodeDocsSearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\n\n# [​](\\#codedocssearchtool)  `CodeDocsSearchTool`\n\n**Experimental**: We are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThe CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.\nIt enables users to efficiently find specific information or topics within code documentation. By providing a `docs_url` during initialization,\nthe tool narrows down the search to that particular documentation site. Alternatively, without a specific `docs_url`,\nit searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs.\n\n## [​](\\#installation)  Installation\n\nTo start using the CodeDocsSearchTool, first, install the crewai\\_tools package via pip:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nUtilize the CodeDocsSearchTool as follows to conduct searches within code documentation:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import CodeDocsSearchTool\n\n# To search any code documentation content\n# if the URL is known or discovered during its execution:\ntool = CodeDocsSearchTool()\n\n# OR\n\n# To specifically focus your search on a given documentation site\n# by providing its URL:\ntool = CodeDocsSearchTool(docs_url='https://docs.example.com/reference')\n\n```\n\nSubstitute ‘ [https://docs.example.com/reference](https://docs.example.com/reference)’ with your target documentation URL\nand ‘How to use search tool’ with the search query relevant to your needs.\n\n## [​](\\#arguments)  Arguments\n\nThe following parameters can be used to customize the `CodeDocsSearchTool`’s behavior:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **docs\\_url** | `string` | _Optional_. Specifies the URL of the code documentation to be searched. |\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = CodeDocsSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Browserbase Web Loader](/tools/browserbaseloadtool) [Code Interpreter](/tools/codeinterpretertool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/codedocssearchtool",
      "title": "Code Docs RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/codedocssearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Code+Docs+RAG+Search&description=The+%60CodeDocsSearchTool%60+is+a+powerful+RAG+%28Retrieval-Augmented+Generation%29+tool+designed+for+semantic+searches+within+code+documentation.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Code Docs RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/codedocssearchtool",
      "statusCode": 200,
      "description": "The `CodeDocsSearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Code+Docs+RAG+Search&description=The+%60CodeDocsSearchTool%60+is+a+powerful+RAG+%28Retrieval-Augmented+Generation%29+tool+designed+for+semantic+searches+within+code+documentation.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Code Docs RAG Search - CrewAI",
      "og:description": "The `CodeDocsSearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Conditional Tasks\n\nLearn how to use conditional tasks in a crewAI kickoff\n\n## [​](\\#introduction)  Introduction\n\nConditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks.\nThis powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes.\n\n## [​](\\#example-usage)  Example Usage\n\nCode\n\nCopy\n\n```python\nfrom typing import List\nfrom pydantic import BaseModel\nfrom crewai import Agent, Crew\nfrom crewai.tasks.conditional_task import ConditionalTask\nfrom crewai.tasks.task_output import TaskOutput\nfrom crewai.task import Task\nfrom crewai_tools import SerperDevTool\n\n# Define a condition function for the conditional task\n# If false, the task will be skipped, if true, then execute the task.\ndef is_data_missing(output: TaskOutput) -> bool:\n    return len(output.pydantic.events) < 10  # this will skip this task\n\n# Define the agents\ndata_fetcher_agent = Agent(\n    role=\"Data Fetcher\",\n    goal=\"Fetch data online using Serper tool\",\n    backstory=\"Backstory 1\",\n    verbose=True,\n    tools=[SerperDevTool()]\n)\n\ndata_processor_agent = Agent(\n    role=\"Data Processor\",\n    goal=\"Process fetched data\",\n    backstory=\"Backstory 2\",\n    verbose=True\n)\n\nsummary_generator_agent = Agent(\n    role=\"Summary Generator\",\n    goal=\"Generate summary from fetched data\",\n    backstory=\"Backstory 3\",\n    verbose=True\n)\n\nclass EventOutput(BaseModel):\n    events: List[str]\n\ntask1 = Task(\n    description=\"Fetch data about events in San Francisco using Serper tool\",\n    expected_output=\"List of 10 things to do in SF this week\",\n    agent=data_fetcher_agent,\n    output_pydantic=EventOutput,\n)\n\nconditional_task = ConditionalTask(\n    description=\"\"\"\n        Check if data is missing. If we have less than 10 events,\n        fetch more events using Serper tool so that\n        we have a total of 10 events in SF this week..\n        \"\"\",\n    expected_output=\"List of 10 Things to do in SF this week\",\n    condition=is_data_missing,\n    agent=data_processor_agent,\n)\n\ntask3 = Task(\n    description=\"Generate summary of events in San Francisco from fetched data\",\n    expected_output=\"A complete report on the customer and their customers and competitors, including their demographics, preferences, market positioning and audience engagement.\",\n    agent=summary_generator_agent,\n)\n\n# Create a crew with the tasks\ncrew = Crew(\n    agents=[data_fetcher_agent, data_processor_agent, summary_generator_agent],\n    tasks=[task1, conditional_task, task3],\n    verbose=True,\n    planning=True\n)\n\n# Run the crew\nresult = crew.kickoff()\nprint(\"results\", result)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Replay Tasks from Latest Crew Kickoff](/how-to/replay-tasks-from-latest-crew-kickoff) [Agent Monitoring with AgentOps](/how-to/agentops-observability)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/conditional-tasks",
      "title": "Conditional Tasks - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/conditional-tasks",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Conditional+Tasks&description=Learn+how+to+use+conditional+tasks+in+a+crewAI+kickoff&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Conditional Tasks - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/conditional-tasks",
      "statusCode": 200,
      "description": "Learn how to use conditional tasks in a crewAI kickoff",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Conditional+Tasks&description=Learn+how+to+use+conditional+tasks+in+a+crewAI+kickoff&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Conditional Tasks - CrewAI",
      "og:description": "Learn how to use conditional tasks in a crewAI kickoff",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Hierarchical Process\n\nA comprehensive guide to understanding and applying the hierarchical process within your CrewAI projects, updated to reflect the latest coding practices and functionalities.\n\n## [​](\\#introduction)  Introduction\n\nThe hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy.\n\nThe hierarchical process is designed to leverage advanced models like GPT-4, optimizing token usage while handling complex tasks with greater efficiency.\n\n## [​](\\#hierarchical-process-overview)  Hierarchical Process Overview\n\nBy default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user.\n\n### [​](\\#key-features)  Key Features\n\n- **Task Delegation**: A manager agent allocates tasks among crew members based on their roles and capabilities.\n- **Result Validation**: The manager evaluates outcomes to ensure they meet the required standards.\n- **Efficient Workflow**: Emulates corporate structures, providing an organized approach to task management.\n- **System Prompt Handling**: Optionally specify whether the system should use predefined prompts.\n- **Stop Words Control**: Optionally specify whether stop words should be used, supporting various models including the o1 models.\n- **Context Window Respect**: Prioritize important context by enabling respect of the context window, which is now the default behavior.\n- **Delegation Control**: Delegation is now disabled by default to give users explicit control.\n- **Max Requests Per Minute**: Configurable option to set the maximum number of requests per minute.\n- **Max Iterations**: Limit the maximum number of iterations for obtaining a final answer.\n\n## [​](\\#implementing-the-hierarchical-process)  Implementing the Hierarchical Process\n\nTo utilize the hierarchical process, it’s essential to explicitly set the process attribute to `Process.hierarchical`, as the default behavior is `Process.sequential`.\nDefine a crew with a designated manager and establish a clear chain of command.\n\nAssign tools at the agent level to facilitate task delegation and execution by the designated agents under the manager’s guidance.\nTools can also be specified at the task level for precise control over tool availability during task execution.\n\nConfiguring the `manager_llm` parameter is crucial for the hierarchical process.\nThe system requires a manager LLM to be set up for proper function, ensuring tailored decision-making.\n\nCode\n\nCopy\n\n```python\nfrom langchain_openai import ChatOpenAI\nfrom crewai import Crew, Process, Agent\n\n# Agents are defined with attributes for backstory, cache, and verbose mode\nresearcher = Agent(\n    role='Researcher',\n    goal='Conduct in-depth analysis',\n    backstory='Experienced data analyst with a knack for uncovering hidden trends.',\n    cache=True,\n    verbose=False,\n    # tools=[]  # This can be optionally specified; defaults to an empty list\n    use_system_prompt=True,  # Enable or disable system prompts for this agent\n    max_rpm=30,  # Limit on the number of requests per minute\n    max_iter=5  # Maximum number of iterations for a final answer\n)\nwriter = Agent(\n    role='Writer',\n    goal='Create engaging content',\n    backstory='Creative writer passionate about storytelling in technical domains.',\n    cache=True,\n    verbose=False,\n    # tools=[]  # Optionally specify tools; defaults to an empty list\n    use_system_prompt=True,  # Enable or disable system prompts for this agent\n    max_rpm=30,  # Limit on the number of requests per minute\n    max_iter=5  # Maximum number of iterations for a final answer\n)\n\n# Establishing the crew with a hierarchical process and additional configurations\nproject_crew = Crew(\n    tasks=[...],  # Tasks to be delegated and executed under the manager's supervision\n    agents=[researcher, writer],\n    manager_llm=ChatOpenAI(temperature=0, model=\"gpt-4\"),  # Mandatory if manager_agent is not set\n    process=Process.hierarchical,  # Specifies the hierarchical management approach\n    respect_context_window=True,  # Enable respect of the context window for tasks\n    memory=True,  # Enable memory usage for enhanced task execution\n    manager_agent=None,  # Optional: explicitly set a specific agent as manager instead of the manager_llm\n    planning=True,  # Enable planning feature for pre-execution strategy\n)\n\n```\n\n### [​](\\#workflow-in-action)  Workflow in Action\n\n1. **Task Assignment**: The manager assigns tasks strategically, considering each agent’s capabilities and available tools.\n2. **Execution and Review**: Agents complete their tasks with the option for asynchronous execution and callback functions for streamlined workflows.\n3. **Sequential Task Progression**: Despite being a hierarchical process, tasks follow a logical order for smooth progression, facilitated by the manager’s oversight.\n\n## [​](\\#conclusion)  Conclusion\n\nAdopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success.\n\nWas this page helpful?\n\nYesNo\n\n[Sequential Processes](/how-to/sequential-process) [Create Your Own Manager Agent](/how-to/custom-manager-agent)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/hierarchical-process",
      "title": "Hierarchical Process - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/hierarchical-process",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Hierarchical+Process&description=A+comprehensive+guide+to+understanding+and+applying+the+hierarchical+process+within+your+CrewAI+projects%2C+updated+to+reflect+the+latest+coding+practices+and+functionalities.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Hierarchical Process - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/hierarchical-process",
      "statusCode": 200,
      "description": "A comprehensive guide to understanding and applying the hierarchical process within your CrewAI projects, updated to reflect the latest coding practices and functionalities.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Hierarchical+Process&description=A+comprehensive+guide+to+understanding+and+applying+the+hierarchical+process+within+your+CrewAI+projects%2C+updated+to+reflect+the+latest+coding+practices+and+functionalities.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Hierarchical Process - CrewAI",
      "og:description": "A comprehensive guide to understanding and applying the hierarchical process within your CrewAI projects, updated to reflect the latest coding practices and functionalities.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Customize Agents\n\nA comprehensive guide to tailoring agents for specific roles, tasks, and advanced customizations within the CrewAI framework.\n\n## [​](\\#customizable-attributes)  Customizable Attributes\n\nCrafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize.\n\n### [​](\\#key-attributes-for-customization)  Key Attributes for Customization\n\n| Attribute | Description |\n| :-- | :-- |\n| **Role** | Specifies the agent’s job within the crew, such as ‘Analyst’ or ‘Customer Service Rep’. |\n| **Goal** | Defines the agent’s objectives, aligned with its role and the crew’s overarching mission. |\n| **Backstory** | Provides depth to the agent’s persona, enhancing motivations and engagements within the crew. |\n| **Tools** _(Optional)_ | Represents the capabilities or methods the agent uses for tasks, from simple functions to complex integrations. |\n| **Cache** _(Optional)_ | Determines if the agent should use a cache for tool usage. |\n| **Max RPM** | Sets the maximum requests per minute ( `max_rpm`). Can be set to `None` for unlimited requests to external services. |\n| **Verbose** _(Optional)_ | Enables detailed logging for debugging and optimization, providing insights into execution processes. |\n| **Allow Delegation** _(Optional)_ | Controls task delegation to other agents, default is `False`. |\n| **Max Iter** _(Optional)_ | Limits the maximum number of iterations ( `max_iter`) for a task to prevent infinite loops, with a default of 25. |\n| **Max Execution Time** _(Optional)_ | Sets the maximum time allowed for an agent to complete a task. |\n| **System Template** _(Optional)_ | Defines the system format for the agent. |\n| **Prompt Template** _(Optional)_ | Defines the prompt format for the agent. |\n| **Response Template** _(Optional)_ | Defines the response format for the agent. |\n| **Use System Prompt** _(Optional)_ | Controls whether the agent will use a system prompt during task execution. |\n| **Respect Context Window** | Enables a sliding context window by default, maintaining context size. |\n| **Max Retry Limit** | Sets the maximum number of retries ( `max_retry_limit`) for an agent in case of errors. |\n\n## [​](\\#advanced-customization-options)  Advanced Customization Options\n\nBeyond the basic attributes, CrewAI allows for deeper customization to enhance an agent’s behavior and capabilities significantly.\n\n### [​](\\#language-model-customization)  Language Model Customization\n\nAgents can be customized with specific language models ( `llm`) and function-calling language models ( `function_calling_llm`), offering advanced control over their processing and decision-making abilities.\nIt’s important to note that setting the `function_calling_llm` allows for overriding the default crew function-calling language model, providing a greater degree of customization.\n\n## [​](\\#performance-and-debugging-settings)  Performance and Debugging Settings\n\nAdjusting an agent’s performance and monitoring its operations are crucial for efficient task execution.\n\n### [​](\\#verbose-mode-and-rpm-limit)  Verbose Mode and RPM Limit\n\n- **Verbose Mode**: Enables detailed logging of an agent’s actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.\n- **RPM Limit**: Sets the maximum number of requests per minute ( `max_rpm`). This attribute is optional and can be set to `None` for no limit, allowing for unlimited queries to external services if needed.\n\n### [​](\\#maximum-iterations-for-task-execution)  Maximum Iterations for Task Execution\n\nThe `max_iter` attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.\nThe default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer.\n\n## [​](\\#customizing-agents-and-tools)  Customizing Agents and Tools\n\nAgents are customized by defining their attributes and tools during initialization. Tools are critical for an agent’s functionality, enabling them to perform specialized tasks.\nThe `tools` attribute should be an array of tools the agent can utilize, and it’s initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements.\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n### [​](\\#example-assigning-tools-to-an-agent)  Example: Assigning Tools to an Agent\n\nCode\n\nCopy\n\n```python\nimport os\nfrom crewai import Agent\nfrom crewai_tools import SerperDevTool\n\n# Set API keys for tool initialization\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\"\n\n# Initialize a search tool\nsearch_tool = SerperDevTool()\n\n# Initialize the agent with advanced options\nagent = Agent(\n  role='Research Analyst',\n  goal='Provide up-to-date market analysis',\n  backstory='An expert analyst with a keen eye for market trends.',\n  tools=[search_tool],\n  memory=True, # Enable memory\n  verbose=True,\n  max_rpm=None, # No limit on requests per minute\n  max_iter=25, # Default value for maximum iterations\n)\n\n```\n\n## [​](\\#delegation-and-autonomy)  Delegation and Autonomy\n\nControlling an agent’s ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,\nthe `allow_delegation` attribute is now set to `False`, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and\nefficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements.\n\n### [​](\\#example-disabling-delegation-for-an-agent)  Example: Disabling Delegation for an Agent\n\nCode\n\nCopy\n\n```python\nagent = Agent(\n  role='Content Writer',\n  goal='Write engaging content on market trends',\n  backstory='A seasoned writer with expertise in market analysis.',\n  allow_delegation=True # Enabling delegation\n)\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nCustomizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,\nequips a nuanced and capable AI team ready for complex challenges.\n\nWas this page helpful?\n\nYesNo\n\n[Connect to any LLM](/how-to/llm-connections) [Coding Agents](/how-to/coding-agents)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/customizing-agents",
      "title": "Customize Agents - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/customizing-agents",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Customize+Agents&description=A+comprehensive+guide+to+tailoring+agents+for+specific+roles%2C+tasks%2C+and+advanced+customizations+within+the+CrewAI+framework.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Customize Agents - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/customizing-agents",
      "statusCode": 200,
      "description": "A comprehensive guide to tailoring agents for specific roles, tasks, and advanced customizations within the CrewAI framework.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Customize+Agents&description=A+comprehensive+guide+to+tailoring+agents+for+specific+roles%2C+tasks%2C+and+advanced+customizations+within+the+CrewAI+framework.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Customize Agents - CrewAI",
      "og:description": "A comprehensive guide to tailoring agents for specific roles, tasks, and advanced customizations within the CrewAI framework.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Browserbase Web Loader\n\nBrowserbase is a developer platform to reliably run, manage, and monitor headless browsers.\n\n# [​](\\#browserbaseloadtool)  `BrowserbaseLoadTool`\n\n## [​](\\#description)  Description\n\n[Browserbase](https://browserbase.com) is a developer platform to reliably run, manage, and monitor headless browsers.\n\nPower your AI data retrievals with:\n\n- [Serverless Infrastructure](https://docs.browserbase.com/under-the-hood) providing reliable browsers to extract data from complex UIs\n- [Stealth Mode](https://docs.browserbase.com/features/stealth-mode) with included fingerprinting tactics and automatic captcha solving\n- [Session Debugger](https://docs.browserbase.com/features/sessions) to inspect your Browser Session with networks timeline and logs\n- [Live Debug](https://docs.browserbase.com/guides/session-debug-connection/browser-remote-control) to quickly debug your automation\n\n## [​](\\#installation)  Installation\n\n- Get an API key and Project ID from [browserbase.com](https://browserbase.com) and set it in environment variables ( `BROWSERBASE_API_KEY`, `BROWSERBASE_PROJECT_ID`).\n- Install the [Browserbase SDK](http://github.com/browserbase/python-sdk) along with `crewai[tools]` package:\n\nCopy\n\n```shell\npip install browserbase 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nUtilize the BrowserbaseLoadTool as follows to allow your agent to load websites:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import BrowserbaseLoadTool\n\n# Initialize the tool with the Browserbase API key and Project ID\ntool = BrowserbaseLoadTool()\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe following parameters can be used to customize the `BrowserbaseLoadTool`’s behavior:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **api\\_key** | `string` | _Optional_. Browserbase API key. Default is `BROWSERBASE_API_KEY` env variable. |\n| **project\\_id** | `string` | _Optional_. Browserbase Project ID. Default is `BROWSERBASE_PROJECT_ID` env variable. |\n| **text\\_content** | `bool` | _Optional_. Retrieve only text content. Default is `False`. |\n| **session\\_id** | `string` | _Optional_. Provide an existing Session ID. |\n| **proxy** | `bool` | _Optional_. Enable/Disable Proxies. Default is `False`. |\n\nWas this page helpful?\n\nYesNo\n\n[Agent Monitoring with Langtrace](/how-to/langtrace-observability) [Code Docs RAG Search](/tools/codedocssearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/browserbaseloadtool",
      "title": "Browserbase Web Loader - CrewAI",
      "og:url": "https://docs.crewai.com/tools/browserbaseloadtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Browserbase+Web+Loader&description=Browserbase+is+a+developer+platform+to+reliably+run%2C+manage%2C+and+monitor+headless+browsers.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Browserbase Web Loader - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/browserbaseloadtool",
      "statusCode": 200,
      "description": "Browserbase is a developer platform to reliably run, manage, and monitor headless browsers.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Browserbase+Web+Loader&description=Browserbase+is+a+developer+platform+to+reliably+run%2C+manage%2C+and+monitor+headless+browsers.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Browserbase Web Loader - CrewAI",
      "og:description": "Browserbase is a developer platform to reliably run, manage, and monitor headless browsers.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Agent Monitoring with AgentOps\n\nUnderstanding and logging your agent performance with AgentOps.\n\n# [​](\\#introduction)  Introduction\n\nObservability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents.\n\n## [​](\\#agentops)  AgentOps\n\n[AgentOps](https://agentops.ai/?=crew) provides session replays, metrics, and monitoring for agents.\n\nAt a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out the [AgentOps Repo](https://github.com/AgentOps-AI/agentops).\n\n### [​](\\#overview)  Overview\n\nAgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.\n\nAdditionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.\n\n![Overview of a select series of agent session runs](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/agentops-overview.png)![Overview of session drilldowns for examining agent runs](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/agentops-session.png)![Viewing a step-by-step agent replay execution graph](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/agentops-replay.png)\n\n### [​](\\#features)  Features\n\n- **LLM Cost Management and Tracking**: Track spend with foundation model providers.\n- **Replay Analytics**: Watch step-by-step agent execution graphs.\n- **Recursive Thought Detection**: Identify when agents fall into infinite loops.\n- **Custom Reporting**: Create custom analytics on agent performance.\n- **Analytics Dashboard**: Monitor high-level statistics about agents in development and production.\n- **Public Model Testing**: Test your agents against benchmarks and leaderboards.\n- **Custom Tests**: Run your agents against domain-specific tests.\n- **Time Travel Debugging**: Restart your sessions from checkpoints.\n- **Compliance and Security**: Create audit logs and detect potential threats such as profanity and PII leaks.\n- **Prompt Injection Detection**: Identify potential code injection and secret leaks.\n\n### [​](\\#using-agentops)  Using AgentOps\n\n1\n\nCreate an API Key\n\nCreate a user API key here: [Create API Key](https://app.agentops.ai/account)\n\n2\n\nConfigure Your Environment\n\nAdd your API key to your environment variables:\n\nCopy\n\n```bash\nAGENTOPS_API_KEY=<YOUR_AGENTOPS_API_KEY>\n\n```\n\n3\n\nInstall AgentOps\n\nInstall AgentOps with:\n\nCopy\n\n```bash\npip install crewai[agentops]\n\n```\n\nor\n\nCopy\n\n```bash\npip install agentops\n\n```\n\n4\n\nInitialize AgentOps\n\nBefore using `Crew` in your script, include these lines:\n\nCopy\n\n```python\nimport agentops\nagentops.init()\n\n```\n\nThis will initiate an AgentOps session as well as automatically track Crew agents. For further info on how to outfit more complex agentic systems,\ncheck out the [AgentOps documentation](https://docs.agentops.ai) or join the [Discord](https://discord.gg/j4f3KbeH).\n\n### [​](\\#crew-agentops-examples)  Crew + AgentOps Examples\n\n[**Job Posting** \\\\\n\\\\\nExample of a Crew agent that generates job posts.](https://github.com/joaomdmoura/crewAI-examples/tree/main/job-posting) [**Markdown Validator** \\\\\n\\\\\nExample of a Crew agent that validates Markdown files.](https://github.com/joaomdmoura/crewAI-examples/tree/main/markdown_validator) [**Instagram Post** \\\\\n\\\\\nExample of a Crew agent that generates Instagram posts.](https://github.com/joaomdmoura/crewAI-examples/tree/main/instagram_post)\n\n### [​](\\#further-information)  Further Information\n\nTo get started, create an [AgentOps account](https://agentops.ai/?=crew).\n\nFor feature requests or bug reports, please reach out to the AgentOps team on the [AgentOps Repo](https://github.com/AgentOps-AI/agentops).\n\n#### [​](\\#extra-links)  Extra links\n\n[🐦 Twitter](https://twitter.com/agentopsai/)  •  [📢 Discord](https://discord.gg/JHPt4C7r)  •  [🖇️ AgentOps Dashboard](https://app.agentops.ai/?=crew)  •  [📙 Documentation](https://docs.agentops.ai/introduction)\n\nWas this page helpful?\n\nYesNo\n\n[Conditional Tasks](/how-to/conditional-tasks) [Agent Monitoring with Langtrace](/how-to/langtrace-observability)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/agentops-observability",
      "title": "Agent Monitoring with AgentOps - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/agentops-observability",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Agent+Monitoring+with+AgentOps&description=Understanding+and+logging+your+agent+performance+with+AgentOps.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Agent Monitoring with AgentOps - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/agentops-observability",
      "statusCode": 200,
      "description": "Understanding and logging your agent performance with AgentOps.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Agent+Monitoring+with+AgentOps&description=Understanding+and+logging+your+agent+performance+with+AgentOps.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Agent Monitoring with AgentOps - CrewAI",
      "og:description": "Understanding and logging your agent performance with AgentOps.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Firecrawl Crawl Website\n\nThe `FirecrawlCrawlWebsiteTool` is designed to crawl and convert websites into clean markdown or structured data.\n\n# [​](\\#firecrawlcrawlwebsitetool)  `FirecrawlCrawlWebsiteTool`\n\n## [​](\\#description)  Description\n\n[Firecrawl](https://firecrawl.dev) is a platform for crawling and convert any website into clean markdown or structured data.\n\n## [​](\\#installation)  Installation\n\n- Get an API key from [firecrawl.dev](https://firecrawl.dev) and set it in environment variables ( `FIRECRAWL_API_KEY`).\n- Install the [Firecrawl SDK](https://github.com/mendableai/firecrawl) along with `crewai[tools]` package:\n\nCopy\n\n```shell\npip install firecrawl-py 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nUtilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import FirecrawlCrawlWebsiteTool\n\ntool = FirecrawlCrawlWebsiteTool(url='firecrawl.dev')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `api_key`: Optional. Specifies Firecrawl API key. Defaults is the `FIRECRAWL_API_KEY` environment variable.\n- `url`: The base URL to start crawling from.\n- `page_options`: Optional.\n\n  - `onlyMainContent`: Optional. Only return the main content of the page excluding headers, navs, footers, etc.\n  - `includeHtml`: Optional. Include the raw HTML content of the page. Will output a html key in the response.\n- `crawler_options`: Optional. Options for controlling the crawling behavior.\n\n  - `includes`: Optional. URL patterns to include in the crawl.\n  - `exclude`: Optional. URL patterns to exclude from the crawl.\n  - `generateImgAltText`: Optional. Generate alt text for images using LLMs (requires a paid plan).\n  - `returnOnlyUrls`: Optional. If true, returns only the URLs as a list in the crawl status. Note: the response will be a list of URLs inside the data, not a list of documents.\n  - `maxDepth`: Optional. Maximum depth to crawl. Depth 1 is the base URL, depth 2 includes the base URL and its direct children, and so on.\n  - `mode`: Optional. The crawling mode to use. Fast mode crawls 4x faster on websites without a sitemap but may not be as accurate and shouldn’t be used on heavily JavaScript-rendered websites.\n  - `limit`: Optional. Maximum number of pages to crawl.\n  - `timeout`: Optional. Timeout in milliseconds for the crawling operation.\n\nWas this page helpful?\n\nYesNo\n\n[File Write](/tools/filewritetool) [Firecrawl Scrape Website](/tools/firecrawlscrapewebsitetool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool",
      "title": "Firecrawl Crawl Website - CrewAI",
      "og:url": "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Firecrawl+Crawl+Website&description=The+%60FirecrawlCrawlWebsiteTool%60+is+designed+to+crawl+and+convert+websites+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Firecrawl Crawl Website - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/firecrawlcrawlwebsitetool",
      "statusCode": 200,
      "description": "The `FirecrawlCrawlWebsiteTool` is designed to crawl and convert websites into clean markdown or structured data.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Firecrawl+Crawl+Website&description=The+%60FirecrawlCrawlWebsiteTool%60+is+designed+to+crawl+and+convert+websites+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Firecrawl Crawl Website - CrewAI",
      "og:description": "The `FirecrawlCrawlWebsiteTool` is designed to crawl and convert websites into clean markdown or structured data.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Testing\n\nLearn how to test your CrewAI Crew and evaluate their performance.\n\n## [​](\\#introduction)  Introduction\n\nTesting is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities.\n\n### [​](\\#using-the-testing-feature)  Using the Testing Feature\n\nWe added the CLI command `crewai test` to make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters are `n_iterations` and `model`, which are optional and default to 2 and `gpt-4o-mini` respectively. For now, the only provider available is OpenAI.\n\nCopy\n\n```bash\ncrewai test\n\n```\n\nIf you want to run more iterations or use a different model, you can specify the parameters like this:\n\nCopy\n\n```bash\ncrewai test --n_iterations 5 --model gpt-4o\n\n```\n\nor using the short forms:\n\nCopy\n\n```bash\ncrewai test -n 5 -m gpt-4o\n\n```\n\nWhen you run the `crewai test` command, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.\n\nA table of scores at the end will show the performance of the crew in terms of the following metrics:\n\n| Tasks/Crew/Agents | Run 1 | Run 2 | Avg. Total | Agents | Additional Info |\n| :-- | :-: | :-: | :-: | :-: | :-- |\n| Task 1 | 9.0 | 9.5 | **9.2** | Professional Insights |  |\n|  |  |  |  | Researcher |  |\n| Task 2 | 9.0 | 10.0 | **9.5** | Company Profile Investigator |  |\n| Task 3 | 9.0 | 9.0 | **9.0** | Automation Insights |  |\n|  |  |  |  | Specialist |  |\n| Task 4 | 9.0 | 9.0 | **9.0** | Final Report Compiler | Automation Insights Specialist |\n| Crew | 9.00 | 9.38 | **9.2** |  |  |\n| Execution Time (s) | 126 | 145 | **135** |  |  |\n\nThe example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole.\n\nWas this page helpful?\n\nYesNo\n\n[Planning](/concepts/planning) [CLI](/concepts/cli)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/testing",
      "title": "Testing - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/testing",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Testing&description=Learn+how+to+test+your+CrewAI+Crew+and+evaluate+their+performance.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Testing - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/testing",
      "statusCode": 200,
      "description": "Learn how to test your CrewAI Crew and evaluate their performance.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Testing&description=Learn+how+to+test+your+CrewAI+Crew+and+evaluate+their+performance.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Testing - CrewAI",
      "og:description": "Learn how to test your CrewAI Crew and evaluate their performance.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Scrape Website\n\nThe `ScrapeWebsiteTool` is designed to extract and read the content of a specified website.\n\n# [​](\\#scrapewebsitetool)  `ScrapeWebsiteTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nA tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.\nThis tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites.\n\n## [​](\\#installation)  Installation\n\nInstall the crewai\\_tools package\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nCopy\n\n```python\nfrom crewai_tools import ScrapeWebsiteTool\n\n# To enable scrapping any website it finds during it's execution\ntool = ScrapeWebsiteTool()\n\n# Initialize the tool with the website URL,\n# so the agent can only scrap the content of the specified website\ntool = ScrapeWebsiteTool(website_url='https://www.example.com')\n\n# Extract the text from the site\ntext = tool.run()\nprint(text)\n\n```\n\n## [​](\\#arguments)  Arguments\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **website\\_url** | `string` | **Mandatory** website URL to read the file. This is the primary input for the tool, specifying which website’s content should be scraped and read. |\n\nWas this page helpful?\n\nYesNo\n\n[PG RAG Search](/tools/pgsearchtool) [Selenium Scraper](/tools/seleniumscrapingtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/scrapewebsitetool",
      "title": "Scrape Website - CrewAI",
      "og:url": "https://docs.crewai.com/tools/scrapewebsitetool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Scrape+Website&description=The+%60ScrapeWebsiteTool%60+is+designed+to+extract+and+read+the+content+of+a+specified+website.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Scrape Website - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/scrapewebsitetool",
      "statusCode": 200,
      "description": "The `ScrapeWebsiteTool` is designed to extract and read the content of a specified website.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Scrape+Website&description=The+%60ScrapeWebsiteTool%60+is+designed+to+extract+and+read+the+content+of+a+specified+website.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Scrape Website - CrewAI",
      "og:description": "The `ScrapeWebsiteTool` is designed to extract and read the content of a specified website.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Website RAG Search\n\nThe `WebsiteSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a website.\n\n# [​](\\#websitesearchtool)  `WebsiteSearchTool`\n\nThe WebsiteSearchTool is currently in an experimental phase. We are actively working on incorporating this tool into our suite of offerings and will update the documentation accordingly.\n\n## [​](\\#description)  Description\n\nThe WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible.\n\n## [​](\\#installation)  Installation\n\nTo prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:\n\n```shell\npip install 'crewai[tools]'\n\n```\n\nThis command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately.\n\n## [​](\\#example-usage)  Example Usage\n\nBelow are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:\n\nCode\n\n```python\nfrom crewai_tools import WebsiteSearchTool\n\n# Example of initiating tool that agents can use\n# to search across any discovered websites\ntool = WebsiteSearchTool()\n\n# Example of limiting the search to the content of a specific website,\n# so now agents can only search within that website\ntool = WebsiteSearchTool(website='https://example.com')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `website`: An optional argument intended to specify the website URL for focused searches. This argument is designed to enhance the tool’s flexibility by allowing targeted searches when necessary.\n\n## [​](\\#customization-options)  Customization Options\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\n```python\ntool = WebsiteSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Vision Tool](/tools/visiontool) [XML RAG Search](/tools/xmlsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/websitesearchtool",
      "title": "Website RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/websitesearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Website+RAG+Search&description=The+%60WebsiteSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+website.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Website RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/websitesearchtool",
      "statusCode": 200,
      "description": "The `WebsiteSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a website.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Website+RAG+Search&description=The+%60WebsiteSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+website.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Website RAG Search - CrewAI",
      "og:description": "The `WebsiteSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a website.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# CSV RAG Search\n\nThe `CSVSearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a CSV file’s content.\n\n# [​](\\#csvsearchtool)  `CSVSearchTool`\n\n**Experimental**: We are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThis tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file’s content. It allows users to semantically search for queries in the content of a specified CSV file.\nThis feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with “Search” in their name, including CSVSearchTool,\nare RAG tools designed for searching different sources of data.\n\n## [​](\\#installation)  Installation\n\nInstall the crewai\\_tools package\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import CSVSearchTool\n\n# Initialize the tool with a specific CSV file.\n# This setup allows the agent to only search the given CSV file.\ntool = CSVSearchTool(csv='path/to/your/csvfile.csv')\n\n# OR\n\n# Initialize the tool without a specific CSV file.\n# Agent will need to provide the CSV path at runtime.\ntool = CSVSearchTool()\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe following parameters can be used to customize the `CSVSearchTool`’s behavior:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **csv** | `string` | _Optional_. The path to the CSV file you want to search. This is a mandatory argument if the tool was initialized without a specific CSV file; otherwise, it is optional. |\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = CSVSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Composio Tool](/tools/composiotool) [DALL-E Tool](/tools/dalletool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/csvsearchtool",
      "title": "CSV RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/csvsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=CSV+RAG+Search&description=The+%60CSVSearchTool%60+is+a+powerful+RAG+%28Retrieval-Augmented+Generation%29+tool+designed+for+semantic+searches+within+a+CSV+file%27s+content.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "CSV RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/csvsearchtool",
      "statusCode": 200,
      "description": "The `CSVSearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a CSV file's content.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=CSV+RAG+Search&description=The+%60CSVSearchTool%60+is+a+powerful+RAG+%28Retrieval-Augmented+Generation%29+tool+designed+for+semantic+searches+within+a+CSV+file%27s+content.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "CSV RAG Search - CrewAI",
      "og:description": "The `CSVSearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a CSV file's content.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Using LlamaIndex Tools\n\nLearn how to integrate LlamaIndex tools with CrewAI agents to enhance search-based queries and more.\n\n## [​](\\#using-llamaindex-tools)  Using LlamaIndex Tools\n\nCrewAI seamlessly integrates with LlamaIndex’s comprehensive toolkit for RAG (Retrieval-Augmented Generation) and agentic pipelines, enabling advanced search-based queries and more.\n\nHere are the available built-in tools offered by LlamaIndex.\n\nCode\n\nCopy\n\n```python\nfrom crewai import Agent\nfrom crewai_tools import LlamaIndexTool\n\n# Example 1: Initialize from FunctionTool\nfrom llama_index.core.tools import FunctionTool\n\nyour_python_function = lambda ...: ...\nog_tool = FunctionTool.from_defaults(\n    your_python_function,\n    name=\"<name>\",\n    description='<description>'\n)\ntool = LlamaIndexTool.from_tool(og_tool)\n\n# Example 2: Initialize from LlamaHub Tools\nfrom llama_index.tools.wolfram_alpha import WolframAlphaToolSpec\nwolfram_spec = WolframAlphaToolSpec(app_id=\"<app_id>\")\nwolfram_tools = wolfram_spec.to_tool_list()\ntools = [LlamaIndexTool.from_tool(t) for t in wolfram_tools]\n\n# Example 3: Initialize Tool from a LlamaIndex Query Engine\nquery_engine = index.as_query_engine()\nquery_tool = LlamaIndexTool.from_query_engine(\n    query_engine,\n    name=\"Uber 2019 10K Query Tool\",\n    description=\"Use this tool to lookup the 2019 Uber 10K Annual Report\"\n)\n\n# Create and assign the tools to an agent\nagent = Agent(\n    role='Research Analyst',\n    goal='Provide up-to-date market analysis',\n    backstory='An expert analyst with a keen eye for market trends.',\n    tools=[tool, *tools, query_tool]\n)\n\n# rest of the code ...\n\n```\n\n## [​](\\#steps-to-get-started)  Steps to Get Started\n\nTo effectively use the LlamaIndexTool, follow these steps:\n\n1\n\nPackage Installation\n\nMake sure that `crewai[tools]` package is installed in your Python environment:\n\nTerminal\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n2\n\nInstall and Use LlamaIndex\n\nFollow the LlamaIndex documentation [LlamaIndex Documentation](https://docs.llamaindex.ai/) to set up a RAG/agent pipeline.\n\nWas this page helpful?\n\nYesNo\n\n[Using LangChain Tools](/concepts/langchain-tools) [Create Custom Tools](/how-to/create-custom-tools)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/llamaindex-tools",
      "title": "Using LlamaIndex Tools - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/llamaindex-tools",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Using+LlamaIndex+Tools&description=Learn+how+to+integrate+LlamaIndex+tools+with+CrewAI+agents+to+enhance+search-based+queries+and+more.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Using LlamaIndex Tools - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/llamaindex-tools",
      "statusCode": 200,
      "description": "Learn how to integrate LlamaIndex tools with CrewAI agents to enhance search-based queries and more.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Using+LlamaIndex+Tools&description=Learn+how+to+integrate+LlamaIndex+tools+with+CrewAI+agents+to+enhance+search-based+queries+and+more.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Using LlamaIndex Tools - CrewAI",
      "og:description": "Learn how to integrate LlamaIndex tools with CrewAI agents to enhance search-based queries and more.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Planning\n\nLearn how to add planning to your CrewAI Crew and improve their performance.\n\n## [​](\\#introduction)  Introduction\n\nThe planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration,\nall Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description.\n\n### [​](\\#using-the-planning-feature)  Using the Planning Feature\n\nGetting started with the planning feature is very easy, the only step required is to add `planning=True` to your Crew:\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\n# Assemble your crew with planning capabilities\nmy_crew = Crew(\n    agents=self.agents,\n    tasks=self.tasks,\n    process=Process.sequential,\n    planning=True,\n)\n\n```\n\nFrom this point on, your crew will have planning enabled, and the tasks will be planned before each iteration.\n\n#### [​](\\#planning-llm)  Planning LLM\n\nNow you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.\n\nWhen running the base case example, you will see something like the output below, which represents the output of the `AgentPlanner`\nresponsible for creating the step-by-step logic to add to the Agents’ tasks.\n\nCode\n\nResult\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\nfrom langchain_openai import ChatOpenAI\n\n# Assemble your crew with planning capabilities and custom LLM\nmy_crew = Crew(\n    agents=self.agents,\n    tasks=self.tasks,\n    process=Process.sequential,\n    planning=True,\n    planning_llm=ChatOpenAI(model=\"gpt-4o\")\n)\n\n# Run the crew\nmy_crew.kickoff()\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Memory](/concepts/memory) [Testing](/concepts/testing)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/planning",
      "title": "Planning - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/planning",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Planning&description=Learn+how+to+add+planning+to+your+CrewAI+Crew+and+improve+their+performance.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Planning - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/planning",
      "statusCode": 200,
      "description": "Learn how to add planning to your CrewAI Crew and improve their performance.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Planning&description=Learn+how+to+add+planning+to+your+CrewAI+Crew+and+improve+their+performance.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Planning - CrewAI",
      "og:description": "Learn how to add planning to your CrewAI Crew and improve their performance.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Composio Tool\n\nThe `ComposioTool` is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK.\n\n# [​](\\#composiotool)  `ComposioTool`\n\n## [​](\\#description)  Description\n\nThis tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK.\n\n## [​](\\#installation)  Installation\n\nTo incorporate this tool into your project, follow the installation instructions below:\n\nCopy\n\n```shell\npip install composio-core\npip install 'crewai[tools]'\n\n```\n\nafter the installation is complete, either run `composio login` or export your composio API key as `COMPOSIO_API_KEY`.\n\n## [​](\\#example)  Example\n\nThe following example demonstrates how to initialize the tool and execute a github action:\n\n1. Initialize Composio tools\n\nCode\n\nCopy\n\n```python\nfrom composio import App\nfrom crewai_tools import ComposioTool\nfrom crewai import Agent, Task\n\ntools = [ComposioTool.from_action(action=Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER)]\n\n```\n\nIf you don’t know what action you want to use, use `from_app` and `tags` filter to get relevant actions\n\nCode\n\nCopy\n\n```python\ntools = ComposioTool.from_app(App.GITHUB, tags=[\"important\"])\n\n```\n\nor use `use_case` to search relevant actions\n\nCode\n\nCopy\n\n```python\ntools = ComposioTool.from_app(App.GITHUB, use_case=\"Star a github repository\")\n\n```\n\n2. Define agent\n\nCode\n\nCopy\n\n```python\ncrewai_agent = Agent(\n    role=\"Github Agent\",\n    goal=\"You take action on Github using Github APIs\",\n    backstory=(\n        \"You are AI agent that is responsible for taking actions on Github \"\n        \"on users behalf. You need to take action on Github using Github APIs\"\n    ),\n    verbose=True,\n    tools=tools,\n)\n\n```\n\n3. Execute task\n\nCode\n\nCopy\n\n```python\ntask = Task(\n    description=\"Star a repo ComposioHQ/composio on GitHub\",\n    agent=crewai_agent,\n    expected_output=\"if the star happened\",\n)\n\ntask.execute()\n\n```\n\n- More detailed list of tools can be found [here](https://app.composio.dev)\n\nWas this page helpful?\n\nYesNo\n\n[Code Interpreter](/tools/codeinterpretertool) [CSV RAG Search](/tools/csvsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/composiotool",
      "title": "Composio Tool - CrewAI",
      "og:url": "https://docs.crewai.com/tools/composiotool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Composio+Tool&description=The+%60ComposioTool%60+is+a+wrapper+around+the+composio+set+of+tools+and+gives+your+agent+access+to+a+wide+variety+of+tools+from+the+Composio+SDK.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Composio Tool - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/composiotool",
      "statusCode": 200,
      "description": "The `ComposioTool` is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Composio+Tool&description=The+%60ComposioTool%60+is+a+wrapper+around+the+composio+set+of+tools+and+gives+your+agent+access+to+a+wide+variety+of+tools+from+the+Composio+SDK.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Composio Tool - CrewAI",
      "og:description": "The `ComposioTool` is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Directory RAG Search\n\nThe `DirectorySearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a directory’s content.\n\n# [​](\\#directorysearchtool)  `DirectorySearchTool`\n\n**Experimental**: The DirectorySearchTool is under continuous development. Features and functionalities might evolve, and unexpected behavior may occur as we refine the tool.\n\n## [​](\\#description)  Description\n\nThe DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup.\n\n## [​](\\#installation)  Installation\n\nTo use the DirectorySearchTool, begin by installing the crewai\\_tools package. Execute the following command in your terminal:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#initialization-and-usage)  Initialization and Usage\n\nImport the DirectorySearchTool from the `crewai_tools` package to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import DirectorySearchTool\n\n# For dynamic directory specification at runtime\ntool = DirectorySearchTool()\n\n# For fixed directory searches\ntool = DirectorySearchTool(directory='/path/to/directory')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `directory`: A string argument that specifies the search directory. This is optional during initialization but required for searches if not set initially.\n\n## [​](\\#custom-model-and-embeddings)  Custom Model and Embeddings\n\nThe DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users.\n\nCode\n\nCopy\n\n```python\ntool = DirectorySearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # Options include ollama, google, anthropic, llama2, and more\n            config=dict(\n                model=\"llama2\",\n                # Additional configurations here\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[DALL-E Tool](/tools/dalletool) [Directory Read](/tools/directoryreadtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/directorysearchtool",
      "title": "Directory RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/directorysearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Directory+RAG+Search&description=The+%60DirectorySearchTool%60+is+a+powerful+RAG+%28Retrieval-Augmented+Generation%29+tool+designed+for+semantic+searches+within+a+directory%27s+content.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Directory RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/directorysearchtool",
      "statusCode": 200,
      "description": "The `DirectorySearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a directory's content.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Directory+RAG+Search&description=The+%60DirectorySearchTool%60+is+a+powerful+RAG+%28Retrieval-Augmented+Generation%29+tool+designed+for+semantic+searches+within+a+directory%27s+content.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Directory RAG Search - CrewAI",
      "og:description": "The `DirectorySearchTool` is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a directory's content.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Directory Read\n\nThe `DirectoryReadTool` is a powerful utility designed to provide a comprehensive listing of directory contents.\n\n# [​](\\#directoryreadtool)  `DirectoryReadTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThe DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.\nIt can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.\nThis tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories.\n\n## [​](\\#installation)  Installation\n\nTo utilize the DirectoryReadTool in your project, install the `crewai_tools` package. If this package is not yet part of your environment, you can install it using pip with the command below:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\nThis command installs the latest version of the `crewai_tools` package, granting access to the DirectoryReadTool among other utilities.\n\n## [​](\\#example)  Example\n\nEmploying the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import DirectoryReadTool\n\n# Initialize the tool so the agent can read any directory's content\n# it learns about during execution\ntool = DirectoryReadTool()\n\n# OR\n\n# Initialize the tool with a specific directory,\n# so the agent can only read the content of the specified directory\ntool = DirectoryReadTool(directory='/path/to/your/directory')\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe following parameters can be used to customize the `DirectoryReadTool`’s behavior:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **directory** | `string` | _Optional_. An argument that specifies the path to the directory whose contents you wish to list. It accepts both absolute and relative paths, guiding the tool to the desired directory for content listing. |\n\nWas this page helpful?\n\nYesNo\n\n[Directory RAG Search](/tools/directorysearchtool) [DOCX RAG Search](/tools/docxsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/directoryreadtool",
      "title": "Directory Read - CrewAI",
      "og:url": "https://docs.crewai.com/tools/directoryreadtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Directory+Read&description=The+%60DirectoryReadTool%60+is+a+powerful+utility+designed+to+provide+a+comprehensive+listing+of+directory+contents.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Directory Read - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/directoryreadtool",
      "statusCode": 200,
      "description": "The `DirectoryReadTool` is a powerful utility designed to provide a comprehensive listing of directory contents.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Directory+Read&description=The+%60DirectoryReadTool%60+is+a+powerful+utility+designed+to+provide+a+comprehensive+listing+of+directory+contents.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Directory Read - CrewAI",
      "og:description": "The `DirectoryReadTool` is a powerful utility designed to provide a comprehensive listing of directory contents.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Firecrawl Search\n\nThe `FirecrawlSearchTool` is designed to search websites and convert them into clean markdown or structured data.\n\n# [​](\\#firecrawlsearchtool)  `FirecrawlSearchTool`\n\n## [​](\\#description)  Description\n\n[Firecrawl](https://firecrawl.dev) is a platform for crawling and convert any website into clean markdown or structured data.\n\n## [​](\\#installation)  Installation\n\n- Get an API key from [firecrawl.dev](https://firecrawl.dev) and set it in environment variables ( `FIRECRAWL_API_KEY`).\n- Install the [Firecrawl SDK](https://github.com/mendableai/firecrawl) along with `crewai[tools]` package:\n\nCopy\n\n```shell\npip install firecrawl-py 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nUtilize the FirecrawlSearchTool as follows to allow your agent to load websites:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import FirecrawlSearchTool\n\ntool = FirecrawlSearchTool(query='what is firecrawl?')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `api_key`: Optional. Specifies Firecrawl API key. Defaults is the `FIRECRAWL_API_KEY` environment variable.\n- `query`: The search query string to be used for searching.\n- `page_options`: Optional. Options for result formatting.\n\n  - `onlyMainContent`: Optional. Only return the main content of the page excluding headers, navs, footers, etc.\n  - `includeHtml`: Optional. Include the raw HTML content of the page. Will output a html key in the response.\n  - `fetchPageContent`: Optional. Fetch the full content of the page.\n- `search_options`: Optional. Options for controlling the crawling behavior.\n\n  - `limit`: Optional. Maximum number of pages to crawl.\n\nWas this page helpful?\n\nYesNo\n\n[Firecrawl Scrape Website](/tools/firecrawlscrapewebsitetool) [Github Search](/tools/githubsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/firecrawlsearchtool",
      "title": "Firecrawl Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/firecrawlsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Firecrawl+Search&description=The+%60FirecrawlSearchTool%60+is+designed+to+search+websites+and+convert+them+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Firecrawl Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/firecrawlsearchtool",
      "statusCode": 200,
      "description": "The `FirecrawlSearchTool` is designed to search websites and convert them into clean markdown or structured data.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Firecrawl+Search&description=The+%60FirecrawlSearchTool%60+is+designed+to+search+websites+and+convert+them+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Firecrawl Search - CrewAI",
      "og:description": "The `FirecrawlSearchTool` is designed to search websites and convert them into clean markdown or structured data.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Training\n\nLearn how to train your CrewAI agents by giving them feedback early on and get consistent results.\n\n## [​](\\#introduction)  Introduction\n\nThe training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI).\nBy running the command `crewai train -n <n_iterations>`, you can specify the number of iterations for the training process.\n\nDuring training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback.\nThis helps the agents improve their understanding, decision-making, and problem-solving abilities.\n\n### [​](\\#training-your-crew-using-the-cli)  Training Your Crew Using the CLI\n\nTo use the training feature, follow these steps:\n\n1. Open your terminal or command prompt.\n2. Navigate to the directory where your CrewAI project is located.\n3. Run the following command:\n\nCopy\n\n```shell\ncrewai train -n <n_iterations> <filename> (optional)\n\n```\n\nReplace `<n_iterations>` with the desired number of training iterations and `<filename>` with the appropriate filename ending with `.pkl`.\n\n### [​](\\#training-your-crew-programmatically)  Training Your Crew Programmatically\n\nTo train your crew programmatically, use the following steps:\n\n1. Define the number of iterations for training.\n2. Specify the input parameters for the training process.\n3. Execute the training command within a try-except block to handle potential errors.\n\nCode\n\nCopy\n\n```python\nn_iterations = 2\ninputs = {\"topic\": \"CrewAI Training\"}\nfilename = \"your_model.pkl\"\n\ntry:\n    YourCrewName_Crew().crew().train(\n      n_iterations=n_iterations,\n      inputs=inputs,\n      filename=filename\n    )\n\nexcept Exception as e:\n    raise Exception(f\"An error occurred while training the crew: {e}\")\n\n```\n\n### [​](\\#key-points-to-note)  Key Points to Note\n\n- **Positive Integer Requirement:** Ensure that the number of iterations ( `n_iterations`) is a positive integer. The code will raise a `ValueError` if this condition is not met.\n- **Filename Requirement:** Ensure that the filename ends with `.pkl`. The code will raise a `ValueError` if this condition is not met.\n- **Error Handling:** The code handles subprocess errors and unexpected exceptions, providing error messages to the user.\n\nIt is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.\n\nOnce the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.\n\nRemember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.\n\nHappy training with CrewAI! 🚀\n\nWas this page helpful?\n\nYesNo\n\n[Collaboration](/concepts/collaboration) [Memory](/concepts/memory)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/training",
      "title": "Training - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/training",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Training&description=Learn+how+to+train+your+CrewAI+agents+by+giving+them+feedback+early+on+and+get+consistent+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Training - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/training",
      "statusCode": 200,
      "description": "Learn how to train your CrewAI agents by giving them feedback early on and get consistent results.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Training&description=Learn+how+to+train+your+CrewAI+agents+by+giving+them+feedback+early+on+and+get+consistent+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Training - CrewAI",
      "og:description": "Learn how to train your CrewAI agents by giving them feedback early on and get consistent results.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# NL2SQL Tool\n\nThe `NL2SQLTool` is designed to convert natural language to SQL queries.\n\n# [​](\\#nl2sqltool)  `NL2SQLTool`\n\n## [​](\\#description)  Description\n\nThis tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.\n\nThis enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.\nAlong with that proivdes the ability for the Agent to update the database based on its goal.\n\n**Attention**: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database.\n\n## [​](\\#requirements)  Requirements\n\n- SqlAlchemy\n- Any DB compatible library (e.g. psycopg2, mysql-connector-python)\n\n## [​](\\#installation)  Installation\n\nInstall the crewai\\_tools package\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#usage)  Usage\n\nIn order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the format `dialect+driver://username:password@host:port/database`.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import NL2SQLTool\n\n# psycopg2 was installed to run this example with PostgreSQL\nnl2sql = NL2SQLTool(db_uri=\"postgresql://example@localhost:5432/test_db\")\n\n@agent\ndef researcher(self) -> Agent:\n    return Agent(\n        config=self.agents_config[\"researcher\"],\n        allow_delegation=False,\n        tools=[nl2sql]\n    )\n\n```\n\n## [​](\\#example)  Example\n\nThe primary task goal was:\n\n“Retrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and\nsort the results by the average monthly revenue in descending order”\n\nSo the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.\n\n![alt text](https://github.com/crewAIInc/crewAI-tools/blob/main/crewai_tools/tools/nl2sql/images/image-2.png?raw=true)![alt text](https://github.com/crewAIInc/crewAI-tools/raw/main/crewai_tools/tools/nl2sql/images/image-3.png)\n\nThe second task goal was:\n\n“Review the data and create a detailed report, and then create the table on the database with the fields based on the data provided.\nInclude information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.”\n\nNow things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.\n\n![alt text](https://github.com/crewAIInc/crewAI-tools/raw/main/crewai_tools/tools/nl2sql/images/image-4.png)![alt text](https://github.com/crewAIInc/crewAI-tools/raw/main/crewai_tools/tools/nl2sql/images/image-5.png)\n\n![alt text](https://github.com/crewAIInc/crewAI-tools/raw/main/crewai_tools/tools/nl2sql/images/image-9.png)![alt text](https://github.com/crewAIInc/crewAI-tools/raw/main/crewai_tools/tools/nl2sql/images/image-7.png)\n\nThis is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.\n\nThe Tool provides endless possibilities on the logic of the Agent and how it can interact with the database.\n\nCopy\n\n```md\n DB -> Agent -> ... -> Agent -> DB\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[MySQL RAG Search](/tools/mysqltool) [PDF RAG Search](/tools/pdfsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/nl2sqltool",
      "title": "NL2SQL Tool - CrewAI",
      "og:url": "https://docs.crewai.com/tools/nl2sqltool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=NL2SQL+Tool&description=The+%60NL2SQLTool%60+is+designed+to+convert+natural+language+to+SQL+queries.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "NL2SQL Tool - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/nl2sqltool",
      "statusCode": 200,
      "description": "The `NL2SQLTool` is designed to convert natural language to SQL queries.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=NL2SQL+Tool&description=The+%60NL2SQLTool%60+is+designed+to+convert+natural+language+to+SQL+queries.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "NL2SQL Tool - CrewAI",
      "og:description": "The `NL2SQLTool` is designed to convert natural language to SQL queries.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# EXA Search Web Loader\n\nThe `EXASearchTool` is designed to perform a semantic search for a specified query from a text’s content across the internet.\n\n# [​](\\#exasearchtool)  `EXASearchTool`\n\n## [​](\\#description)  Description\n\nThe EXASearchTool is designed to perform a semantic search for a specified query from a text’s content across the internet.\nIt utilizes the [exa.ai](https://exa.ai/) API to fetch and display the most relevant search results based on the query provided by the user.\n\n## [​](\\#installation)  Installation\n\nTo incorporate this tool into your project, follow the installation instructions below:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nThe following example demonstrates how to initialize the tool and execute a search with a given query:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import EXASearchTool\n\n# Initialize the tool for internet searching capabilities\ntool = EXASearchTool()\n\n```\n\n## [​](\\#steps-to-get-started)  Steps to Get Started\n\nTo effectively use the EXASearchTool, follow these steps:\n\n1\n\nPackage Installation\n\nConfirm that the `crewai[tools]` package is installed in your Python environment.\n\n2\n\nAPI Key Acquisition\n\nAcquire a [exa.ai](https://exa.ai/) API key by registering for a free account at [exa.ai](https://exa.ai/).\n\n3\n\nEnvironment Configuration\n\nStore your obtained API key in an environment variable named `EXA_API_KEY` to facilitate its use by the tool.\n\n## [​](\\#conclusion)  Conclusion\n\nBy integrating the `EXASearchTool` into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nBy adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.\n\nWas this page helpful?\n\nYesNo\n\n[DOCX RAG Search](/tools/docxsearchtool) [File Read](/tools/filereadtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/exasearchtool",
      "title": "EXA Search Web Loader - CrewAI",
      "og:url": "https://docs.crewai.com/tools/exasearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=EXA+Search+Web+Loader&description=The+%60EXASearchTool%60+is+designed+to+perform+a+semantic+search+for+a+specified+query+from+a+text%27s+content+across+the+internet.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "EXA Search Web Loader - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/exasearchtool",
      "statusCode": 200,
      "description": "The `EXASearchTool` is designed to perform a semantic search for a specified query from a text's content across the internet.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=EXA+Search+Web+Loader&description=The+%60EXASearchTool%60+is+designed+to+perform+a+semantic+search+for+a+specified+query+from+a+text%27s+content+across+the+internet.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "EXA Search Web Loader - CrewAI",
      "og:description": "The `EXASearchTool` is designed to perform a semantic search for a specified query from a text's content across the internet.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# PG RAG Search\n\nThe `PGSearchTool` is designed to search PostgreSQL databases and return the most relevant results.\n\n# [​](\\#pgsearchtool)  `PGSearchTool`\n\nThe PGSearchTool is currently under development. This document outlines the intended functionality and interface.\nAs development progresses, please be aware that some features may not be available or could change.\n\n## [​](\\#description)  Description\n\nThe PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,\nit aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.\nThe tool’s goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on\nextensive datasets within a PostgreSQL environment.\n\n## [​](\\#installation)  Installation\n\nThe `crewai_tools` package, which will include the PGSearchTool upon its release, can be installed using the following command:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\nThe PGSearchTool is not yet available in the current version of the `crewai_tools` package. This installation command will be updated once the tool is released.\n\n## [​](\\#example-usage)  Example Usage\n\nBelow is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import PGSearchTool\n\n# Initialize the tool with the database URI and the target table name\ntool = PGSearchTool(\n    db_uri='postgresql://user:password@localhost:5432/mydatabase',\n    table_name='employees'\n)\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe PGSearchTool is designed to require the following arguments for its operation:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **db\\_uri** | `string` | **Mandatory**. A string representing the URI of the PostgreSQL database to be queried. This argument will be mandatory and must include the necessary authentication details and the location of the database. |\n| **table\\_name** | `string` | **Mandatory**. A string specifying the name of the table within the database on which the semantic search will be performed. This argument will also be mandatory. |\n\n## [​](\\#custom-model-and-embeddings)  Custom Model and Embeddings\n\nThe tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = PGSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[PDF RAG Search](/tools/pdfsearchtool) [Scrape Website](/tools/scrapewebsitetool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/pgsearchtool",
      "title": "PG RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/pgsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=PG+RAG+Search&description=The+%60PGSearchTool%60+is+designed+to+search+PostgreSQL+databases+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "PG RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/pgsearchtool",
      "statusCode": 200,
      "description": "The `PGSearchTool` is designed to search PostgreSQL databases and return the most relevant results.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=PG+RAG+Search&description=The+%60PGSearchTool%60+is+designed+to+search+PostgreSQL+databases+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "PG RAG Search - CrewAI",
      "og:description": "The `PGSearchTool` is designed to search PostgreSQL databases and return the most relevant results.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# DALL-E Tool\n\nThe `DallETool` is a powerful tool designed for generating images from textual descriptions.\n\n# [​](\\#dalletool)  `DallETool`\n\n## [​](\\#description)  Description\n\nThis tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions.\nThis tool allows the Agent to generate images based on the text input provided by the user.\n\n## [​](\\#installation)  Installation\n\nInstall the crewai\\_tools package\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nRemember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import DallETool\n\nAgent(\n    ...\n    tools=[DallETool()],\n)\n\n```\n\nIf needed you can also tweak the parameters of the DALL-E model by passing them as arguments to the `DallETool` class. For example:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import DallETool\n\ndalle_tool = DallETool(model=\"dall-e-3\",\n                       size=\"1024x1024\",\n                       quality=\"standard\",\n                       n=1)\n\nAgent(\n    ...\n    tools=[dalle_tool]\n)\n\n```\n\nThe parameters are based on the `client.images.generate` method from the OpenAI API. For more information on the parameters,\nplease refer to the [OpenAI API documentation](https://platform.openai.com/docs/guides/images/introduction?lang=python).\n\nWas this page helpful?\n\nYesNo\n\n[CSV RAG Search](/tools/csvsearchtool) [Directory RAG Search](/tools/directorysearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/dalletool",
      "title": "DALL-E Tool - CrewAI",
      "og:url": "https://docs.crewai.com/tools/dalletool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=DALL-E+Tool&description=The+%60DallETool%60+is+a+powerful+tool+designed+for+generating+images+from+textual+descriptions.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "DALL-E Tool - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/dalletool",
      "statusCode": 200,
      "description": "The `DallETool` is a powerful tool designed for generating images from textual descriptions.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=DALL-E+Tool&description=The+%60DallETool%60+is+a+powerful+tool+designed+for+generating+images+from+textual+descriptions.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "DALL-E Tool - CrewAI",
      "og:description": "The `DallETool` is a powerful tool designed for generating images from textual descriptions.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Get Started\n\n# Introduction\n\nWelcome to CrewAI docs!\n\n# [​](\\#what-is-crewai)  What is CrewAI?\n\n**CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.**\n\nBy fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.\n\n![CrewAI Mindmap](https://mintlify.s3-us-west-1.amazonaws.com/crewai/crewAI-mindmap.png)\n\nCrewAI Mindmap\n\n## [​](\\#why-crewai)  Why CrewAI?\n\n- 🤼‍♀️ **Role-Playing Agents**: Agents can take on different roles and personas to better understand and interact with complex systems.\n- 🤖 **Autonomous Decision Making**: Agents can make decisions autonomously based on the given context and available tools.\n- 🤝 **Seamless Collaboration**: Agents can work together seamlessly, sharing information and resources to achieve common goals.\n- 🧠 **Complex Task Tackling**: CrewAI is designed to tackle complex tasks, such as multi-step workflows, decision making, and problem solving.\n\n# [​](\\#get-started-with-crewai)  Get Started with CrewAI\n\n[**Quickstart** \\\\\n\\\\\nGetting started with CrewAI](quickstart) [**Join the Community** \\\\\n\\\\\nJoin the CrewAI community and get help with your project!](https://community.crewai.com)\n\n## [​](\\#next-step)  Next Step\n\n- [Install CrewAI](/installation) to get started with your first agent.\n\nWas this page helpful?\n\nYesNo\n\n[Installation](/installation)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/introduction",
      "title": "Introduction - CrewAI",
      "og:url": "https://docs.crewai.com/introduction",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Introduction&description=Welcome+to+CrewAI+docs%21&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Introduction - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "http://docs.crewai.com/",
      "statusCode": 200,
      "description": "Welcome to CrewAI docs!",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Introduction&description=Welcome+to+CrewAI+docs%21&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Introduction - CrewAI",
      "og:description": "Welcome to CrewAI docs!",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Agents\n\nWhat are CrewAI Agents and how to use them.\n\n## [​](\\#what-is-an-agent)  What is an agent?\n\nAn agent is an **autonomous unit** programmed to:\n\n- Perform tasks\n- Make decisions\n- Communicate with other agents\n\nThink of an agent as a member of a team, with specific skills and a particular job to do. Agents can have different roles like `Researcher`, `Writer`, or `Customer Support`, each contributing to the overall goal of the crew.\n\n## [​](\\#agent-attributes)  Agent attributes\n\n| Attribute | Parameter | Description |\n| :-- | :-- | :-- |\n| **Role** | `role` | Defines the agent’s function within the crew. It determines the kind of tasks the agent is best suited for. |\n| **Goal** | `goal` | The individual objective that the agent aims to achieve. It guides the agent’s decision-making process. |\n| **Backstory** | `backstory` | Provides context to the agent’s role and goal, enriching the interaction and collaboration dynamics. |\n| **LLM** _(optional)_ | `llm` | Represents the language model that will run the agent. It dynamically fetches the model name from the `OPENAI_MODEL_NAME` environment variable, defaulting to “gpt-4” if not specified. |\n| **Tools** _(optional)_ | `tools` | Set of capabilities or functions that the agent can use to perform tasks. Expected to be instances of custom classes compatible with the agent’s execution environment. Tools are initialized with a default value of an empty list. |\n| **Function Calling LLM** _(optional)_ | `function_calling_llm` | Specifies the language model that will handle the tool calling for this agent, overriding the crew function calling LLM if passed. Default is `None`. |\n| **Max Iter** _(optional)_ | `max_iter` | Max Iter is the maximum number of iterations the agent can perform before being forced to give its best answer. Default is `25`. |\n| **Max RPM** _(optional)_ | `max_rpm` | Max RPM is the maximum number of requests per minute the agent can perform to avoid rate limits. It’s optional and can be left unspecified, with a default value of `None`. |\n| **Max Execution Time** _(optional)_ | `max_execution_time` | Max Execution Time is the maximum execution time for an agent to execute a task. It’s optional and can be left unspecified, with a default value of `None`, meaning no max execution time. |\n| **Verbose** _(optional)_ | `verbose` | Setting this to `True` configures the internal logger to provide detailed execution logs, aiding in debugging and monitoring. Default is `False`. |\n| **Allow Delegation** _(optional)_ | `allow_delegation` | Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent. Default is `False`. |\n| **Step Callback** _(optional)_ | `step_callback` | A function that is called after each step of the agent. This can be used to log the agent’s actions or to perform other operations. It will overwrite the crew `step_callback`. |\n| **Cache** _(optional)_ | `cache` | Indicates if the agent should use a cache for tool usage. Default is `True`. |\n| **System Template** _(optional)_ | `system_template` | Specifies the system format for the agent. Default is `None`. |\n| **Prompt Template** _(optional)_ | `prompt_template` | Specifies the prompt format for the agent. Default is `None`. |\n| **Response Template** _(optional)_ | `response_template` | Specifies the response format for the agent. Default is `None`. |\n| **Allow Code Execution** _(optional)_ | `allow_code_execution` | Enable code execution for the agent. Default is `False`. |\n| **Max Retry Limit** _(optional)_ | `max_retry_limit` | Maximum number of retries for an agent to execute a task when an error occurs. Default is `2`. |\n| **Use System Prompt** _(optional)_ | `use_system_prompt` | Adds the ability to not use system prompt (to support o1 models). Default is `True`. |\n| **Respect Context Window** _(optional)_ | `respect_context_window` | Summary strategy to avoid overflowing the context window. Default is `True`. |\n| **Code Execution Mode** _(optional)_ | `code_execution_mode` | Determines the mode for code execution: ‘safe’ (using Docker) or ‘unsafe’ (direct execution on the host machine). Default is `safe`. |\n\n## [​](\\#creating-an-agent)  Creating an agent\n\n**Agent interaction**: Agents can interact with each other using CrewAI’s built-in delegation and communication mechanisms. This allows for dynamic task management and problem-solving within the crew.\n\nTo create an agent, you would typically initialize an instance of the `Agent` class with the desired properties. Here’s a conceptual example including all attributes:\n\nCode example\n\nCopy\n\n```python\nfrom crewai import Agent\n\nagent = Agent(\n  role='Data Analyst',\n  goal='Extract actionable insights',\n  backstory=\"\"\"You're a data analyst at a large company.\n    You're responsible for analyzing data and providing insights\n    to the business.\n    You're currently working on a project to analyze the\n    performance of our marketing campaigns.\"\"\",\n  tools=[my_tool1, my_tool2],  # Optional, defaults to an empty list\n  llm=my_llm,  # Optional\n  function_calling_llm=my_llm,  # Optional\n  max_iter=15,  # Optional\n  max_rpm=None, # Optional\n  max_execution_time=None, # Optional\n  verbose=True,  # Optional\n  allow_delegation=False,  # Optional\n  step_callback=my_intermediate_step_callback,  # Optional\n  cache=True,  # Optional\n  system_template=my_system_template,  # Optional\n  prompt_template=my_prompt_template,  # Optional\n  response_template=my_response_template,  # Optional\n  config=my_config,  # Optional\n  crew=my_crew,  # Optional\n  tools_handler=my_tools_handler,  # Optional\n  cache_handler=my_cache_handler,  # Optional\n  callbacks=[callback1, callback2],  # Optional\n  allow_code_execution=True,  # Optional\n  max_retry_limit=2,  # Optional\n  use_system_prompt=True,  # Optional\n  respect_context_window=True,  # Optional\n  code_execution_mode='safe',  # Optional, defaults to 'safe'\n)\n\n```\n\n## [​](\\#setting-prompt-templates)  Setting prompt templates\n\nPrompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:\n\nCode example\n\nCopy\n\n```python\nagent = Agent(\n        role=\"{topic} specialist\",\n        goal=\"Figure {goal} out\",\n        backstory=\"I am the master of {role}\",\n        system_template=\"\"\"<|start_header_id|>system<|end_header_id|>\n                        {{ .System }}<|eot_id|>\"\"\",\n        prompt_template=\"\"\"<|start_header_id|>user<|end_header_id|>\n                        {{ .Prompt }}<|eot_id|>\"\"\",\n        response_template=\"\"\"<|start_header_id|>assistant<|end_header_id|>\n                        {{ .Response }}<|eot_id|>\"\"\",\n)\n\n```\n\n## [​](\\#bring-your-third-party-agents)  Bring your third-party agents\n\nExtend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’s `BaseAgent` class.\n\n**BaseAgent** includes attributes and methods required to integrate with your crews to run and delegate tasks to other agents within your own crew.\n\nCrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems.\n\nCode example\n\nCopy\n\n```python\nfrom crewai import Agent, Task, Crew\nfrom custom_agent import CustomAgent # You need to build and extend your own agent logic with the CrewAI BaseAgent class then import it here.\n\nfrom langchain.agents import load_tools\n\nlangchain_tools = load_tools([\"google-serper\"], llm=llm)\n\nagent1 = CustomAgent(\n    role=\"agent role\",\n    goal=\"who is {input}?\",\n    backstory=\"agent backstory\",\n    verbose=True,\n)\n\ntask1 = Task(\n    expected_output=\"a short biography of {input}\",\n    description=\"a short biography of {input}\",\n    agent=agent1,\n)\n\nagent2 = Agent(\n    role=\"agent role\",\n    goal=\"summarize the short bio for {input} and if needed do more research\",\n    backstory=\"agent backstory\",\n    verbose=True,\n)\n\ntask2 = Task(\n    description=\"a tldr summary of the short biography\",\n    expected_output=\"5 bullet point summary of the biography\",\n    agent=agent2,\n    context=[task1],\n)\n\nmy_crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])\ncrew = my_crew.kickoff(inputs={\"input\": \"Mark Twain\"})\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nAgents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. The `code_execution_mode` attribute provides flexibility in how agents execute code, allowing for both secure and direct execution options.\n\nWas this page helpful?\n\nYesNo\n\n[Quickstart](/quickstart) [Tasks](/concepts/tasks)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/agents",
      "title": "Agents - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/agents",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Agents&description=What+are+CrewAI+Agents+and+how+to+use+them.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Agents - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/agents",
      "statusCode": 200,
      "description": "What are CrewAI Agents and how to use them.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Agents&description=What+are+CrewAI+Agents+and+how+to+use+them.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Agents - CrewAI",
      "og:description": "What are CrewAI Agents and how to use them.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Get Started\n\n# Introduction\n\nWelcome to CrewAI docs!\n\n# [​](\\#what-is-crewai)  What is CrewAI?\n\n**CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.**\n\nBy fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.\n\n![CrewAI Mindmap](https://mintlify.s3-us-west-1.amazonaws.com/crewai/crewAI-mindmap.png)\n\nCrewAI Mindmap\n\n## [​](\\#why-crewai)  Why CrewAI?\n\n- 🤼‍♀️ **Role-Playing Agents**: Agents can take on different roles and personas to better understand and interact with complex systems.\n- 🤖 **Autonomous Decision Making**: Agents can make decisions autonomously based on the given context and available tools.\n- 🤝 **Seamless Collaboration**: Agents can work together seamlessly, sharing information and resources to achieve common goals.\n- 🧠 **Complex Task Tackling**: CrewAI is designed to tackle complex tasks, such as multi-step workflows, decision making, and problem solving.\n\n# [​](\\#get-started-with-crewai)  Get Started with CrewAI\n\n[**Quickstart** \\\\\n\\\\\nGetting started with CrewAI](quickstart) [**Join the Community** \\\\\n\\\\\nJoin the CrewAI community and get help with your project!](https://community.crewai.com)\n\n## [​](\\#next-step)  Next Step\n\n- [Install CrewAI](/installation) to get started with your first agent.\n\nWas this page helpful?\n\nYesNo\n\n[Installation](/installation)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/introduction",
      "title": "Introduction - CrewAI",
      "og:url": "https://docs.crewai.com/introduction",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Introduction&description=Welcome+to+CrewAI+docs%21&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Introduction - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/introduction",
      "statusCode": 200,
      "description": "Welcome to CrewAI docs!",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Introduction&description=Welcome+to+CrewAI+docs%21&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Introduction - CrewAI",
      "og:description": "Welcome to CrewAI docs!",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Tasks\n\nDetailed guide on managing and creating tasks within the CrewAI framework, reflecting the latest codebase updates.\n\n## [​](\\#overview-of-a-task)  Overview of a Task\n\nIn the CrewAI framework, a `Task` is a specific assignment completed by an `Agent`.\n\nThey provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.\n\nTasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency.\n\n## [​](\\#task-attributes)  Task Attributes\n\n| Attribute | Parameters | Type | Description |\n| :-- | :-- | :-- | :-- |\n| **Description** | `description` | `str` | A clear, concise statement of what the task entails. |\n| **Agent** | `agent` | `Optional[BaseAgent]` | The agent responsible for the task, assigned either directly or by the crew’s process. |\n| **Expected Output** | `expected_output` | `str` | A detailed description of what the task’s completion looks like. |\n| **Tools** _(optional)_ | `tools` | `Optional[List[Any]]` | The functions or capabilities the agent can utilize to perform the task. Defaults to an empty list. |\n| **Async Execution** _(optional)_ | `async_execution` | `Optional[bool]` | If set, the task executes asynchronously, allowing progression without waiting for completion. Defaults to False. |\n| **Context** _(optional)_ | `context` | `Optional[List[\"Task\"]]` | Specifies tasks whose outputs are used as context for this task. |\n| **Config** _(optional)_ | `config` | `Optional[Dict[str, Any]]` | Additional configuration details for the agent executing the task, allowing further customization. Defaults to None. |\n| **Output JSON** _(optional)_ | `output_json` | `Optional[Type[BaseModel]]` | Outputs a JSON object, requiring an OpenAI client. Only one output format can be set. |\n| **Output Pydantic** _(optional)_ | `output_pydantic` | `Optional[Type[BaseModel]]` | Outputs a Pydantic model object, requiring an OpenAI client. Only one output format can be set. |\n| **Output File** _(optional)_ | `output_file` | `Optional[str]` | Saves the task output to a file. If used with `Output JSON` or `Output Pydantic`, specifies how the output is saved. |\n| **Output** _(optional)_ | `output` | `Optional[TaskOutput]` | An instance of `TaskOutput`, containing the raw, JSON, and Pydantic output plus additional details. |\n| **Callback** _(optional)_ | `callback` | `Optional[Any]` | A callable that is executed with the task’s output upon completion. |\n| **Human Input** _(optional)_ | `human_input` | `Optional[bool]` | Indicates if the task should involve human review at the end, useful for tasks needing human oversight. Defaults to False. |\n| **Converter Class** _(optional)_ | `converter_cls` | `Optional[Type[Converter]]` | A converter class used to export structured output. Defaults to None. |\n\n## [​](\\#creating-a-task)  Creating a Task\n\nCreating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:\n\nCode\n\n```python\nfrom crewai import Task\n\ntask = Task(\n    description='Find and summarize the latest and most relevant news on AI',\n    agent=sales_agent,\n    expected_output='A bullet list summary of the top 5 most important AI news',\n)\n\n```\n\nDirectly specify an `agent` for assignment or let the `hierarchical` CrewAI’s process decide based on roles, availability, etc.\n\n## [​](\\#task-output)  Task Output\n\nThe output of a task in CrewAI framework is encapsulated within the `TaskOutput` class. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.\n\nBy default, the `TaskOutput` will only include the `raw` output. A `TaskOutput` will only include the `pydantic` or `json_dict` output if the original `Task` object was configured with `output_pydantic` or `output_json`, respectively.\n\n### [​](\\#task-output-attributes)  Task Output Attributes\n\n| Attribute | Parameters | Type | Description |\n| :-- | :-- | :-- | :-- |\n| **Description** | `description` | `str` | Description of the task. |\n| **Summary** | `summary` | `Optional[str]` | Summary of the task, auto-generated from the first 10 words of the description. |\n| **Raw** | `raw` | `str` | The raw output of the task. This is the default format for the output. |\n| **Pydantic** | `pydantic` | `Optional[BaseModel]` | A Pydantic model object representing the structured output of the task. |\n| **JSON Dict** | `json_dict` | `Optional[Dict[str, Any]]` | A dictionary representing the JSON output of the task. |\n| **Agent** | `agent` | `str` | The agent that executed the task. |\n| **Output Format** | `output_format` | `OutputFormat` | The format of the task output, with options including RAW, JSON, and Pydantic. The default is RAW. |\n\n### [​](\\#task-methods-and-properties)  Task Methods and Properties\n\n| Method/Property | Description |\n| :-- | :-- |\n| **json** | Returns the JSON string representation of the task output if the output format is JSON. |\n| **to\\_dict** | Converts the JSON and Pydantic outputs to a dictionary. |\n| **str** | Returns the string representation of the task output, prioritizing Pydantic, then JSON, then raw. |\n\n### [​](\\#accessing-task-outputs)  Accessing Task Outputs\n\nOnce a task has been executed, its output can be accessed through the `output` attribute of the `Task` object. The `TaskOutput` class provides various ways to interact with and present this output.\n\n#### [​](\\#example)  Example\n\nCode\n\n```python\n# Example task\ntask = Task(\n    description='Find and summarize the latest AI news',\n    expected_output='A bullet list summary of the top 5 most important AI news',\n    agent=research_agent,\n    tools=[search_tool]\n)\n\n# Execute the crew\ncrew = Crew(\n    agents=[research_agent],\n    tasks=[task],\n    verbose=True\n)\n\nresult = crew.kickoff()\n\n# Accessing the task output\ntask_output = task.output\n\nprint(f\"Task Description: {task_output.description}\")\nprint(f\"Task Summary: {task_output.summary}\")\nprint(f\"Raw Output: {task_output.raw}\")\nif task_output.json_dict:\n    print(f\"JSON Output: {json.dumps(task_output.json_dict, indent=2)}\")\nif task_output.pydantic:\n    print(f\"Pydantic Output: {task_output.pydantic}\")\n\n```\n\n## [​](\\#integrating-tools-with-tasks)  Integrating Tools with Tasks\n\nLeverage tools from the [CrewAI Toolkit](https://github.com/joaomdmoura/crewai-tools) and [LangChain Tools](https://python.langchain.com/docs/integrations/tools) for enhanced task performance and agent interaction.\n\n## [​](\\#creating-a-task-with-tools)  Creating a Task with Tools\n\nCode\n\n```python\nimport os\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\" # serper.dev API key\n\nfrom crewai import Agent, Task, Crew\nfrom crewai_tools import SerperDevTool\n\nresearch_agent = Agent(\n  role='Researcher',\n  goal='Find and summarize the latest AI news',\n  backstory=\"\"\"You're a researcher at a large company.\n  You're responsible for analyzing data and providing insights\n  to the business.\"\"\",\n  verbose=True\n)\n\n# to perform a semantic search for a specified query from a text's content across the internet\nsearch_tool = SerperDevTool()\n\ntask = Task(\n  description='Find and summarize the latest AI news',\n  expected_output='A bullet list summary of the top 5 most important AI news',\n  agent=research_agent,\n  tools=[search_tool]\n)\n\ncrew = Crew(\n    agents=[research_agent],\n    tasks=[task],\n    verbose=True\n)\n\nresult = crew.kickoff()\nprint(result)\n\n```\n\nThis demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution.\n\n## [​](\\#referring-to-other-tasks)  Referring to Other Tasks\n\nIn CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.\n\nThis is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through the `context` attribute of the task:\n\nCode\n\n```python\n# ...\n\nresearch_ai_task = Task(\n    description='Find and summarize the latest AI news',\n    expected_output='A bullet list summary of the top 5 most important AI news',\n    async_execution=True,\n    agent=research_agent,\n    tools=[search_tool]\n)\n\nresearch_ops_task = Task(\n    description='Find and summarize the latest AI Ops news',\n    expected_output='A bullet list summary of the top 5 most important AI Ops news',\n    async_execution=True,\n    agent=research_agent,\n    tools=[search_tool]\n)\n\nwrite_blog_task = Task(\n    description=\"Write a full blog post about the importance of AI and its latest news\",\n    expected_output='Full blog post that is 4 paragraphs long',\n    agent=writer_agent,\n    context=[research_ai_task, research_ops_task]\n)\n\n#...\n\n```\n\n## [​](\\#asynchronous-execution)  Asynchronous Execution\n\nYou can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.\n\nYou can then use the `context` attribute to define in a future task that it should wait for the output of the asynchronous task to be completed.\n\nCode\n\n```python\n#...\n\nlist_ideas = Task(\n    description=\"List of 5 interesting ideas to explore for an article about AI.\",\n    expected_output=\"Bullet point list of 5 ideas for an article.\",\n    agent=researcher,\n    async_execution=True # Will be executed asynchronously\n)\n\nlist_important_history = Task(\n    description=\"Research the history of AI and give me the 5 most important events.\",\n    expected_output=\"Bullet point list of 5 important events.\",\n    agent=researcher,\n    async_execution=True # Will be executed asynchronously\n)\n\nwrite_article = Task(\n    description=\"Write an article about AI, its history, and interesting ideas.\",\n    expected_output=\"A 4 paragraph article about AI.\",\n    agent=writer,\n    context=[list_ideas, list_important_history] # Will wait for the output of the two tasks to be completed\n)\n\n#...\n\n```\n\n## [​](\\#callback-mechanism)  Callback Mechanism\n\nThe callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome.\n\nCode\n\n```python\n# ...\n\ndef callback_function(output: TaskOutput):\n    # Do something after the task is completed\n    # Example: Send an email to the manager\n    print(f\"\"\"\n        Task completed!\n        Task: {output.description}\n        Output: {output.raw}\n    \"\"\")\n\nresearch_task = Task(\n    description='Find and summarize the latest AI news',\n    expected_output='A bullet list summary of the top 5 most important AI news',\n    agent=research_agent,\n    tools=[search_tool],\n    callback=callback_function\n)\n\n#...\n\n```\n\n## [​](\\#accessing-a-specific-task-output)  Accessing a Specific Task Output\n\nOnce a crew finishes running, you can access the output of a specific task by using the `output` attribute of the task object:\n\nCode\n\n```python\n# ...\ntask1 = Task(\n    description='Find and summarize the latest AI news',\n    expected_output='A bullet list summary of the top 5 most important AI news',\n    agent=research_agent,\n    tools=[search_tool]\n)\n\n#...\n\ncrew = Crew(\n    agents=[research_agent],\n    tasks=[task1, task2, task3],\n    verbose=True\n)\n\nresult = crew.kickoff()\n\n# Returns a TaskOutput object with the description and results of the task\nprint(f\"\"\"\n    Task completed!\n    Task: {task1.output.description}\n    Output: {task1.output.raw}\n\"\"\")\n\n```\n\n## [​](\\#tool-override-mechanism)  Tool Override Mechanism\n\nSpecifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility.\n\n## [​](\\#error-handling-and-validation-mechanisms)  Error Handling and Validation Mechanisms\n\nWhile creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:\n\n- Ensuring only one output type is set per task to maintain clear output expectations.\n- Preventing the manual assignment of the `id` attribute to uphold the integrity of the unique identifier system.\n\nThese validations help in maintaining the consistency and reliability of task executions within the crewAI framework.\n\n## [​](\\#creating-directories-when-saving-files)  Creating Directories when Saving Files\n\nYou can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured.\n\nCode\n\n```python\n# ...\n\nsave_output_task = Task(\n    description='Save the summarized AI news to a file',\n    expected_output='File saved successfully',\n    agent=research_agent,\n    tools=[file_save_tool],\n    output_file='outputs/ai_news_summary.txt',\n    create_directory=True\n)\n\n#...\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nTasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended.\n\nWas this page helpful?\n\nYesNo\n\n[Agents](/concepts/agents) [Crews](/concepts/crews)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/tasks",
      "title": "Tasks - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/tasks",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Tasks&description=Detailed+guide+on+managing+and+creating+tasks+within+the+CrewAI+framework%2C+reflecting+the+latest+codebase+updates.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Tasks - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/tasks",
      "statusCode": 200,
      "description": "Detailed guide on managing and creating tasks within the CrewAI framework, reflecting the latest codebase updates.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Tasks&description=Detailed+guide+on+managing+and+creating+tasks+within+the+CrewAI+framework%2C+reflecting+the+latest+codebase+updates.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Tasks - CrewAI",
      "og:description": "Detailed guide on managing and creating tasks within the CrewAI framework, reflecting the latest codebase updates.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# LLMs\n\nLearn how to configure and optimize LLMs for your CrewAI projects.\n\n# [​](\\#large-language-models-llms-in-crewai)  Large Language Models (LLMs) in CrewAI\n\nLarge Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects.\n\n## [​](\\#key-concepts)  Key Concepts\n\n- **LLM**: Large Language Model, the AI powering agent intelligence\n- **Agent**: A CrewAI entity that uses an LLM to perform tasks\n- **Provider**: A service that offers LLM capabilities (e.g., OpenAI, Anthropic, Ollama, [more providers](https://docs.litellm.ai/docs/providers))\n\n## [​](\\#configuring-llms-for-agents)  Configuring LLMs for Agents\n\nCrewAI offers flexible options for setting up LLMs:\n\n### [​](\\#1-default-configuration)  1\\. Default Configuration\n\nBy default, CrewAI uses the `gpt-4o-mini` model. It uses environment variables if no LLM is specified:\n\n- `OPENAI_MODEL_NAME` (defaults to “gpt-4o-mini” if not set)\n- `OPENAI_API_BASE`\n- `OPENAI_API_KEY`\n\n### [​](\\#2-updating-yaml-files)  2\\. Updating YAML files\n\nYou can update the `agents.yml` file to refer to the LLM you want to use:\n\nCode\n\nCopy\n\n```yaml\nresearcher:\n    role: Research Specialist\n    goal: Conduct comprehensive research and analysis to gather relevant information,\n        synthesize findings, and produce well-documented insights.\n    backstory: A dedicated research professional with years of experience in academic\n        investigation, literature review, and data analysis, known for thorough and\n        methodical approaches to complex research questions.\n    verbose: true\n    llm: openai/gpt-4o\n    # llm: azure/gpt-4o-mini\n    # llm: gemini/gemini-pro\n    # llm: anthropic/claude-3-5-sonnet-20240620\n    # llm: bedrock/anthropic.claude-3-sonnet-20240229-v1:0\n    # llm: mistral/mistral-large-latest\n    # llm: ollama/llama3:70b\n    # llm: groq/llama-3.2-90b-vision-preview\n    # llm: watsonx/meta-llama/llama-3-1-70b-instruct\n    # llm: nvidia_nim/meta/llama3-70b-instruct\n    # llm: sambanova/Meta-Llama-3.1-8B-Instruct\n    # ...\n\n```\n\nKeep in mind that you will need to set certain ENV vars depending on the model you are\nusing to account for the credentials or set a custom LLM object like described below.\nHere are some of the required ENV vars for some of the LLM integrations:\n\nOpenAI\n\nCode\n\nCopy\n\n```python\nOPENAI_API_KEY=<your-api-key>\nOPENAI_API_BASE=<optional-custom-base-url>\nOPENAI_MODEL_NAME=<openai-model-name>\nOPENAI_ORGANIZATION=<your-org-id>       # OPTIONAL\nOPENAI_API_BASE=<openaiai-api-base>     # OPTIONAL\n\n```\n\nAnthropic\n\nCode\n\nCopy\n\n```python\nANTHROPIC_API_KEY=<your-api-key>\n\n```\n\nGoogle\n\nCode\n\nCopy\n\n```python\nGEMINI_API_KEY=<your-api-key>\n\n```\n\nAzure\n\nCode\n\nCopy\n\n```python\nAZURE_API_KEY=<your-api-key>                    # \"my-azure-api-key\"\nAZURE_API_BASE=<your-resource-url>              # \"https://example-endpoint.openai.azure.com\"\nAZURE_API_VERSION=<api-version>                 # \"2023-05-15\"\nAZURE_AD_TOKEN=<your-azure-ad-token>            # Optional\nAZURE_API_TYPE=<your-azure-api-type>            # Optional\n\n```\n\nAWS Bedrock\n\nCode\n\nCopy\n\n```python\nAWS_ACCESS_KEY_ID=<your-access-key>\nAWS_SECRET_ACCESS_KEY=<your-secret-key>\nAWS_DEFAULT_REGION=<your-region>\n\n```\n\nMistral\n\nCode\n\nCopy\n\n```python\nMISTRAL_API_KEY=<your-api-key>\n\n```\n\nGroq\n\nCode\n\nCopy\n\n```python\nGROQ_API_KEY=<your-api-key>\n\n```\n\nIBM watsonx.ai\n\nCode\n\nCopy\n\n```python\nWATSONX_URL=<your-url>                          # (required) Base URL of your WatsonX instance\nWATSONX_APIKEY=<your-apikey>                    # (required) IBM cloud API key\nWATSONX_TOKEN=<your-token>                      # (required) IAM auth token (alternative to APIKEY)\nWATSONX_PROJECT_ID=<your-project-id>            # (optional) Project ID of your WatsonX instance\nWATSONX_DEPLOYMENT_SPACE_ID=<your-space-id>     # (optional) ID of deployment space for deployed models\n\n```\n\n### [​](\\#3-custom-llm-objects)  3\\. Custom LLM Objects\n\nPass a custom LLM implementation or object from another library.\n\nSee below for examples.\n\n- String Identifier\n- LLM Instance\n\nCode\n\nCopy\n\n```python\nagent = Agent(llm=\"gpt-4o\", ...)\n\n```\n\n## [​](\\#connecting-to-openai-compatible-llms)  Connecting to OpenAI-Compatible LLMs\n\nYou can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:\n\n- Using Environment Variables\n- Using LLM Class Attributes\n\nCode\n\nCopy\n\n```python\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\nos.environ[\"OPENAI_API_BASE\"] = \"https://api.your-provider.com/v1\"\n\n```\n\n## [​](\\#llm-configuration-options)  LLM Configuration Options\n\nWhen configuring an LLM for your agent, you have access to a wide range of parameters:\n\n| Parameter | Type | Description |\n| :-- | :-: | :-- |\n| **model** | `str` | Name of the model to use (e.g., “gpt-4”, “gpt-3.5-turbo”, “ollama/llama3.1”). For more options, visit the providers documentation. |\n| **timeout** | `float, int` | Maximum time (in seconds) to wait for a response. |\n| **temperature** | `float` | Controls randomness in output (0.0 to 1.0). |\n| **top\\_p** | `float` | Controls diversity of output (0.0 to 1.0). |\n| **n** | `int` | Number of completions to generate. |\n| **stop** | `str, List[str]` | Sequence(s) where generation should stop. |\n| **max\\_tokens** | `int` | Maximum number of tokens to generate. |\n| **presence\\_penalty** | `float` | Penalizes new tokens based on their presence in prior text. |\n| **frequency\\_penalty** | `float` | Penalizes new tokens based on their frequency in prior text. |\n| **logit\\_bias** | `Dict[int, float]` | Modifies likelihood of specified tokens appearing. |\n| **response\\_format** | `Dict[str, Any]` | Specifies the format of the response (e.g., JSON object). |\n| **seed** | `int` | Sets a random seed for deterministic results. |\n| **logprobs** | `bool` | Returns log probabilities of output tokens if enabled. |\n| **top\\_logprobs** | `int` | Number of most likely tokens for which to return log probabilities. |\n| **base\\_url** | `str` | The base URL for the API endpoint. |\n| **api\\_version** | `str` | Version of the API to use. |\n| **api\\_key** | `str` | Your API key for authentication. |\n\nThese are examples of how to configure LLMs for your agent.\n\nOpenAI\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"gpt-4\",\n    temperature=0.8,\n    max_tokens=150,\n    top_p=0.9,\n    frequency_penalty=0.1,\n    presence_penalty=0.1,\n    stop=[\"END\"],\n    seed=42,\n    base_url=\"https://api.openai.com/v1\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nCerebras\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"cerebras/llama-3.1-70b\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nOllama (Local LLMs)\n\nCrewAI supports using Ollama for running open-source models locally:\n\n1. Install Ollama: [ollama.ai](https://ollama.ai/)\n2. Run a model: `ollama run llama2`\n3. Configure agent:\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nagent = Agent(\n    llm=LLM(\n        model=\"ollama/llama3.1\",\n        base_url=\"http://localhost:11434\"\n    ),\n    ...\n)\n\n```\n\nGroq\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"groq/llama3-8b-8192\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nAnthropic\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"anthropic/claude-3-5-sonnet-20241022\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nFireworks AI\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"fireworks_ai/accounts/fireworks/models/llama-v3-70b-instruct\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nGemini\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"gemini/gemini-1.5-pro-002\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nPerplexity AI (pplx-api)\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"perplexity/mistral-7b-instruct\",\n    base_url=\"https://api.perplexity.ai/v1\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nIBM watsonx.ai\n\nYou can use IBM Watson by seeting the following ENV vars:\n\nCode\n\nCopy\n\n```python\nWATSONX_URL=<your-url>\nWATSONX_APIKEY=<your-apikey>\nWATSONX_PROJECT_ID=<your-project-id>\n\n```\n\nYou can then define your agents llms by updating the `agents.yml`\n\nCode\n\nCopy\n\n```yaml\nresearcher:\n    role: Research Specialist\n    goal: Conduct comprehensive research and analysis to gather relevant information,\n        synthesize findings, and produce well-documented insights.\n    backstory: A dedicated research professional with years of experience in academic\n        investigation, literature review, and data analysis, known for thorough and\n        methodical approaches to complex research questions.\n    verbose: true\n    llm: watsonx/meta-llama/llama-3-1-70b-instruct\n\n```\n\nYou can also set up agents more dynamically as a base level LLM instance, like bellow:\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"watsonx/ibm/granite-13b-chat-v2\",\n    base_url=\"https://api.watsonx.ai/v1\",\n    api_key=\"your-api-key-here\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nHugging Face\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"huggingface/meta-llama/Meta-Llama-3.1-8B-Instruct\",\n    api_key=\"your-api-key-here\",\n    base_url=\"your_api_endpoint\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\n## [​](\\#changing-the-base-api-url)  Changing the Base API URL\n\nYou can change the base API URL for any LLM provider by setting the `base_url` parameter:\n\nCode\n\nCopy\n\n```python\nfrom crewai import LLM\n\nllm = LLM(\n    model=\"custom-model-name\",\n    base_url=\"https://api.your-provider.com/v1\",\n    api_key=\"your-api-key\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nThis is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.\n\n## [​](\\#best-practices)  Best Practices\n\n1. **Choose the right model**: Balance capability and cost.\n2. **Optimize prompts**: Clear, concise instructions improve output.\n3. **Manage tokens**: Monitor and limit token usage for efficiency.\n4. **Use appropriate temperature**: Lower for factual tasks, higher for creative ones.\n5. **Implement error handling**: Gracefully manage API errors and rate limits.\n\n## [​](\\#troubleshooting)  Troubleshooting\n\n- **API Errors**: Check your API key, network connection, and rate limits.\n- **Unexpected Outputs**: Refine your prompts and adjust temperature or top\\_p.\n- **Performance Issues**: Consider using a more powerful model or optimizing your queries.\n- **Timeout Errors**: Increase the `timeout` parameter or optimize your input.\n\nWas this page helpful?\n\nYesNo\n\n[Flows](/concepts/flows) [Processes](/concepts/processes)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/llms",
      "title": "LLMs - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/llms",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=LLMs&description=Learn+how+to+configure+and+optimize+LLMs+for+your+CrewAI+projects.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "LLMs - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/llms",
      "statusCode": 200,
      "description": "Learn how to configure and optimize LLMs for your CrewAI projects.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=LLMs&description=Learn+how+to+configure+and+optimize+LLMs+for+your+CrewAI+projects.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "LLMs - CrewAI",
      "og:description": "Learn how to configure and optimize LLMs for your CrewAI projects.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# MySQL RAG Search\n\nThe `MySQLSearchTool` is designed to search MySQL databases and return the most relevant results.\n\n# [​](\\#mysqlsearchtool)  `MySQLSearchTool`\n\n## [​](\\#description)  Description\n\nThis tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,\nthe MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.\nIt simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing\nto perform advanced queries on extensive datasets within a MySQL database.\n\n## [​](\\#installation)  Installation\n\nTo install the `crewai_tools` package and utilize the MySQLSearchTool, execute the following command in your terminal:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nBelow is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import MySQLSearchTool\n\n# Initialize the tool with the database URI and the target table name\ntool = MySQLSearchTool(\n    db_uri='mysql://user:password@localhost:3306/mydatabase',\n    table_name='employees'\n)\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe MySQLSearchTool requires the following arguments for its operation:\n\n- `db_uri`: A string representing the URI of the MySQL database to be queried. This argument is mandatory and must include the necessary authentication details and the location of the database.\n- `table_name`: A string specifying the name of the table within the database on which the semantic search will be performed. This argument is mandatory.\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = MySQLSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\",\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[MDX RAG Search](/tools/mdxsearchtool) [NL2SQL Tool](/tools/nl2sqltool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/mysqltool",
      "title": "MySQL RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/mysqltool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=MySQL+RAG+Search&description=The+%60MySQLSearchTool%60+is+designed+to+search+MySQL+databases+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "MySQL RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/mysqltool",
      "statusCode": 200,
      "description": "The `MySQLSearchTool` is designed to search MySQL databases and return the most relevant results.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=MySQL+RAG+Search&description=The+%60MySQLSearchTool%60+is+designed+to+search+MySQL+databases+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "MySQL RAG Search - CrewAI",
      "og:description": "The `MySQLSearchTool` is designed to search MySQL databases and return the most relevant results.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Coding Agents\n\nLearn how to enable your CrewAI Agents to write and execute code, and explore advanced features for enhanced functionality.\n\n## [​](\\#introduction)  Introduction\n\nCrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions.\n\n## [​](\\#enabling-code-execution)  Enabling Code Execution\n\nTo enable code execution for an agent, set the `allow_code_execution` parameter to `True` when creating the agent.\n\nHere’s an example:\n\nCode\n\nCopy\n\n```python\nfrom crewai import Agent\n\ncoding_agent = Agent(\n    role=\"Senior Python Developer\",\n    goal=\"Craft well-designed and thought-out code\",\n    backstory=\"You are a senior Python developer with extensive experience in software architecture and best practices.\",\n    allow_code_execution=True\n)\n\n```\n\nNote that `allow_code_execution` parameter defaults to `False`.\n\n## [​](\\#important-considerations)  Important Considerations\n\n1. **Model Selection**: It is strongly recommended to use more capable models like Claude 3.5 Sonnet and GPT-4 when enabling code execution.\nThese models have a better understanding of programming concepts and are more likely to generate correct and efficient code.\n\n2. **Error Handling**: The code execution feature includes error handling. If executed code raises an exception, the agent will receive the error message and can attempt to correct the code or\nprovide alternative solutions. The `max_retry_limit` parameter, which defaults to 2, controls the maximum number of retries for a task.\n\n3. **Dependencies**: To use the code execution feature, you need to install the `crewai_tools` package. If not installed, the agent will log an info message:\n“Coding tools not available. Install crewai\\_tools.”\n\n\n## [​](\\#code-execution-process)  Code Execution Process\n\nWhen an agent with code execution enabled encounters a task requiring programming:\n\n1\n\nTask Analysis\n\nThe agent analyzes the task and determines that code execution is necessary.\n\n2\n\nCode Formulation\n\nIt formulates the Python code needed to solve the problem.\n\n3\n\nCode Execution\n\nThe code is sent to the internal code execution tool ( `CodeInterpreterTool`).\n\n4\n\nResult Interpretation\n\nThe agent interprets the result and incorporates it into its response or uses it for further problem-solving.\n\n## [​](\\#example-usage)  Example Usage\n\nHere’s a detailed example of creating an agent with code execution capabilities and using it in a task:\n\nCode\n\nCopy\n\n```python\nfrom crewai import Agent, Task, Crew\n\n# Create an agent with code execution enabled\ncoding_agent = Agent(\n    role=\"Python Data Analyst\",\n    goal=\"Analyze data and provide insights using Python\",\n    backstory=\"You are an experienced data analyst with strong Python skills.\",\n    allow_code_execution=True\n)\n\n# Create a task that requires code execution\ndata_analysis_task = Task(\n    description=\"Analyze the given dataset and calculate the average age of participants.\",\n    agent=coding_agent\n)\n\n# Create a crew and add the task\nanalysis_crew = Crew(\n    agents=[coding_agent],\n    tasks=[data_analysis_task]\n)\n\n# Execute the crew\nresult = analysis_crew.kickoff()\n\nprint(result)\n\n```\n\nIn this example, the `coding_agent` can write and execute Python code to perform data analysis tasks.\n\nWas this page helpful?\n\nYesNo\n\n[Customize Agents](/how-to/customizing-agents) [Force Tool Output as Result](/how-to/force-tool-output-as-result)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/coding-agents",
      "title": "Coding Agents - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/coding-agents",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Coding+Agents&description=Learn+how+to+enable+your+CrewAI+Agents+to+write+and+execute+code%2C+and+explore+advanced+features+for+enhanced+functionality.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Coding Agents - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/coding-agents",
      "statusCode": 200,
      "description": "Learn how to enable your CrewAI Agents to write and execute code, and explore advanced features for enhanced functionality.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Coding+Agents&description=Learn+how+to+enable+your+CrewAI+Agents+to+write+and+execute+code%2C+and+explore+advanced+features+for+enhanced+functionality.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Coding Agents - CrewAI",
      "og:description": "Learn how to enable your CrewAI Agents to write and execute code, and explore advanced features for enhanced functionality.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Create Custom Tools\n\nComprehensive guide on crafting, using, and managing custom tools within the CrewAI framework, including new functionalities and error handling.\n\n## [​](\\#creating-and-utilizing-tools-in-crewai)  Creating and Utilizing Tools in CrewAI\n\nThis guide provides detailed instructions on creating custom tools for the CrewAI framework and how to efficiently manage and utilize these tools,\nincorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools,\nenabling agents to perform a wide range of actions.\n\n### [​](\\#subclassing-basetool)  Subclassing `BaseTool`\n\nTo create a personalized tool, inherit from `BaseTool` and define the necessary attributes, including the `args_schema` for input validation, and the `_run` method.\n\nCode\n\nCopy\n\n```python\nfrom typing import Type\nfrom crewai.tools import BaseTool\nfrom pydantic import BaseModel, Field\n\nclass MyToolInput(BaseModel):\n    \"\"\"Input schema for MyCustomTool.\"\"\"\n    argument: str = Field(..., description=\"Description of the argument.\")\n\nclass MyCustomTool(BaseTool):\n    name: str = \"Name of my tool\"\n    description: str = \"What this tool does. It's vital for effective utilization.\"\n    args_schema: Type[BaseModel] = MyToolInput\n\n    def _run(self, argument: str) -> str:\n        # Your tool's logic here\n        return \"Tool's result\"\n\n```\n\n### [​](\\#using-the-tool-decorator)  Using the `tool` Decorator\n\nAlternatively, you can use the tool decorator `@tool`. This approach allows you to define the tool’s attributes and functionality directly within a function,\noffering a concise and efficient way to create specialized tools tailored to your needs.\n\nCode\n\nCopy\n\n```python\nfrom crewai.tools import tool\n\n@tool(\"Tool Name\")\ndef my_simple_tool(question: str) -> str:\n    \"\"\"Tool description for clarity.\"\"\"\n    # Tool logic here\n    return \"Tool output\"\n\n```\n\n### [​](\\#defining-a-cache-function-for-the-tool)  Defining a Cache Function for the Tool\n\nTo optimize tool performance with caching, define custom caching strategies using the `cache_function` attribute.\n\nCode\n\nCopy\n\n```python\n@tool(\"Tool with Caching\")\ndef cached_tool(argument: str) -> str:\n    \"\"\"Tool functionality description.\"\"\"\n    return \"Cacheable result\"\n\ndef my_cache_strategy(arguments: dict, result: str) -> bool:\n    # Define custom caching logic\n    return True if some_condition else False\n\ncached_tool.cache_function = my_cache_strategy\n\n```\n\nBy adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes,\nyou can leverage the full capabilities of the CrewAI framework, enhancing both the development experience and the efficiency of your AI agents.\n\nWas this page helpful?\n\nYesNo\n\n[Using LlamaIndex Tools](/concepts/llamaindex-tools) [Sequential Processes](/how-to/sequential-process)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/create-custom-tools",
      "title": "Create Custom Tools - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/create-custom-tools",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Create+Custom+Tools&description=Comprehensive+guide+on+crafting%2C+using%2C+and+managing+custom+tools+within+the+CrewAI+framework%2C+including+new+functionalities+and+error+handling.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Create Custom Tools - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/create-custom-tools",
      "statusCode": 200,
      "description": "Comprehensive guide on crafting, using, and managing custom tools within the CrewAI framework, including new functionalities and error handling.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Create+Custom+Tools&description=Comprehensive+guide+on+crafting%2C+using%2C+and+managing+custom+tools+within+the+CrewAI+framework%2C+including+new+functionalities+and+error+handling.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Create Custom Tools - CrewAI",
      "og:description": "Comprehensive guide on crafting, using, and managing custom tools within the CrewAI framework, including new functionalities and error handling.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Collaboration\n\nExploring the dynamics of agent collaboration within the CrewAI framework, focusing on the newly integrated features for enhanced functionality.\n\n## [​](\\#collaboration-fundamentals)  Collaboration Fundamentals\n\nCollaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem.\n\n- **Information Sharing**: Ensures all agents are well-informed and can contribute effectively by sharing data and findings.\n- **Task Assistance**: Allows agents to seek help from peers with the required expertise for specific tasks.\n- **Resource Allocation**: Optimizes task execution through the efficient distribution and sharing of resources among agents.\n\n## [​](\\#enhanced-attributes-for-improved-collaboration)  Enhanced Attributes for Improved Collaboration\n\nThe `Crew` class has been enriched with several attributes to support advanced functionalities:\n\n| Feature | Description |\n| :-- | :-- |\n| **Language Model Management** ( `manager_llm`, `function_calling_llm`) | Manages language models for executing tasks and tools. `manager_llm` is required for hierarchical processes, while `function_calling_llm` is optional with a default value for streamlined interactions. |\n| **Custom Manager Agent** ( `manager_agent`) | Specifies a custom agent as the manager, replacing the default CrewAI manager. |\n| **Process Flow** ( `process`) | Defines execution logic (e.g., sequential, hierarchical) for task distribution. |\n| **Verbose Logging** ( `verbose`) | Provides detailed logging for monitoring and debugging. Accepts integer and boolean values to control verbosity level. |\n| **Rate Limiting** ( `max_rpm`) | Limits requests per minute to optimize resource usage. Setting guidelines depend on task complexity and load. |\n| **Internationalization / Customization** ( `language`, `prompt_file`) | Supports prompt customization for global usability. [Example of file](https://github.com/joaomdmoura/crewAI/blob/main/src/crewai/translations/en.json) |\n| **Execution and Output Handling** ( `full_output`) | Controls output granularity, distinguishing between full and final outputs. |\n| **Callback and Telemetry** ( `step_callback`, `task_callback`) | Enables step-wise and task-level execution monitoring and telemetry for performance analytics. |\n| **Crew Sharing** ( `share_crew`) | Allows sharing crew data with CrewAI for model improvement. Privacy implications and benefits should be considered. |\n| **Usage Metrics** ( `usage_metrics`) | Logs all LLM usage metrics during task execution for performance insights. |\n| **Memory Usage** ( `memory`) | Enables memory for storing execution history, aiding in agent learning and task efficiency. |\n| **Embedder Configuration** ( `embedder`) | Configures the embedder for language understanding and generation, with support for provider customization. |\n| **Cache Management** ( `cache`) | Specifies whether to cache tool execution results, enhancing performance. |\n| **Output Logging** ( `output_log_file`) | Defines the file path for logging crew execution output. |\n| **Planning Mode** ( `planning`) | Enables action planning before task execution. Set `planning=True` to activate. |\n| **Replay Feature** ( `replay`) | Provides CLI for listing tasks from the last run and replaying from specific tasks, aiding in task management and troubleshooting. |\n\n## [​](\\#delegation-dividing-to-conquer)  Delegation (Dividing to Conquer)\n\nDelegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew’s overall capability.\n\n## [​](\\#implementing-collaboration-and-delegation)  Implementing Collaboration and Delegation\n\nSetting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs.\n\n## [​](\\#example-scenario)  Example Scenario\n\nConsider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow.\n\n## [​](\\#conclusion)  Conclusion\n\nThe integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation.\n\nWas this page helpful?\n\nYesNo\n\n[Processes](/concepts/processes) [Training](/concepts/training)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/collaboration",
      "title": "Collaboration - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/collaboration",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Collaboration&description=Exploring+the+dynamics+of+agent+collaboration+within+the+CrewAI+framework%2C+focusing+on+the+newly+integrated+features+for+enhanced+functionality.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Collaboration - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/collaboration",
      "statusCode": 200,
      "description": "Exploring the dynamics of agent collaboration within the CrewAI framework, focusing on the newly integrated features for enhanced functionality.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Collaboration&description=Exploring+the+dynamics+of+agent+collaboration+within+the+CrewAI+framework%2C+focusing+on+the+newly+integrated+features+for+enhanced+functionality.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Collaboration - CrewAI",
      "og:description": "Exploring the dynamics of agent collaboration within the CrewAI framework, focusing on the newly integrated features for enhanced functionality.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# YouTube Video RAG Search\n\nThe `YoutubeVideoSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube video.\n\n# [​](\\#youtubevideosearchtool)  `YoutubeVideoSearchTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThis tool is part of the `crewai_tools` package and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.\nIt is one of several “Search” tools in the package that leverage RAG for different sources.\nThe YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,\nor they can target their search to a specific Youtube video by providing its URL.\n\n## [​](\\#installation)  Installation\n\nTo utilize the `YoutubeVideoSearchTool`, you must first install the `crewai_tools` package.\nThis package contains the `YoutubeVideoSearchTool` among other utilities designed to enhance your data analysis and processing tasks.\nInstall the package by executing the following command in your terminal:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nTo integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.\nThis demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video’s content.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import YoutubeVideoSearchTool\n\n# General search across Youtube content without specifying a video URL,\n# so the agent can search within any Youtube video content\n# it learns about its url during its operation\ntool = YoutubeVideoSearchTool()\n\n# Targeted search within a specific Youtube video's content\ntool = YoutubeVideoSearchTool(\n    youtube_video_url='https://youtube.com/watch?v=example'\n)\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe YoutubeVideoSearchTool accepts the following initialization arguments:\n\n- `youtube_video_url`: An optional argument at initialization but required if targeting a specific Youtube video. It specifies the Youtube video URL path you want to search within.\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = YoutubeVideoSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[YouTube Channel RAG Search](/tools/youtubechannelsearchtool) [Telemetry](/telemetry)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/youtubevideosearchtool",
      "title": "YouTube Video RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/youtubevideosearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=YouTube+Video+RAG+Search&description=The+%60YoutubeVideoSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+Youtube+video.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "YouTube Video RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/youtubevideosearchtool",
      "statusCode": 200,
      "description": "The `YoutubeVideoSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube video.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=YouTube+Video+RAG+Search&description=The+%60YoutubeVideoSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+Youtube+video.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "YouTube Video RAG Search - CrewAI",
      "og:description": "The `YoutubeVideoSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube video.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# CLI\n\nLearn how to use the CrewAI CLI to interact with CrewAI.\n\n# [​](\\#crewai-cli-documentation)  CrewAI CLI Documentation\n\nThe CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews & flows.\n\n## [​](\\#installation)  Installation\n\nTo use the CrewAI CLI, make sure you have CrewAI installed:\n\nCopy\n\n```shell\npip install crewai\n\n```\n\n## [​](\\#basic-usage)  Basic Usage\n\nThe basic structure of a CrewAI CLI command is:\n\nCopy\n\n```shell\ncrewai [COMMAND] [OPTIONS] [ARGUMENTS]\n\n```\n\n## [​](\\#available-commands)  Available Commands\n\n### [​](\\#1-create)  1\\. Create\n\nCreate a new crew or pipeline.\n\nCopy\n\n```shell\ncrewai create [OPTIONS] TYPE NAME\n\n```\n\n- `TYPE`: Choose between “crew” or “pipeline”\n- `NAME`: Name of the crew or pipeline\n- `--router`: (Optional) Create a pipeline with router functionality\n\nExample:\n\nCopy\n\n```shell\ncrewai create crew my_new_crew\ncrewai create pipeline my_new_pipeline --router\n\n```\n\n### [​](\\#2-version)  2\\. Version\n\nShow the installed version of CrewAI.\n\nCopy\n\n```shell\ncrewai version [OPTIONS]\n\n```\n\n- `--tools`: (Optional) Show the installed version of CrewAI tools\n\nExample:\n\nCopy\n\n```shell\ncrewai version\ncrewai version --tools\n\n```\n\n### [​](\\#3-train)  3\\. Train\n\nTrain the crew for a specified number of iterations.\n\nCopy\n\n```shell\ncrewai train [OPTIONS]\n\n```\n\n- `-n, --n_iterations INTEGER`: Number of iterations to train the crew (default: 5)\n- `-f, --filename TEXT`: Path to a custom file for training (default: “trained\\_agents\\_data.pkl”)\n\nExample:\n\nCopy\n\n```shell\ncrewai train -n 10 -f my_training_data.pkl\n\n```\n\n### [​](\\#4-replay)  4\\. Replay\n\nReplay the crew execution from a specific task.\n\nCopy\n\n```shell\ncrewai replay [OPTIONS]\n\n```\n\n- `-t, --task_id TEXT`: Replay the crew from this task ID, including all subsequent tasks\n\nExample:\n\nCopy\n\n```shell\ncrewai replay -t task_123456\n\n```\n\n### [​](\\#5-log-tasks-outputs)  5\\. Log-tasks-outputs\n\nRetrieve your latest crew.kickoff() task outputs.\n\nCopy\n\n```shell\ncrewai log-tasks-outputs\n\n```\n\n### [​](\\#6-reset-memories)  6\\. Reset-memories\n\nReset the crew memories (long, short, entity, latest\\_crew\\_kickoff\\_outputs).\n\nCopy\n\n```shell\ncrewai reset-memories [OPTIONS]\n\n```\n\n- `-l, --long`: Reset LONG TERM memory\n- `-s, --short`: Reset SHORT TERM memory\n- `-e, --entities`: Reset ENTITIES memory\n- `-k, --kickoff-outputs`: Reset LATEST KICKOFF TASK OUTPUTS\n- `-a, --all`: Reset ALL memories\n\nExample:\n\nCopy\n\n```shell\ncrewai reset-memories --long --short\ncrewai reset-memories --all\n\n```\n\n### [​](\\#7-test)  7\\. Test\n\nTest the crew and evaluate the results.\n\nCopy\n\n```shell\ncrewai test [OPTIONS]\n\n```\n\n- `-n, --n_iterations INTEGER`: Number of iterations to test the crew (default: 3)\n- `-m, --model TEXT`: LLM Model to run the tests on the Crew (default: “gpt-4o-mini”)\n\nExample:\n\nCopy\n\n```shell\ncrewai test -n 5 -m gpt-3.5-turbo\n\n```\n\n### [​](\\#8-run)  8\\. Run\n\nRun the crew.\n\nCopy\n\n```shell\ncrewai run\n\n```\n\nMake sure to run these commands from the directory where your CrewAI project is set up.\nSome commands may require additional configuration or setup within your project structure.\n\n### [​](\\#9-api-keys)  9\\. API Keys\n\nWhen running `crewai create crew` command, the CLI will first show you the top 5 most common LLM providers and ask you to select one.\n\nOnce you’ve selected an LLM provider, you will be prompted for API keys.\n\n#### [​](\\#initial-api-key-providers)  Initial API key providers\n\nThe CLI will initially prompt for API keys for the following services:\n\n- OpenAI\n- Groq\n- Anthropic\n- Google Gemini\n\nWhen you select a provider, the CLI will prompt you to enter your API key.\n\n#### [​](\\#other-options)  Other Options\n\nIf you select option 6, you will be able to select from a list of LiteLLM supported providers.\n\nWhen you select a provider, the CLI will prompt you to enter the Key name and the API key.\n\nSee the following link for each provider’s key name:\n\n- [LiteLLM Providers](https://docs.litellm.ai/docs/providers)\n\nWas this page helpful?\n\nYesNo\n\n[Testing](/concepts/testing) [Tools](/concepts/tools)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/cli",
      "title": "CLI - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/cli",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=CLI&description=Learn+how+to+use+the+CrewAI+CLI+to+interact+with+CrewAI.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "CLI - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/cli",
      "statusCode": 200,
      "description": "Learn how to use the CrewAI CLI to interact with CrewAI.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=CLI&description=Learn+how+to+use+the+CrewAI+CLI+to+interact+with+CrewAI.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "CLI - CrewAI",
      "og:description": "Learn how to use the CrewAI CLI to interact with CrewAI.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Human Input on Execution\n\nIntegrating CrewAI with human input during execution in complex decision-making processes and leveraging the full capabilities of the agent’s attributes and tools.\n\n## [​](\\#human-input-in-agent-execution)  Human input in agent execution\n\nHuman input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary.\nThis feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively.\n\n## [​](\\#using-human-input-with-crewai)  Using human input with CrewAI\n\nTo integrate human input into agent execution, set the `human_input` flag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer.\nThis input can provide extra context, clarify ambiguities, or validate the agent’s output.\n\n### [​](\\#example)  Example:\n\nCopy\n\n```shell\npip install crewai\n\n```\n\nCode\n\nCopy\n\n```python\nimport os\nfrom crewai import Agent, Task, Crew\nfrom crewai_tools import SerperDevTool\n\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\"  # serper.dev API key\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\n\n# Loading Tools\nsearch_tool = SerperDevTool()\n\n# Define your agents with roles, goals, tools, and additional attributes\nresearcher = Agent(\n    role='Senior Research Analyst',\n    goal='Uncover cutting-edge developments in AI and data science',\n    backstory=(\n        \"You are a Senior Research Analyst at a leading tech think tank. \"\n        \"Your expertise lies in identifying emerging trends and technologies in AI and data science. \"\n        \"You have a knack for dissecting complex data and presenting actionable insights.\"\n    ),\n    verbose=True,\n    allow_delegation=False,\n    tools=[search_tool]\n)\nwriter = Agent(\n    role='Tech Content Strategist',\n    goal='Craft compelling content on tech advancements',\n    backstory=(\n        \"You are a renowned Tech Content Strategist, known for your insightful and engaging articles on technology and innovation. \"\n        \"With a deep understanding of the tech industry, you transform complex concepts into compelling narratives.\"\n    ),\n    verbose=True,\n    allow_delegation=True,\n    tools=[search_tool],\n    cache=False,  # Disable cache for this agent\n)\n\n# Create tasks for your agents\ntask1 = Task(\n    description=(\n        \"Conduct a comprehensive analysis of the latest advancements in AI in 2024. \"\n        \"Identify key trends, breakthrough technologies, and potential industry impacts. \"\n        \"Compile your findings in a detailed report. \"\n        \"Make sure to check with a human if the draft is good before finalizing your answer.\"\n    ),\n    expected_output='A comprehensive full report on the latest AI advancements in 2024, leave nothing out',\n    agent=researcher,\n    human_input=True\n)\n\ntask2 = Task(\n    description=(\n        \"Using the insights from the researcher\\'s report, develop an engaging blog post that highlights the most significant AI advancements. \"\n        \"Your post should be informative yet accessible, catering to a tech-savvy audience. \"\n        \"Aim for a narrative that captures the essence of these breakthroughs and their implications for the future.\"\n    ),\n    expected_output='A compelling 3 paragraphs blog post formatted as markdown about the latest AI advancements in 2024',\n    agent=writer,\n    human_input=True\n)\n\n# Instantiate your crew with a sequential process\ncrew = Crew(\n    agents=[researcher, writer],\n    tasks=[task1, task2],\n    verbose=True,\n    memory=True,\n    planning=True  # Enable planning feature for the crew\n)\n\n# Get your crew to work!\nresult = crew.kickoff()\n\nprint(\"######################\")\nprint(result)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Force Tool Output as Result](/how-to/force-tool-output-as-result) [Kickoff Crew Asynchronously](/how-to/kickoff-async)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/human-input-on-execution",
      "title": "Human Input on Execution - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/human-input-on-execution",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Human+Input+on+Execution&description=Integrating+CrewAI+with+human+input+during+execution+in+complex+decision-making+processes+and+leveraging+the+full+capabilities+of+the+agent%27s+attributes+and+tools.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Human Input on Execution - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/human-input-on-execution",
      "statusCode": 200,
      "description": "Integrating CrewAI with human input during execution in complex decision-making processes and leveraging the full capabilities of the agent's attributes and tools.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Human+Input+on+Execution&description=Integrating+CrewAI+with+human+input+during+execution+in+complex+decision-making+processes+and+leveraging+the+full+capabilities+of+the+agent%27s+attributes+and+tools.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Human Input on Execution - CrewAI",
      "og:description": "Integrating CrewAI with human input during execution in complex decision-making processes and leveraging the full capabilities of the agent's attributes and tools.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# DOCX RAG Search\n\nThe `DOCXSearchTool` is a RAG tool designed for semantic searching within DOCX documents.\n\n# [​](\\#docxsearchtool)  `DOCXSearchTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThe `DOCXSearchTool` is a RAG tool designed for semantic searching within DOCX documents.\nIt enables users to effectively search and extract relevant information from DOCX files using query-based searches.\nThis tool is invaluable for data analysis, information management, and research tasks,\nstreamlining the process of finding specific information within large document collections.\n\n## [​](\\#installation)  Installation\n\nInstall the crewai\\_tools package by running the following command in your terminal:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nThe following example demonstrates initializing the DOCXSearchTool to search within any DOCX file’s content or with a specific DOCX file path.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import DOCXSearchTool\n\n# Initialize the tool to search within any DOCX file's content\ntool = DOCXSearchTool()\n\n# OR\n\n# Initialize the tool with a specific DOCX file,\n# so the agent can only search the content of the specified DOCX file\ntool = DOCXSearchTool(docx='path/to/your/document.docx')\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe following parameters can be used to customize the `DOCXSearchTool`’s behavior:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **docx** | `string` | _Optional_. An argument that specifies the path to the DOCX file you want to search. If not provided during initialization, the tool allows for later specification of any DOCX file’s content path for searching. |\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = DOCXSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Directory Read](/tools/directoryreadtool) [EXA Search Web Loader](/tools/exasearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/docxsearchtool",
      "title": "DOCX RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/docxsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=DOCX+RAG+Search&description=The+%60DOCXSearchTool%60+is+a+RAG+tool+designed+for+semantic+searching+within+DOCX+documents.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "DOCX RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/docxsearchtool",
      "statusCode": 200,
      "description": "The `DOCXSearchTool` is a RAG tool designed for semantic searching within DOCX documents.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=DOCX+RAG+Search&description=The+%60DOCXSearchTool%60+is+a+RAG+tool+designed+for+semantic+searching+within+DOCX+documents.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "DOCX RAG Search - CrewAI",
      "og:description": "The `DOCXSearchTool` is a RAG tool designed for semantic searching within DOCX documents.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Selenium Scraper\n\nThe `SeleniumScrapingTool` is designed to extract and read the content of a specified website using Selenium.\n\n# [​](\\#seleniumscrapingtool)  `SeleniumScrapingTool`\n\nThis tool is currently in development. As we refine its capabilities, users may encounter unexpected behavior.\nYour feedback is invaluable to us for making improvements.\n\n## [​](\\#description)  Description\n\nThe SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.\nIt allows for precise extraction of content from web pages by using CSS selectors to target specific elements.\nIts design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL.\n\n## [​](\\#installation)  Installation\n\nTo get started with the SeleniumScrapingTool, install the crewai\\_tools package using pip:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#usage-examples)  Usage Examples\n\nBelow are some scenarios where the SeleniumScrapingTool can be utilized:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import SeleniumScrapingTool\n\n# Example 1:\n# Initialize the tool without any parameters to scrape\n# the current page it navigates to\ntool = SeleniumScrapingTool()\n\n# Example 2:\n# Scrape the entire webpage of a given URL\ntool = SeleniumScrapingTool(website_url='https://example.com')\n\n# Example 3:\n# Target and scrape a specific CSS element from a webpage\ntool = SeleniumScrapingTool(\n    website_url='https://example.com',\n    css_element='.main-content'\n)\n\n# Example 4:\n# Perform scraping with additional parameters for a customized experience\ntool = SeleniumScrapingTool(\n    website_url='https://example.com',\n    css_element='.main-content',\n    cookie={'name': 'user', 'value': 'John Doe'},\n    wait_time=10\n)\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe following parameters can be used to customize the SeleniumScrapingTool’s scraping process:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **website\\_url** | `string` | **Mandatory**. Specifies the URL of the website from which content is to be scraped. |\n| **css\\_element** | `string` | **Mandatory**. The CSS selector for a specific element to target on the website, enabling focused scraping of a particular part of a webpage. |\n| **cookie** | `object` | **Optional**. A dictionary containing cookie information, useful for simulating a logged-in session to access restricted content. |\n| **wait\\_time** | `int` | **Optional**. Specifies the delay (in seconds) before scraping, allowing the website and any dynamic content to fully load. |\n\nSince the `SeleniumScrapingTool` is under active development, the parameters and functionality may evolve over time.\nUsers are encouraged to keep the tool updated and report any issues or suggestions for enhancements.\n\nWas this page helpful?\n\nYesNo\n\n[Scrape Website](/tools/scrapewebsitetool) [Spider Scraper](/tools/spidertool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/seleniumscrapingtool",
      "title": "Selenium Scraper - CrewAI",
      "og:url": "https://docs.crewai.com/tools/seleniumscrapingtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Selenium+Scraper&description=The+%60SeleniumScrapingTool%60+is+designed+to+extract+and+read+the+content+of+a+specified+website+using+Selenium.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Selenium Scraper - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/seleniumscrapingtool",
      "statusCode": 200,
      "description": "The `SeleniumScrapingTool` is designed to extract and read the content of a specified website using Selenium.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Selenium+Scraper&description=The+%60SeleniumScrapingTool%60+is+designed+to+extract+and+read+the+content+of+a+specified+website+using+Selenium.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Selenium Scraper - CrewAI",
      "og:description": "The `SeleniumScrapingTool` is designed to extract and read the content of a specified website using Selenium.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Get Started\n\n# Quickstart\n\nBuild your first AI agent with CrewAI in under 5 minutes.\n\n## [​](\\#build-your-first-crewai-agent)  Build your first CrewAI Agent\n\nLet’s create a simple crew that will help us `research` and `report` on the `latest AI developments` for a given topic or subject.\n\nBefore we proceed, make sure you have `crewai` and `crewai-tools` installed.\nIf you haven’t installed them yet, you can do so by following the [installation guide](/installation).\n\nFollow the steps below to get crewing! 🚣‍♂️\n\n1\n\nCreate your crew\n\nCreate a new crew project by running the following command in your terminal.\nThis will create a new directory called `latest-ai-development` with the basic structure for your crew.\n\n2\n\nModify your \\`agents.yaml\\` file\n\nYou can also modify the agents as needed to fit your use case or copy and paste as is to your project.\nAny variable interpolated in your `agents.yaml` and `tasks.yaml` files like `{topic}` will be replaced by the value of the variable in the `main.py` file.\n\nagents.yaml\n\n```yaml\n# src/latest_ai_development/config/agents.yaml\nresearcher:\n  role: >\n    {topic} Senior Data Researcher\n  goal: >\n    Uncover cutting-edge developments in {topic}\n  backstory: >\n    You're a seasoned researcher with a knack for uncovering the latest\n    developments in {topic}. Known for your ability to find the most relevant\n    information and present it in a clear and concise manner.\n\nreporting_analyst:\n  role: >\n    {topic} Reporting Analyst\n  goal: >\n    Create detailed reports based on {topic} data analysis and research findings\n  backstory: >\n    You're a meticulous analyst with a keen eye for detail. You're known for\n    your ability to turn complex data into clear and concise reports, making\n    it easy for others to understand and act on the information you provide.\n\n```\n\n3\n\nModify your \\`tasks.yaml\\` file\n\ntasks.yaml\n\n````yaml\n# src/latest_ai_development/config/tasks.yaml\nresearch_task:\n  description: >\n    Conduct a thorough research about {topic}\n    Make sure you find any interesting and relevant information given\n    the current year is 2024.\n  expected_output: >\n    A list with 10 bullet points of the most relevant information about {topic}\n  agent: researcher\n\nreporting_task:\n  description: >\n    Review the context you got and expand each topic into a full section for a report.\n    Make sure the report is detailed and contains any and all relevant information.\n  expected_output: >\n    A fully fledge reports with the mains topics, each with a full section of information.\n    Formatted as markdown without '```'\n  agent: reporting_analyst\n  output_file: report.md\n\n````\n\n4\n\nModify your \\`crew.py\\` file\n\ncrew.py\n\n```python\n# src/latest_ai_development/crew.py\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task\nfrom crewai_tools import SerperDevTool\n\n@CrewBase\nclass LatestAiDevelopmentCrew():\n  \"\"\"LatestAiDevelopment crew\"\"\"\n\n  @agent\n  def researcher(self) -> Agent:\n    return Agent(\n      config=self.agents_config['researcher'],\n      verbose=True,\n      tools=[SerperDevTool()]\n    )\n\n  @agent\n  def reporting_analyst(self) -> Agent:\n    return Agent(\n      config=self.agents_config['reporting_analyst'],\n      verbose=True\n    )\n\n  @task\n  def research_task(self) -> Task:\n    return Task(\n      config=self.tasks_config['research_task'],\n    )\n\n  @task\n  def reporting_task(self) -> Task:\n    return Task(\n      config=self.tasks_config['reporting_task'],\n      output_file='output/report.md' # This is the file that will be contain the final report.\n    )\n\n  @crew\n  def crew(self) -> Crew:\n    \"\"\"Creates the LatestAiDevelopment crew\"\"\"\n    return Crew(\n      agents=self.agents, # Automatically created by the @agent decorator\n      tasks=self.tasks, # Automatically created by the @task decorator\n      process=Process.sequential,\n      verbose=True,\n    )\n\n```\n\n5\n\nFeel free to pass custom inputs to your crew\n\nFor example, you can pass the `topic` input to your crew to customize the research and reporting.\n\nmain.py\n\n```python\n#!/usr/bin/env python\n# src/latest_ai_development/main.py\nimport sys\nfrom latest_ai_development.crew import LatestAiDevelopmentCrew\n\ndef run():\n  \"\"\"\n  Run the crew.\n  \"\"\"\n  inputs = {\n    'topic': 'AI Agents'\n  }\n  LatestAiDevelopmentCrew().crew().kickoff(inputs=inputs)\n\n```\n\n6\n\nSet your environment variables\n\nBefore running your crew, make sure you have the following keys set as environment variables in your `.env` file:\n\n- An [OpenAI API key](https://platform.openai.com/account/api-keys) (or other LLM API key): `OPENAI_API_KEY=sk-...`\n- A [Serper.dev](https://serper.dev/) API key: `SERPER_API_KEY=YOUR_KEY_HERE`\n\n7\n\nLock and install the dependencies\n\nLock the dependencies and install them by using the CLI command but first, navigate to your project directory:\n\n8\n\nRun your crew\n\nTo run your crew, execute the following command in the root of your project:\n\n9\n\nView your final report\n\nYou should see the output in the console and the `report.md` file should be created in the root of your project with the final report.\n\nHere’s an example of what the report should look like:\n\n### [​](\\#note-on-consistency-in-naming)  Note on Consistency in Naming\n\nThe names you use in your YAML files ( `agents.yaml` and `tasks.yaml`) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks from `tasks.yaml` file.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly.\n\n#### [​](\\#example-references)  Example References\n\nNote how we use the same name for the agent in the `agents.yaml` ( `email_summarizer`) file as the method name in the `crew.py` ( `email_summarizer`) file.\n\nagents.yaml\n\n```yaml\nemail_summarizer:\n    role: >\n      Email Summarizer\n    goal: >\n      Summarize emails into a concise and clear summary\n    backstory: >\n      You will create a 5 bullet point summary of the report\n    llm: mixtal_llm\n\n```\n\nNote how we use the same name for the agent in the `tasks.yaml` ( `email_summarizer_task`) file as the method name in the `crew.py` ( `email_summarizer_task`) file.\n\ntasks.yaml\n\n```yaml\nemail_summarizer_task:\n    description: >\n      Summarize the email into a 5 bullet point summary\n    expected_output: >\n      A 5 bullet point summary of the email\n    agent: email_summarizer\n    context:\n      - reporting_task\n      - research_task\n\n```\n\nUse the annotations to properly reference the agent and task in the `crew.py` file.\n\n### [​](\\#annotations-include)  Annotations include:\n\n- `@agent`\n- `@task`\n- `@crew`\n- `@tool`\n- `@callback`\n- `@output_json`\n- `@output_pydantic`\n- `@cache_handler`\n\ncrew.py\n\n```python\n# ...\n@agent\ndef email_summarizer(self) -> Agent:\n    return Agent(\n        config=self.agents_config[\"email_summarizer\"],\n    )\n\n@task\ndef email_summarizer_task(self) -> Task:\n    return Task(\n        config=self.tasks_config[\"email_summarizer_task\"],\n    )\n# ...\n\n```\n\nIn addition to the [sequential process](../how-to/sequential-process), you can use the [hierarchical process](../how-to/hierarchical-process),\nwhich automatically assigns a manager to the defined crew to properly coordinate the planning and execution of tasks through delegation and validation of results.\nYou can learn more about the core concepts [here](/concepts).\n\n### [​](\\#replay-tasks-from-latest-crew-kickoff)  Replay Tasks from Latest Crew Kickoff\n\nCrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.\n\n```shell\ncrewai replay <task_id>\n\n```\n\nReplace `<task_id>` with the ID of the task you want to replay.\n\n### [​](\\#reset-crew-memory)  Reset Crew Memory\n\nIf you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:\n\n```shell\ncrewai reset-memory\n\n```\n\nThis will clear the crew’s memory, allowing for a fresh start.\n\n## [​](\\#deploying-your-project)  Deploying Your Project\n\nThe easiest way to deploy your crew is through [CrewAI Enterprise](http://app.crewai.com/), where you can deploy your crew in a few clicks.\n\nWas this page helpful?\n\nYesNo\n\n[Installation](/installation) [Agents](/concepts/agents)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/quickstart",
      "title": "Quickstart - CrewAI",
      "og:url": "https://docs.crewai.com/quickstart",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Quickstart&description=Build+your+first+AI+agent+with+CrewAI+in+under+5+minutes.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Quickstart - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/quickstart",
      "statusCode": 200,
      "description": "Build your first AI agent with CrewAI in under 5 minutes.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Quickstart&description=Build+your+first+AI+agent+with+CrewAI+in+under+5+minutes.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Quickstart - CrewAI",
      "og:description": "Build your first AI agent with CrewAI in under 5 minutes.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Kickoff Crew for Each\n\nKickoff Crew for Each Item in a List\n\n## [​](\\#introduction)  Introduction\n\nCrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list.\nThis feature is particularly useful when you need to perform the same set of tasks for multiple items.\n\n## [​](\\#kicking-off-a-crew-for-each-item)  Kicking Off a Crew for Each Item\n\nTo kickoff a crew for each item in a list, use the `kickoff_for_each()` method.\nThis method executes the crew for each item in the list, allowing you to process multiple items efficiently.\n\nHere’s an example of how to kickoff a crew for each item in a list:\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task\n\n# Create an agent with code execution enabled\ncoding_agent = Agent(\n    role=\"Python Data Analyst\",\n    goal=\"Analyze data and provide insights using Python\",\n    backstory=\"You are an experienced data analyst with strong Python skills.\",\n    allow_code_execution=True\n)\n\n# Create a task that requires code execution\ndata_analysis_task = Task(\n    description=\"Analyze the given dataset and calculate the average age of participants. Ages: {ages}\",\n    agent=coding_agent,\n    expected_output=\"The average age calculated from the dataset\"\n)\n\n# Create a crew and add the task\nanalysis_crew = Crew(\n    agents=[coding_agent],\n    tasks=[data_analysis_task],\n    verbose=True,\n    memory=False,\n    respect_context_window=True  # enable by default\n)\n\ndatasets = [\\\n  { \"ages\": [25, 30, 35, 40, 45] },\\\n  { \"ages\": [20, 25, 30, 35, 40] },\\\n  { \"ages\": [30, 35, 40, 45, 50] }\\\n]\n\n# Execute the crew\nresult = analysis_crew.kickoff_for_each(inputs=datasets)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Kickoff Crew Asynchronously](/how-to/kickoff-async) [Replay Tasks from Latest Crew Kickoff](/how-to/replay-tasks-from-latest-crew-kickoff)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/kickoff-for-each",
      "title": "Kickoff Crew for Each - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/kickoff-for-each",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Kickoff+Crew+for+Each&description=Kickoff+Crew+for+Each+Item+in+a+List&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Kickoff Crew for Each - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/kickoff-for-each",
      "statusCode": 200,
      "description": "Kickoff Crew for Each Item in a List",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Kickoff+Crew+for+Each&description=Kickoff+Crew+for+Each+Item+in+a+List&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Kickoff Crew for Each - CrewAI",
      "og:description": "Kickoff Crew for Each Item in a List",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Processes\n\nDetailed guide on workflow management through processes in CrewAI, with updated implementation details.\n\n## [​](\\#understanding-processes)  Understanding Processes\n\nProcesses orchestrate the execution of tasks by agents, akin to project management in human teams.\nThese processes ensure tasks are distributed and executed efficiently, in alignment with a predefined strategy.\n\n## [​](\\#process-implementations)  Process Implementations\n\n- **Sequential**: Executes tasks sequentially, ensuring tasks are completed in an orderly progression.\n- **Hierarchical**: Organizes tasks in a managerial hierarchy, where tasks are delegated and executed based on a structured chain of command. A manager language model ( `manager_llm`) or a custom manager agent ( `manager_agent`) must be specified in the crew to enable the hierarchical process, facilitating the creation and management of tasks by the manager.\n- **Consensual Process (Planned)**: Aiming for collaborative decision-making among agents on task execution, this process type introduces a democratic approach to task management within CrewAI. It is planned for future development and is not currently implemented in the codebase.\n\n## [​](\\#the-role-of-processes-in-teamwork)  The Role of Processes in Teamwork\n\nProcesses enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence.\n\n## [​](\\#assigning-processes-to-a-crew)  Assigning Processes to a Crew\n\nTo assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to define `manager_llm` or `manager_agent` for the manager agent.\n\nCopy\n\n```python\nfrom crewai import Crew\nfrom crewai.process import Process\nfrom langchain_openai import ChatOpenAI\n\n# Example: Creating a crew with a sequential process\ncrew = Crew(\n    agents=my_agents,\n    tasks=my_tasks,\n    process=Process.sequential\n)\n\n# Example: Creating a crew with a hierarchical process\n# Ensure to provide a manager_llm or manager_agent\ncrew = Crew(\n    agents=my_agents,\n    tasks=my_tasks,\n    process=Process.hierarchical,\n    manager_llm=ChatOpenAI(model=\"gpt-4\")\n    # or\n    # manager_agent=my_manager_agent\n)\n\n```\n\n**Note:** Ensure `my_agents` and `my_tasks` are defined prior to creating a `Crew` object, and for the hierarchical process, either `manager_llm` or `manager_agent` is also required.\n\n## [​](\\#sequential-process)  Sequential Process\n\nThis method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.\n\nTo customize task context, utilize the `context` parameter in the `Task` class to specify outputs that should be used as context for subsequent tasks.\n\n## [​](\\#hierarchical-process)  Hierarchical Process\n\nEmulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model ( `manager_llm`). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion.\n\n## [​](\\#process-class-detailed-overview)  Process Class: Detailed Overview\n\nThe `Process` class is implemented as an enumeration ( `Enum`), ensuring type safety and restricting process values to the defined types ( `sequential`, `hierarchical`). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation.\n\n## [​](\\#conclusion)  Conclusion\n\nThe structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.\nThis documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information.\n\nWas this page helpful?\n\nYesNo\n\n[LLMs](/concepts/llms) [Collaboration](/concepts/collaboration)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/processes",
      "title": "Processes - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/processes",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Processes&description=Detailed+guide+on+workflow+management+through+processes+in+CrewAI%2C+with+updated+implementation+details.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Processes - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/processes",
      "statusCode": 200,
      "description": "Detailed guide on workflow management through processes in CrewAI, with updated implementation details.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Processes&description=Detailed+guide+on+workflow+management+through+processes+in+CrewAI%2C+with+updated+implementation+details.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Processes - CrewAI",
      "og:description": "Detailed guide on workflow management through processes in CrewAI, with updated implementation details.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Replay Tasks from Latest Crew Kickoff\n\nReplay tasks from the latest crew.kickoff(…)\n\n## [​](\\#introduction)  Introduction\n\nCrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you’ve finished a kickoff and may want to retry certain tasks or don’t need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.\n\nYou must run `crew.kickoff()` before you can replay a task.\nCurrently, only the latest kickoff is supported, so if you use `kickoff_for_each`, it will only allow you to replay from the most recent crew run.\n\nHere’s an example of how to replay from a task:\n\n### [​](\\#replaying-from-specific-task-using-the-cli)  Replaying from Specific Task Using the CLI\n\nTo use the replay feature, follow these steps:\n\n1\n\nOpen your terminal or command prompt.\n\n2\n\nNavigate to the directory where your CrewAI project is located.\n\n3\n\nRun the following commands:\n\nTo view the latest kickoff task\\_ids use:\n\nCopy\n\n```shell\ncrewai log-tasks-outputs\n\n```\n\nOnce you have your `task_id` to replay, use:\n\nCopy\n\n```shell\ncrewai replay -t <task_id>\n\n```\n\nEnsure `crewai` is installed and configured correctly in your development environment.\n\n### [​](\\#replaying-from-a-task-programmatically)  Replaying from a Task Programmatically\n\nTo replay from a task programmatically, use the following steps:\n\n1\n\nSpecify the \\`task\\_id\\` and input parameters for the replay process.\n\nSpecify the `task_id` and input parameters for the replay process.\n\n2\n\nExecute the replay command within a try-except block to handle potential errors.\n\nExecute the replay command within a try-except block to handle potential errors.\n\nCode\n\nCopy\n\n```python\n  def replay():\n  \"\"\"\n  Replay the crew execution from a specific task.\n  \"\"\"\n  task_id = '<task_id>'\n  inputs = {\"topic\": \"CrewAI Training\"}  # This is optional; you can pass in the inputs you want to replay; otherwise, it uses the previous kickoff's inputs.\n  try:\n      YourCrewName_Crew().crew().replay(task_id=task_id, inputs=inputs)\n\n  except subprocess.CalledProcessError as e:\n      raise Exception(f\"An error occurred while replaying the crew: {e}\")\n\n  except Exception as e:\n      raise Exception(f\"An unexpected error occurred: {e}\")\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nWith the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust.\nEnsure you follow the commands and steps precisely to make the most of these features.\n\nWas this page helpful?\n\nYesNo\n\n[Kickoff Crew for Each](/how-to/kickoff-for-each) [Conditional Tasks](/how-to/conditional-tasks)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff",
      "title": "Replay Tasks from Latest Crew Kickoff - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Replay+Tasks+from+Latest+Crew+Kickoff&description=Replay+tasks+from+the+latest+crew.kickoff%28...%29&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Replay Tasks from Latest Crew Kickoff - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff",
      "statusCode": 200,
      "description": "Replay tasks from the latest crew.kickoff(...)",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Replay+Tasks+from+Latest+Crew+Kickoff&description=Replay+tasks+from+the+latest+crew.kickoff%28...%29&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Replay Tasks from Latest Crew Kickoff - CrewAI",
      "og:description": "Replay tasks from the latest crew.kickoff(...)",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# MDX RAG Search\n\nThe `MDXSearchTool` is designed to search MDX files and return the most relevant results.\n\n# [​](\\#mdxsearchtool)  `MDXSearchTool`\n\nThe MDXSearchTool is in continuous development. Features may be added or removed, and functionality could change unpredictably as we refine the tool.\n\n## [​](\\#description)  Description\n\nThe MDX Search Tool is a component of the `crewai_tools` package aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.\n\n## [​](\\#installation)  Installation\n\nBefore using the MDX Search Tool, ensure the `crewai_tools` package is installed. If it is not, you can install it with the following command:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#usage-example)  Usage Example\n\nTo use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import MDXSearchTool\n\n# Initialize the tool to search any MDX content it learns about during execution\ntool = MDXSearchTool()\n\n# OR\n\n# Initialize the tool with a specific MDX file path for an exclusive search within that document\ntool = MDXSearchTool(mdx='path/to/your/document.mdx')\n\n```\n\n## [​](\\#parameters)  Parameters\n\n- mdx: **Optional**. Specifies the MDX file path for the search. It can be provided during initialization.\n\n## [​](\\#customization-of-model-and-embeddings)  Customization of Model and Embeddings\n\nThe tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:\n\nCode\n\nCopy\n\n```python\ntool = MDXSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # Options include google, openai, anthropic, llama2, etc.\n            config=dict(\n                model=\"llama2\",\n                # Optional parameters can be included here.\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # Optional title for the embeddings can be added here.\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[JSON RAG Search](/tools/jsonsearchtool) [MySQL RAG Search](/tools/mysqltool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/mdxsearchtool",
      "title": "MDX RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/mdxsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=MDX+RAG+Search&description=The+%60MDXSearchTool%60+is+designed+to+search+MDX+files+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "MDX RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/mdxsearchtool",
      "statusCode": 200,
      "description": "The `MDXSearchTool` is designed to search MDX files and return the most relevant results.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=MDX+RAG+Search&description=The+%60MDXSearchTool%60+is+designed+to+search+MDX+files+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "MDX RAG Search - CrewAI",
      "og:description": "The `MDXSearchTool` is designed to search MDX files and return the most relevant results.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# JSON RAG Search\n\nThe `JSONSearchTool` is designed to search JSON files and return the most relevant results.\n\n# [​](\\#jsonsearchtool)  `JSONSearchTool`\n\nThe JSONSearchTool is currently in an experimental phase. This means the tool is under active development, and users might encounter unexpected behavior or changes.\nWe highly encourage feedback on any issues or suggestions for improvements.\n\n## [​](\\#description)  Description\n\nThe JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results.\n\n## [​](\\#installation)  Installation\n\nTo install the JSONSearchTool, use the following pip command:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#usage-examples)  Usage Examples\n\nHere are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase.\n\nCode\n\nCopy\n\n```python\nfrom crewai.json_tools import JSONSearchTool  # Updated import path\n\n# General JSON content search\n# This approach is suitable when the JSON path is either known beforehand or can be dynamically identified.\ntool = JSONSearchTool()\n\n# Restricting search to a specific JSON file\n# Use this initialization method when you want to limit the search scope to a specific JSON file.\ntool = JSONSearchTool(json_path='./path/to/your/file.json')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `json_path` (str, optional): Specifies the path to the JSON file to be searched. This argument is not required if the tool is initialized for a general search. When provided, it confines the search to the specified JSON file.\n\n## [​](\\#configuration-options)  Configuration Options\n\nThe JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements.\n\nCode\n\nCopy\n\n```python\ntool = JSONSearchTool(\n    config={\n        \"llm\": {\n            \"provider\": \"ollama\",  # Other options include google, openai, anthropic, llama2, etc.\n            \"config\": {\n                \"model\": \"llama2\",\n                # Additional optional configurations can be specified here.\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            },\n        },\n        \"embedder\": {\n            \"provider\": \"google\", # or openai, ollama, ...\n            \"config\": {\n                \"model\": \"models/embedding-001\",\n                \"task_type\": \"retrieval_document\",\n                # Further customization options can be added here.\n            },\n        },\n    }\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Google Serper Search](/tools/serperdevtool) [MDX RAG Search](/tools/mdxsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/jsonsearchtool",
      "title": "JSON RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/jsonsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=JSON+RAG+Search&description=The+%60JSONSearchTool%60+is+designed+to+search+JSON+files+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "JSON RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/jsonsearchtool",
      "statusCode": 200,
      "description": "The `JSONSearchTool` is designed to search JSON files and return the most relevant results.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=JSON+RAG+Search&description=The+%60JSONSearchTool%60+is+designed+to+search+JSON+files+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "JSON RAG Search - CrewAI",
      "og:description": "The `JSONSearchTool` is designed to search JSON files and return the most relevant results.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Connect to any LLM\n\nComprehensive guide on integrating CrewAI with various Large Language Models (LLMs) using LiteLLM, including supported providers and configuration options.\n\n## [​](\\#connect-crewai-to-llms)  Connect CrewAI to LLMs\n\nCrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface.\n\nBy default, CrewAI uses the `gpt-4o-mini` model. This is determined by the `OPENAI_MODEL_NAME` environment variable, which defaults to “gpt-4o-mini” if not set.\nYou can easily configure your agents to use a different model or provider as described in this guide.\n\n## [​](\\#supported-providers)  Supported Providers\n\nLiteLLM supports a wide range of providers, including but not limited to:\n\n- OpenAI\n- Anthropic\n- Google (Vertex AI, Gemini)\n- Azure OpenAI\n- AWS (Bedrock, SageMaker)\n- Cohere\n- Hugging Face\n- Ollama\n- Mistral AI\n- Replicate\n- Together AI\n- AI21\n- Cloudflare Workers AI\n- DeepInfra\n- Groq\n- And many more!\n\nFor a complete and up-to-date list of supported providers, please refer to the [LiteLLM Providers documentation](https://docs.litellm.ai/docs/providers).\n\n## [​](\\#changing-the-llm)  Changing the LLM\n\nTo use a different LLM with your CrewAI agents, you have several options:\n\n- Using a String Identifier\n- Using the LLM Class\n\nPass the model name as a string when initializing the agent:\n\nCode\n\nCopy\n\n```python\nfrom crewai import Agent\n\n# Using OpenAI's GPT-4\nopenai_agent = Agent(\n    role='OpenAI Expert',\n    goal='Provide insights using GPT-4',\n    backstory=\"An AI assistant powered by OpenAI's latest model.\",\n    llm='gpt-4'\n)\n\n# Using Anthropic's Claude\nclaude_agent = Agent(\n    role='Anthropic Expert',\n    goal='Analyze data using Claude',\n    backstory=\"An AI assistant leveraging Anthropic's language model.\",\n    llm='claude-2'\n)\n\n```\n\n## [​](\\#configuration-options)  Configuration Options\n\nWhen configuring an LLM for your agent, you have access to a wide range of parameters:\n\n| Parameter | Type | Description |\n| :-- | :-: | :-- |\n| **model** | `str` | The name of the model to use (e.g., “gpt-4”, “claude-2”) |\n| **temperature** | `float` | Controls randomness in output (0.0 to 1.0) |\n| **max\\_tokens** | `int` | Maximum number of tokens to generate |\n| **top\\_p** | `float` | Controls diversity of output (0.0 to 1.0) |\n| **frequency\\_penalty** | `float` | Penalizes new tokens based on their frequency in the text so far |\n| **presence\\_penalty** | `float` | Penalizes new tokens based on their presence in the text so far |\n| **stop** | `str`, `List[str]` | Sequence(s) to stop generation |\n| **base\\_url** | `str` | The base URL for the API endpoint |\n| **api\\_key** | `str` | Your API key for authentication |\n\nFor a complete list of parameters and their descriptions, refer to the LLM class documentation.\n\n## [​](\\#connecting-to-openai-compatible-llms)  Connecting to OpenAI-Compatible LLMs\n\nYou can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:\n\n- Using Environment Variables\n- Using LLM Class Attributes\n\nCode\n\nCopy\n\n```python\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\nos.environ[\"OPENAI_API_BASE\"] = \"https://api.your-provider.com/v1\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"your-model-name\"\n\n```\n\n## [​](\\#using-local-models-with-ollama)  Using Local Models with Ollama\n\nFor local models like those provided by Ollama:\n\n1\n\nDownload and install Ollama\n\n[Click here to download and install Ollama](https://ollama.com/download)\n\n2\n\nPull the desired model\n\nFor example, run `ollama pull llama3.2` to download the model.\n\n3\n\nConfigure your agent\n\nCode\n\nCopy\n\n```python\n    agent = Agent(\n        role='Local AI Expert',\n        goal='Process information using a local model',\n        backstory=\"An AI assistant running on local hardware.\",\n        llm=LLM(model=\"ollama/llama3.2\", base_url=\"http://localhost:11434\")\n    )\n\n```\n\n## [​](\\#changing-the-base-api-url)  Changing the Base API URL\n\nYou can change the base API URL for any LLM provider by setting the `base_url` parameter:\n\nCode\n\nCopy\n\n```python\nllm = LLM(\n    model=\"custom-model-name\",\n    base_url=\"https://api.your-provider.com/v1\",\n    api_key=\"your-api-key\"\n)\nagent = Agent(llm=llm, ...)\n\n```\n\nThis is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.\n\n## [​](\\#conclusion)  Conclusion\n\nBy leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult the [LiteLLM documentation](https://docs.litellm.ai/docs/) for the most up-to-date information on supported models and configuration options.\n\nWas this page helpful?\n\nYesNo\n\n[Create Your Own Manager Agent](/how-to/custom-manager-agent) [Customize Agents](/how-to/customizing-agents)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/llm-connections",
      "title": "Connect to any LLM - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/llm-connections",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Connect+to+any+LLM&description=Comprehensive+guide+on+integrating+CrewAI+with+various+Large+Language+Models+%28LLMs%29+using+LiteLLM%2C+including+supported+providers+and+configuration+options.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Connect to any LLM - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/llm-connections",
      "statusCode": 200,
      "description": "Comprehensive guide on integrating CrewAI with various Large Language Models (LLMs) using LiteLLM, including supported providers and configuration options.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Connect+to+any+LLM&description=Comprehensive+guide+on+integrating+CrewAI+with+various+Large+Language+Models+%28LLMs%29+using+LiteLLM%2C+including+supported+providers+and+configuration+options.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Connect to any LLM - CrewAI",
      "og:description": "Comprehensive guide on integrating CrewAI with various Large Language Models (LLMs) using LiteLLM, including supported providers and configuration options.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Kickoff Crew Asynchronously\n\nKickoff a Crew Asynchronously\n\n## [​](\\#introduction)  Introduction\n\nCrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.\nThis feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing.\n\n## [​](\\#asynchronous-crew-execution)  Asynchronous Crew Execution\n\nTo kickoff a crew asynchronously, use the `kickoff_async()` method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks.\n\n### [​](\\#method-signature)  Method Signature\n\nCode\n\nCopy\n\n```python\ndef kickoff_async(self, inputs: dict) -> CrewOutput:\n\n```\n\n### [​](\\#parameters)  Parameters\n\n- `inputs` (dict): A dictionary containing the input data required for the tasks.\n\n### [​](\\#returns)  Returns\n\n- `CrewOutput`: An object representing the result of the crew execution.\n\n## [​](\\#potential-use-cases)  Potential Use Cases\n\n- **Parallel Content Generation**: Kickoff multiple independent crews asynchronously, each responsible for generating content on different topics. For example, one crew might research and draft an article on AI trends, while another crew generates social media posts about a new product launch. Each crew operates independently, allowing content production to scale efficiently.\n\n- **Concurrent Market Research Tasks**: Launch multiple crews asynchronously to conduct market research in parallel. One crew might analyze industry trends, while another examines competitor strategies, and yet another evaluates consumer sentiment. Each crew independently completes its task, enabling faster and more comprehensive insights.\n\n- **Independent Travel Planning Modules**: Execute separate crews to independently plan different aspects of a trip. One crew might handle flight options, another handles accommodation, and a third plans activities. Each crew works asynchronously, allowing various components of the trip to be planned simultaneously and independently for faster results.\n\n\n## [​](\\#example-single-asynchronous-crew-execution)  Example: Single Asynchronous Crew Execution\n\nHere’s an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:\n\nCode\n\nCopy\n\n```python\nimport asyncio\nfrom crewai import Crew, Agent, Task\n\n# Create an agent with code execution enabled\ncoding_agent = Agent(\n    role=\"Python Data Analyst\",\n    goal=\"Analyze data and provide insights using Python\",\n    backstory=\"You are an experienced data analyst with strong Python skills.\",\n    allow_code_execution=True\n)\n\n# Create a task that requires code execution\ndata_analysis_task = Task(\n    description=\"Analyze the given dataset and calculate the average age of participants. Ages: {ages}\",\n    agent=coding_agent\n)\n\n# Create a crew and add the task\nanalysis_crew = Crew(\n    agents=[coding_agent],\n    tasks=[data_analysis_task]\n)\n\n# Async function to kickoff the crew asynchronously\nasync def async_crew_execution():\n    result = await analysis_crew.kickoff_async(inputs={\"ages\": [25, 30, 35, 40, 45]})\n    print(\"Crew Result:\", result)\n\n# Run the async function\nasyncio.run(async_crew_execution())\n\n```\n\n## [​](\\#example-multiple-asynchronous-crew-executions)  Example: Multiple Asynchronous Crew Executions\n\nIn this example, we’ll show how to kickoff multiple crews asynchronously and wait for all of them to complete using `asyncio.gather()`:\n\nCode\n\nCopy\n\n```python\nimport asyncio\nfrom crewai import Crew, Agent, Task\n\n# Create an agent with code execution enabled\ncoding_agent = Agent(\n    role=\"Python Data Analyst\",\n    goal=\"Analyze data and provide insights using Python\",\n    backstory=\"You are an experienced data analyst with strong Python skills.\",\n    allow_code_execution=True\n)\n\n# Create tasks that require code execution\ntask_1 = Task(\n    description=\"Analyze the first dataset and calculate the average age of participants. Ages: {ages}\",\n    agent=coding_agent\n)\n\ntask_2 = Task(\n    description=\"Analyze the second dataset and calculate the average age of participants. Ages: {ages}\",\n    agent=coding_agent\n)\n\n# Create two crews and add tasks\ncrew_1 = Crew(agents=[coding_agent], tasks=[task_1])\ncrew_2 = Crew(agents=[coding_agent], tasks=[task_2])\n\n# Async function to kickoff multiple crews asynchronously and wait for all to finish\nasync def async_multiple_crews():\n    result_1 = crew_1.kickoff_async(inputs={\"ages\": [25, 30, 35, 40, 45]})\n    result_2 = crew_2.kickoff_async(inputs={\"ages\": [20, 22, 24, 28, 30]})\n\n    # Wait for both crews to finish\n    results = await asyncio.gather(result_1, result_2)\n\n    for i, result in enumerate(results, 1):\n        print(f\"Crew {i} Result:\", result)\n\n# Run the async function\nasyncio.run(async_multiple_crews())\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Human Input on Execution](/how-to/human-input-on-execution) [Kickoff Crew for Each](/how-to/kickoff-for-each)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/kickoff-async",
      "title": "Kickoff Crew Asynchronously - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/kickoff-async",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Kickoff+Crew+Asynchronously&description=Kickoff+a+Crew+Asynchronously&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Kickoff Crew Asynchronously - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/kickoff-async",
      "statusCode": 200,
      "description": "Kickoff a Crew Asynchronously",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Kickoff+Crew+Asynchronously&description=Kickoff+a+Crew+Asynchronously&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Kickoff Crew Asynchronously - CrewAI",
      "og:description": "Kickoff a Crew Asynchronously",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# File Write\n\nThe `FileWriterTool` is designed to write content to files.\n\n# [​](\\#filewritertool)  `FileWriterTool`\n\n## [​](\\#description)  Description\n\nThe `FileWriterTool` is a component of the crewai\\_tools package, designed to simplify the process of writing content to files.\nIt is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.\nThis tool supports creating new directories if they don’t exist, making it easier to organize your output.\n\n## [​](\\#installation)  Installation\n\nInstall the crewai\\_tools package to use the `FileWriterTool` in your projects:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nTo get started with the `FileWriterTool`:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import FileWriterTool\n\n# Initialize the tool\nfile_writer_tool = FileWriterTool()\n\n# Write content to a file in a specified directory\nresult = file_writer_tool._run('example.txt', 'This is a test content.', 'test_directory')\nprint(result)\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `filename`: The name of the file you want to create or overwrite.\n- `content`: The content to write into the file.\n- `directory` (optional): The path to the directory where the file will be created. Defaults to the current directory ( `.`). If the directory does not exist, it will be created.\n\n## [​](\\#conclusion)  Conclusion\n\nBy integrating the `FileWriterTool` into your crews, the agents can execute the process of writing content to files and creating directories.\nThis tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,\nincorporating this tool into projects is straightforward and efficient.\n\nWas this page helpful?\n\nYesNo\n\n[File Read](/tools/filereadtool) [Firecrawl Crawl Website](/tools/firecrawlcrawlwebsitetool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/filewritetool",
      "title": "File Write - CrewAI",
      "og:url": "https://docs.crewai.com/tools/filewritetool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=File+Write&description=The+%60FileWriterTool%60+is+designed+to+write+content+to+files.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "File Write - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/filewritetool",
      "statusCode": 200,
      "description": "The `FileWriterTool` is designed to write content to files.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=File+Write&description=The+%60FileWriterTool%60+is+designed+to+write+content+to+files.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "File Write - CrewAI",
      "og:description": "The `FileWriterTool` is designed to write content to files.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Force Tool Output as Result\n\nLearn how to force tool output as the result in an Agent’s task in CrewAI.\n\n## [​](\\#introduction)  Introduction\n\nIn CrewAI, you can force the output of a tool as the result of an agent’s task.\nThis feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution.\n\n## [​](\\#forcing-tool-output-as-result)  Forcing Tool Output as Result\n\nTo force the tool output as the result of an agent’s task, you need to set the `result_as_answer` parameter to `True` when adding a tool to the agent.\nThis parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.\n\nHere’s an example of how to force the tool output as the result of an agent’s task:\n\nCode\n\nCopy\n\n```python\nfrom crewai.agent import Agent\nfrom my_tool import MyCustomTool\n\n# Create a coding agent with the custom tool\ncoding_agent = Agent(\n        role=\"Data Scientist\",\n        goal=\"Produce amazing reports on AI\",\n        backstory=\"You work with data and AI\",\n        tools=[MyCustomTool(result_as_answer=True)],\n    )\n\n# Assuming the tool's execution and result population occurs within the system\ntask_result = coding_agent.execute_task(task)\n\n```\n\n## [​](\\#workflow-in-action)  Workflow in Action\n\n1\n\nTask Execution\n\nThe agent executes the task using the tool provided.\n\n2\n\nTool Output\n\nThe tool generates the output, which is captured as the task result.\n\n3\n\nAgent Interaction\n\nThe agent may reflect and take learnings from the tool but the output is not modified.\n\n4\n\nResult Return\n\nThe tool output is returned as the task result without any modifications.\n\nWas this page helpful?\n\nYesNo\n\n[Coding Agents](/how-to/coding-agents) [Human Input on Execution](/how-to/human-input-on-execution)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/force-tool-output-as-result",
      "title": "Force Tool Output as Result - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/force-tool-output-as-result",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Force+Tool+Output+as+Result&description=Learn+how+to+force+tool+output+as+the+result+in+an+Agent%27s+task+in+CrewAI.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Force Tool Output as Result - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/force-tool-output-as-result",
      "statusCode": 200,
      "description": "Learn how to force tool output as the result in an Agent's task in CrewAI.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Force+Tool+Output+as+Result&description=Learn+how+to+force+tool+output+as+the+result+in+an+Agent%27s+task+in+CrewAI.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Force Tool Output as Result - CrewAI",
      "og:description": "Learn how to force tool output as the result in an Agent's task in CrewAI.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# File Read\n\nThe `FileReadTool` is designed to read files from the local file system.\n\n# [​](\\#filereadtool)  `FileReadTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThe FileReadTool conceptually represents a suite of functionalities within the crewai\\_tools package aimed at facilitating file reading and content retrieval.\nThis suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.\nIt supports a variety of text-based file formats such as `.txt`, `.csv`, `.json`, and more. Depending on the file type, the suite offers specialized functionality,\nsuch as converting JSON content into a Python dictionary for ease of use.\n\n## [​](\\#installation)  Installation\n\nTo utilize the functionalities previously attributed to the FileReadTool, install the crewai\\_tools package:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#usage-example)  Usage Example\n\nTo get started with the FileReadTool:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import FileReadTool\n\n# Initialize the tool to read any files the agents knows or lean the path for\nfile_read_tool = FileReadTool()\n\n# OR\n\n# Initialize the tool with a specific file path, so the agent can only read the content of the specified file\nfile_read_tool = FileReadTool(file_path='path/to/your/file.txt')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `file_path`: The path to the file you want to read. It accepts both absolute and relative paths. Ensure the file exists and you have the necessary permissions to access it.\n\nWas this page helpful?\n\nYesNo\n\n[EXA Search Web Loader](/tools/exasearchtool) [File Write](/tools/filewritetool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/filereadtool",
      "title": "File Read - CrewAI",
      "og:url": "https://docs.crewai.com/tools/filereadtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=File+Read&description=The+%60FileReadTool%60+is+designed+to+read+files+from+the+local+file+system.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "File Read - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/filereadtool",
      "statusCode": 200,
      "description": "The `FileReadTool` is designed to read files from the local file system.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=File+Read&description=The+%60FileReadTool%60+is+designed+to+read+files+from+the+local+file+system.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "File Read - CrewAI",
      "og:description": "The `FileReadTool` is designed to read files from the local file system.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Create Your Own Manager Agent\n\nLearn how to set a custom agent as the manager in CrewAI, providing more control over task management and coordination.\n\n# [​](\\#setting-a-specific-agent-as-manager-in-crewai)  Setting a Specific Agent as Manager in CrewAI\n\nCrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.\nThis feature enables the customization of the managerial role to better fit your project’s requirements.\n\n## [​](\\#using-the-manager-agent-attribute)  Using the `manager_agent` Attribute\n\n### [​](\\#custom-manager-agent)  Custom Manager Agent\n\nThe `manager_agent` attribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard.\n\n### [​](\\#example)  Example\n\nCode\n\nCopy\n\n```python\nimport os\nfrom crewai import Agent, Task, Crew, Process\n\n# Define your agents\nresearcher = Agent(\n    role=\"Researcher\",\n    goal=\"Conduct thorough research and analysis on AI and AI agents\",\n    backstory=\"You're an expert researcher, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently researching for a new client.\",\n    allow_delegation=False,\n)\n\nwriter = Agent(\n    role=\"Senior Writer\",\n    goal=\"Create compelling content about AI and AI agents\",\n    backstory=\"You're a senior writer, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently writing content for a new client.\",\n    allow_delegation=False,\n)\n\n# Define your task\ntask = Task(\n    description=\"Generate a list of 5 interesting ideas for an article, then write one captivating paragraph for each idea that showcases the potential of a full article on this topic. Return the list of ideas with their paragraphs and your notes.\",\n    expected_output=\"5 bullet points, each with a paragraph and accompanying notes.\",\n)\n\n# Define the manager agent\nmanager = Agent(\n    role=\"Project Manager\",\n    goal=\"Efficiently manage the crew and ensure high-quality task completion\",\n    backstory=\"You're an experienced project manager, skilled in overseeing complex projects and guiding teams to success. Your role is to coordinate the efforts of the crew members, ensuring that each task is completed on time and to the highest standard.\",\n    allow_delegation=True,\n)\n\n# Instantiate your crew with a custom manager\ncrew = Crew(\n    agents=[researcher, writer],\n    tasks=[task],\n    manager_agent=manager,\n    process=Process.hierarchical,\n)\n\n# Start the crew's work\nresult = crew.kickoff()\n\n```\n\n## [​](\\#benefits-of-a-custom-manager-agent)  Benefits of a Custom Manager Agent\n\n- **Enhanced Control**: Tailor the management approach to fit the specific needs of your project.\n- **Improved Coordination**: Ensure efficient task coordination and management by an experienced agent.\n- **Customizable Management**: Define managerial roles and responsibilities that align with your project’s goals.\n\n## [​](\\#setting-a-manager-llm)  Setting a Manager LLM\n\nIf you’re using the hierarchical process and don’t want to set a custom manager agent, you can specify the language model for the manager:\n\nCode\n\nCopy\n\n```python\nfrom langchain_openai import ChatOpenAI\n\nmanager_llm = ChatOpenAI(model_name=\"gpt-4\")\n\ncrew = Crew(\n    agents=[researcher, writer],\n    tasks=[task],\n    process=Process.hierarchical,\n    manager_llm=manager_llm\n)\n\n```\n\nEither `manager_agent` or `manager_llm` must be set when using the hierarchical process.\n\nWas this page helpful?\n\nYesNo\n\n[Hierarchical Process](/how-to/hierarchical-process) [Connect to any LLM](/how-to/llm-connections)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/custom-manager-agent",
      "title": "Create Your Own Manager Agent - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/custom-manager-agent",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Create+Your+Own+Manager+Agent&description=Learn+how+to+set+a+custom+agent+as+the+manager+in+CrewAI%2C+providing+more+control+over+task+management+and+coordination.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Create Your Own Manager Agent - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/custom-manager-agent",
      "statusCode": 200,
      "description": "Learn how to set a custom agent as the manager in CrewAI, providing more control over task management and coordination.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Create+Your+Own+Manager+Agent&description=Learn+how+to+set+a+custom+agent+as+the+manager+in+CrewAI%2C+providing+more+control+over+task+management+and+coordination.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Create Your Own Manager Agent - CrewAI",
      "og:description": "Learn how to set a custom agent as the manager in CrewAI, providing more control over task management and coordination.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Memory\n\nLeveraging memory systems in the CrewAI framework to enhance agent capabilities.\n\n## [​](\\#introduction-to-memory-systems-in-crewai)  Introduction to Memory Systems in CrewAI\n\nThe crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprises `short-term memory`, `long-term memory`, `entity memory`, and `contextual memory`, each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions.\n\n## [​](\\#memory-system-components)  Memory System Components\n\n| Component | Description |\n| :-- | :-- |\n| **Short-Term Memory** | Temporarily stores recent interactions and outcomes using `RAG`, enabling agents to recall and utilize information relevant to their current context during the current executions. |\n| **Long-Term Memory** | Preserves valuable insights and learnings from past executions, allowing agents to build and refine their knowledge over time. |\n| **Entity Memory** | Captures and organizes information about entities (people, places, concepts) encountered during tasks, facilitating deeper understanding and relationship mapping. Uses `RAG` for storing entity information. |\n| **Contextual Memory** | Maintains the context of interactions by combining `ShortTermMemory`, `LongTermMemory`, and `EntityMemory`, aiding in the coherence and relevance of agent responses over a sequence of tasks or a conversation. |\n| **User Memory** | Stores user-specific information and preferences, enhancing personalization and user experience. |\n\n## [​](\\#how-memory-systems-empower-agents)  How Memory Systems Empower Agents\n\n1. **Contextual Awareness**: With short-term and contextual memory, agents gain the ability to maintain context over a conversation or task sequence, leading to more coherent and relevant responses.\n\n2. **Experience Accumulation**: Long-term memory allows agents to accumulate experiences, learning from past actions to improve future decision-making and problem-solving.\n\n3. **Entity Understanding**: By maintaining entity memory, agents can recognize and remember key entities, enhancing their ability to process and interact with complex information.\n\n\n## [​](\\#implementing-memory-in-your-crew)  Implementing Memory in Your Crew\n\nWhen configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by setting `memory=True` in the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by setting `embedder` to a different model.\nIt’s also possible to initialize the memory instance with your own instance.\n\nThe ‘embedder’ only applies to **Short-Term Memory** which uses Chroma for RAG.\nThe **Long-Term Memory** uses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using the **CREWAI\\_STORAGE\\_DIR** environment variable.\n\n### [​](\\#example-configuring-memory-for-a-crew)  Example: Configuring Memory for a Crew\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\n# Assemble your crew with memory capabilities\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True\n)\n\n```\n\n### [​](\\#example-use-custom-memory-instances-e-g-faiss-as-the-vectordb)  Example: Use Custom Memory Instances e.g FAISS as the VectorDB\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\n# Assemble your crew with memory capabilities\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=\"Process.sequential\",\n    memory=True,\n    long_term_memory=EnhanceLongTermMemory(\n        storage=LTMSQLiteStorage(\n            db_path=\"/my_data_dir/my_crew1/long_term_memory_storage.db\"\n        )\n    ),\n    short_term_memory=EnhanceShortTermMemory(\n        storage=CustomRAGStorage(\n            crew_name=\"my_crew\",\n            storage_type=\"short_term\",\n            data_dir=\"//my_data_dir\",\n            model=embedder[\"model\"],\n            dimension=embedder[\"dimension\"],\n        ),\n    ),\n    entity_memory=EnhanceEntityMemory(\n        storage=CustomRAGStorage(\n            crew_name=\"my_crew\",\n            storage_type=\"entities\",\n            data_dir=\"//my_data_dir\",\n            model=embedder[\"model\"],\n            dimension=embedder[\"dimension\"],\n        ),\n    ),\n    verbose=True,\n)\n\n```\n\n## [​](\\#integrating-mem0-for-enhanced-user-memory)  Integrating Mem0 for Enhanced User Memory\n\n[Mem0](https://mem0.ai/) is a self-improving memory layer for LLM applications, enabling personalized AI experiences.\n\nTo include user-specific memory you can get your API key [here](https://app.mem0.ai/dashboard/api-keys) and refer the [docs](https://docs.mem0.ai/platform/quickstart#4-1-create-memories) for adding user preferences.\n\nCode\n\nCopy\n\n```python\nimport os\nfrom crewai import Crew, Process\nfrom mem0 import MemoryClient\n\n# Set environment variables for Mem0\nos.environ[\"MEM0_API_KEY\"] = \"m0-xx\"\n\n# Step 1: Record preferences based on past conversation or user input\nclient = MemoryClient()\nmessages = [\\\n    {\"role\": \"user\", \"content\": \"Hi there! I'm planning a vacation and could use some advice.\"},\\\n    {\"role\": \"assistant\", \"content\": \"Hello! I'd be happy to help with your vacation planning. What kind of destination do you prefer?\"},\\\n    {\"role\": \"user\", \"content\": \"I am more of a beach person than a mountain person.\"},\\\n    {\"role\": \"assistant\", \"content\": \"That's interesting. Do you like hotels or Airbnb?\"},\\\n    {\"role\": \"user\", \"content\": \"I like Airbnb more.\"},\\\n]\nclient.add(messages, user_id=\"john\")\n\n# Step 2: Create a Crew with User Memory\n\ncrew = Crew(\n    agents=[...],\n    tasks=[...],\n    verbose=True,\n    process=Process.sequential,\n    memory=True,\n    memory_config={\n        \"provider\": \"mem0\",\n        \"config\": {\"user_id\": \"john\"},\n    },\n)\n\n```\n\n## [​](\\#additional-embedding-providers)  Additional Embedding Providers\n\n### [​](\\#using-openai-embeddings-already-default)  Using OpenAI embeddings (already default)\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"openai\",\n        \"config\": {\n            \"model\": 'text-embedding-3-small'\n        }\n    }\n)\n\n```\n\nAlternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.\n\nExample:\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\nfrom chromadb.utils.embedding_functions import OpenAIEmbeddingFunction\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder=OpenAIEmbeddingFunction(api_key=os.getenv(\"OPENAI_API_KEY\"), model_name=\"text-embedding-3-small\"),\n)\n\n```\n\n### [​](\\#using-ollama-embeddings)  Using Ollama embeddings\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"ollama\",\n        \"config\": {\n            \"model\": \"mxbai-embed-large\"\n        }\n    }\n)\n\n```\n\n### [​](\\#using-google-ai-embeddings)  Using Google AI embeddings\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"google\",\n        \"config\": {\n            \"api_key\": \"<YOUR_API_KEY>\",\n            \"model_name\": \"<model_name>\"\n        }\n    }\n)\n\n```\n\n### [​](\\#using-azure-openai-embeddings)  Using Azure OpenAI embeddings\n\nCode\n\nCopy\n\n```python\nfrom chromadb.utils.embedding_functions import OpenAIEmbeddingFunction\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder=OpenAIEmbeddingFunction(\n        api_key=\"YOUR_API_KEY\",\n        api_base=\"YOUR_API_BASE_PATH\",\n        api_type=\"azure\",\n        api_version=\"YOUR_API_VERSION\",\n        model_name=\"text-embedding-3-small\"\n    )\n)\n\n```\n\n### [​](\\#using-vertex-ai-embeddings)  Using Vertex AI embeddings\n\nCode\n\nCopy\n\n```python\nfrom chromadb.utils.embedding_functions import GoogleVertexEmbeddingFunction\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder=GoogleVertexEmbeddingFunction(\n        project_id=\"YOUR_PROJECT_ID\",\n        region=\"YOUR_REGION\",\n        api_key=\"YOUR_API_KEY\",\n        model_name=\"textembedding-gecko\"\n    )\n)\n\n```\n\n### [​](\\#using-cohere-embeddings)  Using Cohere embeddings\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"cohere\",\n        \"config\": {\n            \"api_key\": \"YOUR_API_KEY\",\n            \"model_name\": \"<model_name>\"\n        }\n    }\n)\n\n```\n\n### [​](\\#using-huggingface-embeddings)  Using HuggingFace embeddings\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"huggingface\",\n        \"config\": {\n            \"api_url\": \"<api_url>\",\n        }\n    }\n)\n\n```\n\n### [​](\\#using-watson-embeddings)  Using Watson embeddings\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Agent, Task, Process\n\n# Note: Ensure you have installed and imported `ibm_watsonx_ai` for Watson embeddings to work.\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"watson\",\n        \"config\": {\n            \"model\": \"<model_name>\",\n            \"api_url\": \"<api_url>\",\n            \"api_key\": \"<YOUR_API_KEY>\",\n            \"project_id\": \"<YOUR_PROJECT_ID>\",\n        }\n    }\n)\n\n```\n\n### [​](\\#resetting-memory)  Resetting Memory\n\nCopy\n\n```shell\ncrewai reset-memories [OPTIONS]\n\n```\n\n#### [​](\\#resetting-memory-options)  Resetting Memory Options\n\n| Option | Description | Type | Default |\n| :-- | :-- | :-- | :-- |\n| `-l`, `--long` | Reset LONG TERM memory. | Flag (boolean) | False |\n| `-s`, `--short` | Reset SHORT TERM memory. | Flag (boolean) | False |\n| `-e`, `--entities` | Reset ENTITIES memory. | Flag (boolean) | False |\n| `-k`, `--kickoff-outputs` | Reset LATEST KICKOFF TASK OUTPUTS. | Flag (boolean) | False |\n| `-a`, `--all` | Reset ALL memories. | Flag (boolean) | False |\n\n## [​](\\#benefits-of-using-crewais-memory-system)  Benefits of Using CrewAI’s Memory System\n\n- 🦾 **Adaptive Learning:** Crews become more efficient over time, adapting to new information and refining their approach to tasks.\n- 🫡 **Enhanced Personalization:** Memory enables agents to remember user preferences and historical interactions, leading to personalized experiences.\n- 🧠 **Improved Problem Solving:** Access to a rich memory store aids agents in making more informed decisions, drawing on past learnings and contextual insights.\n\n## [​](\\#conclusion)  Conclusion\n\nIntegrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability.\n\nWas this page helpful?\n\nYesNo\n\n[Training](/concepts/training) [Planning](/concepts/planning)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/memory",
      "title": "Memory - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/memory",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Memory&description=Leveraging+memory+systems+in+the+CrewAI+framework+to+enhance+agent+capabilities.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Memory - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/memory",
      "statusCode": 200,
      "description": "Leveraging memory systems in the CrewAI framework to enhance agent capabilities.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Memory&description=Leveraging+memory+systems+in+the+CrewAI+framework+to+enhance+agent+capabilities.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Memory - CrewAI",
      "og:description": "Leveraging memory systems in the CrewAI framework to enhance agent capabilities.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Crews\n\nUnderstanding and utilizing crews in the crewAI framework with comprehensive attributes and functionalities.\n\n## [​](\\#what-is-a-crew)  What is a Crew?\n\nA crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow.\n\n## [​](\\#crew-attributes)  Crew Attributes\n\n| Attribute | Parameters | Description |\n| :-- | :-- | :-- |\n| **Tasks** | `tasks` | A list of tasks assigned to the crew. |\n| **Agents** | `agents` | A list of agents that are part of the crew. |\n| **Process** _(optional)_ | `process` | The process flow (e.g., sequential, hierarchical) the crew follows. Default is `sequential`. |\n| **Verbose** _(optional)_ | `verbose` | The verbosity level for logging during execution. Defaults to `False`. |\n| **Manager LLM** _(optional)_ | `manager_llm` | The language model used by the manager agent in a hierarchical process. **Required when using a hierarchical process.** |\n| **Function Calling LLM** _(optional)_ | `function_calling_llm` | If passed, the crew will use this LLM to do function calling for tools for all agents in the crew. Each agent can have its own LLM, which overrides the crew’s LLM for function calling. |\n| **Config** _(optional)_ | `config` | Optional configuration settings for the crew, in `Json` or `Dict[str, Any]` format. |\n| **Max RPM** _(optional)_ | `max_rpm` | Maximum requests per minute the crew adheres to during execution. Defaults to `None`. |\n| **Language** _(optional)_ | `language` | Language used for the crew, defaults to English. |\n| **Language File** _(optional)_ | `language_file` | Path to the language file to be used for the crew. |\n| **Memory** _(optional)_ | `memory` | Utilized for storing execution memories (short-term, long-term, entity memory). |\n| **Memory Config** _(optional)_ | `memory_config` | Configuration for the memory provider to be used by the crew. |\n| **Cache** _(optional)_ | `cache` | Specifies whether to use a cache for storing the results of tools’ execution. Defaults to `True`. |\n| **Embedder** _(optional)_ | `embedder` | Configuration for the embedder to be used by the crew. Mostly used by memory for now. Default is `{\"provider\": \"openai\"}`. |\n| **Full Output** _(optional)_ | `full_output` | Whether the crew should return the full output with all tasks outputs or just the final output. Defaults to `False`. |\n| **Step Callback** _(optional)_ | `step_callback` | A function that is called after each step of every agent. This can be used to log the agent’s actions or to perform other operations; it won’t override the agent-specific `step_callback`. |\n| **Task Callback** _(optional)_ | `task_callback` | A function that is called after the completion of each task. Useful for monitoring or additional operations post-task execution. |\n| **Share Crew** _(optional)_ | `share_crew` | Whether you want to share the complete crew information and execution with the crewAI team to make the library better, and allow us to train models. |\n| **Output Log File** _(optional)_ | `output_log_file` | Whether you want to have a file with the complete crew output and execution. You can set it using True and it will default to the folder you are currently in and it will be called logs.txt or passing a string with the full path and name of the file. |\n| **Manager Agent** _(optional)_ | `manager_agent` | `manager` sets a custom agent that will be used as a manager. |\n| **Manager Callbacks** _(optional)_ | `manager_callbacks` | `manager_callbacks` takes a list of callback handlers to be executed by the manager agent when a hierarchical process is used. |\n| **Prompt File** _(optional)_ | `prompt_file` | Path to the prompt JSON file to be used for the crew. |\n| **Planning** _(optional)_ | `planning` | Adds planning ability to the Crew. When activated before each Crew iteration, all Crew data is sent to an AgentPlanner that will plan the tasks and this plan will be added to each task description. |\n| **Planning LLM** _(optional)_ | `planning_llm` | The language model used by the AgentPlanner in a planning process. |\n\n**Crew Max RPM**: The `max_rpm` attribute sets the maximum number of requests per minute the crew can perform to avoid rate limits and will override individual agents’ `max_rpm` settings if you set it.\n\n## [​](\\#crew-output)  Crew Output\n\nThe output of a crew in the CrewAI framework is encapsulated within the `CrewOutput` class.\nThis class provides a structured way to access results of the crew’s execution, including various formats such as raw strings, JSON, and Pydantic models.\nThe `CrewOutput` includes the results from the final task output, token usage, and individual task outputs.\n\n### [​](\\#crew-output-attributes)  Crew Output Attributes\n\n| Attribute | Parameters | Type | Description |\n| :-- | :-- | :-- | :-- |\n| **Raw** | `raw` | `str` | The raw output of the crew. This is the default format for the output. |\n| **Pydantic** | `pydantic` | `Optional[BaseModel]` | A Pydantic model object representing the structured output of the crew. |\n| **JSON Dict** | `json_dict` | `Optional[Dict[str, Any]]` | A dictionary representing the JSON output of the crew. |\n| **Tasks Output** | `tasks_output` | `List[TaskOutput]` | A list of `TaskOutput` objects, each representing the output of a task in the crew. |\n| **Token Usage** | `token_usage` | `Dict[str, Any]` | A summary of token usage, providing insights into the language model’s performance during execution. |\n\n### [​](\\#crew-output-methods-and-properties)  Crew Output Methods and Properties\n\n| Method/Property | Description |\n| :-- | :-- |\n| **json** | Returns the JSON string representation of the crew output if the output format is JSON. |\n| **to\\_dict** | Converts the JSON and Pydantic outputs to a dictionary. |\n| \\* **\\*str\\*\\*** | Returns the string representation of the crew output, prioritizing Pydantic, then JSON, then raw. |\n\n### [​](\\#accessing-crew-outputs)  Accessing Crew Outputs\n\nOnce a crew has been executed, its output can be accessed through the `output` attribute of the `Crew` object. The `CrewOutput` class provides various ways to interact with and present this output.\n\n#### [​](\\#example)  Example\n\nCode\n\n```python\n# Example crew execution\ncrew = Crew(\n    agents=[research_agent, writer_agent],\n    tasks=[research_task, write_article_task],\n    verbose=True\n)\n\ncrew_output = crew.kickoff()\n\n# Accessing the crew output\nprint(f\"Raw Output: {crew_output.raw}\")\nif crew_output.json_dict:\n    print(f\"JSON Output: {json.dumps(crew_output.json_dict, indent=2)}\")\nif crew_output.pydantic:\n    print(f\"Pydantic Output: {crew_output.pydantic}\")\nprint(f\"Tasks Output: {crew_output.tasks_output}\")\nprint(f\"Token Usage: {crew_output.token_usage}\")\n\n```\n\n## [​](\\#memory-utilization)  Memory Utilization\n\nCrews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies.\n\n## [​](\\#cache-utilization)  Cache Utilization\n\nCaches can be employed to store the results of tools’ execution, making the process more efficient by reducing the need to re-execute identical tasks.\n\n## [​](\\#crew-usage-metrics)  Crew Usage Metrics\n\nAfter the crew execution, you can access the `usage_metrics` attribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement.\n\nCode\n\n```python\n# Access the crew's usage metrics\ncrew = Crew(agents=[agent1, agent2], tasks=[task1, task2])\ncrew.kickoff()\nprint(crew.usage_metrics)\n\n```\n\n## [​](\\#crew-execution-process)  Crew Execution Process\n\n- **Sequential Process**: Tasks are executed one after another, allowing for a linear flow of work.\n- **Hierarchical Process**: A manager agent coordinates the crew, delegating tasks and validating outcomes before proceeding. **Note**: A `manager_llm` or `manager_agent` is required for this process and it’s essential for validating the process flow.\n\n### [​](\\#kicking-off-a-crew)  Kicking Off a Crew\n\nOnce your crew is assembled, initiate the workflow with the `kickoff()` method. This starts the execution process according to the defined process flow.\n\nCode\n\n```python\n# Start the crew's task execution\nresult = my_crew.kickoff()\nprint(result)\n\n```\n\n### [​](\\#different-ways-to-kick-off-a-crew)  Different Ways to Kick Off a Crew\n\nOnce your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process: `kickoff()`, `kickoff_for_each()`, `kickoff_async()`, and `kickoff_for_each_async()`.\n\n- `kickoff()`: Starts the execution process according to the defined process flow.\n- `kickoff_for_each()`: Executes tasks for each agent individually.\n- `kickoff_async()`: Initiates the workflow asynchronously.\n- `kickoff_for_each_async()`: Executes tasks for each agent individually in an asynchronous manner.\n\nCode\n\n```python\n# Start the crew's task execution\nresult = my_crew.kickoff()\nprint(result)\n\n# Example of using kickoff_for_each\ninputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]\nresults = my_crew.kickoff_for_each(inputs=inputs_array)\nfor result in results:\n    print(result)\n\n# Example of using kickoff_async\ninputs = {'topic': 'AI in healthcare'}\nasync_result = my_crew.kickoff_async(inputs=inputs)\nprint(async_result)\n\n# Example of using kickoff_for_each_async\ninputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]\nasync_results = my_crew.kickoff_for_each_async(inputs=inputs_array)\nfor async_result in async_results:\n    print(async_result)\n\n```\n\nThese methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs.\n\n### [​](\\#replaying-from-a-specific-task)  Replaying from a Specific Task\n\nYou can now replay from a specific task using our CLI command `replay`.\n\nThe replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the command `crewai replay -t <task_id>`, you can specify the `task_id` for the replay process.\n\nKickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from.\n\n### [​](\\#replaying-from-a-specific-task-using-the-cli)  Replaying from a Specific Task Using the CLI\n\nTo use the replay feature, follow these steps:\n\n1. Open your terminal or command prompt.\n2. Navigate to the directory where your CrewAI project is located.\n3. Run the following command:\n\nTo view the latest kickoff task IDs, use:\n\n```shell\ncrewai log-tasks-outputs\n\n```\n\nThen, to replay from a specific task, use:\n\n```shell\ncrewai replay -t <task_id>\n\n```\n\nThese commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks.\n\nWas this page helpful?\n\nYesNo\n\n[Tasks](/concepts/tasks) [Flows](/concepts/flows)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/crews",
      "title": "Crews - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/crews",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Crews&description=Understanding+and+utilizing+crews+in+the+crewAI+framework+with+comprehensive+attributes+and+functionalities.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Crews - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/crews",
      "statusCode": 200,
      "description": "Understanding and utilizing crews in the crewAI framework with comprehensive attributes and functionalities.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Crews&description=Understanding+and+utilizing+crews+in+the+crewAI+framework+with+comprehensive+attributes+and+functionalities.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Crews - CrewAI",
      "og:description": "Understanding and utilizing crews in the crewAI framework with comprehensive attributes and functionalities.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Flows\n\nLearn how to create and manage AI workflows using CrewAI Flows.\n\n## [​](https://docs.crewai.com/concepts/flows\\#introduction)  Introduction\n\nCrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.\n\nFlows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI’s capabilities.\n\n1. **Simplified Workflow Creation**: Easily chain together multiple Crews and tasks to create complex AI workflows.\n\n2. **State Management**: Flows make it super easy to manage and share state between different tasks in your workflow.\n\n3. **Event-Driven Architecture**: Built on an event-driven model, allowing for dynamic and responsive workflows.\n\n4. **Flexible Control Flow**: Implement conditional logic, loops, and branching within your workflows.\n\n5. **Input Flexibility**: Flows can accept inputs to initialize or update their state, with different handling for structured and unstructured state management.\n\n\n## [​](https://docs.crewai.com/concepts/flows\\#getting-started)  Getting Started\n\nLet’s create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task.\n\n### [​](https://docs.crewai.com/concepts/flows\\#passing-inputs-to-flows)  Passing Inputs to Flows\n\nFlows can accept inputs to initialize or update their state before execution. The way inputs are handled depends on whether the flow uses structured or unstructured state management.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#structured-state-management)  Structured State Management\n\nIn structured state management, the flow’s state is defined using a Pydantic `BaseModel`. Inputs must match the model’s schema, and any updates will overwrite the default values.\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, listen, start\nfrom pydantic import BaseModel\n\nclass ExampleState(BaseModel):\n    counter: int = 0\n    message: str = \"\"\n\nclass StructuredExampleFlow(Flow[ExampleState]):\n    @start()\n    def first_method(self):\n        # Implementation\n\nflow = StructuredExampleFlow()\nflow.kickoff(inputs={\"counter\": 10})\n\n```\n\nIn this example, the `counter` is initialized to `10`, while `message` retains its default value.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#unstructured-state-management)  Unstructured State Management\n\nIn unstructured state management, the flow’s state is a dictionary. You can pass any dictionary to update the state.\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, listen, start\n\nclass UnstructuredExampleFlow(Flow):\n    @start()\n    def first_method(self):\n        # Implementation\n\nflow = UnstructuredExampleFlow()\nflow.kickoff(inputs={\"counter\": 5, \"message\": \"Initial message\"})\n\n```\n\nHere, both `counter` and `message` are updated based on the provided inputs.\n\n**Note:** Ensure that inputs for structured state management adhere to the defined schema to avoid validation errors.\n\n### [​](https://docs.crewai.com/concepts/flows\\#example-flow)  Example Flow\n\nCopy\n\n```python\n# Existing example code\n\n```\n\nIn the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks: `generate_city` and `generate_fun_fact`. The `generate_city` task is the starting point of the Flow, and the `generate_fun_fact` task listens for the output of the `generate_city` task.\n\nWhen you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.\n\n**Note:** Ensure you have set up your `.env` file to store your `OPENAI_API_KEY`. This key is necessary for authenticating requests to the OpenAI API.\n\n### [​](https://docs.crewai.com/concepts/flows\\#start)  @start()\n\nThe `@start()` decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with `@start()` are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started.\n\n### [​](https://docs.crewai.com/concepts/flows\\#listen)  @listen()\n\nThe `@listen()` decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with `@listen()` will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#usage)  Usage\n\nThe `@listen()` decorator can be used in several ways:\n\n1. **Listening to a Method by Name**: You can pass the name of the method you want to listen to as a string. When that method completes, the listener method will be triggered.\n\n\n\n\n\nCopy\n\n\n\n\n\n\n\n\n\n```python\n@listen(\"generate_city\")\ndef generate_fun_fact(self, random_city):\n       # Implementation\n\n```\n\n2. **Listening to a Method Directly**: You can pass the method itself. When that method completes, the listener method will be triggered.\n\n\n\n\n\nCopy\n\n\n\n\n\n\n\n\n\n```python\n@listen(generate_city)\ndef generate_fun_fact(self, random_city):\n       # Implementation\n\n```\n\n\n### [​](https://docs.crewai.com/concepts/flows\\#flow-output)  Flow Output\n\nAccessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#retrieving-the-final-output)  Retrieving the Final Output\n\nWhen you run a Flow, the final output is determined by the last method that completes. The `kickoff()` method returns the output of this final method.\n\nHere’s how you can access the final output:\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, listen, start\n\nclass OutputExampleFlow(Flow):\n    @start()\n    def first_method(self):\n        return \"Output from first_method\"\n\n    @listen(first_method)\n    def second_method(self, first_output):\n        return f\"Second method received: {first_output}\"\n\nflow = OutputExampleFlow()\nfinal_output = flow.kickoff()\n\nprint(\"---- Final Output ----\")\nprint(final_output)\n\n```\n\nIn this example, the `second_method` is the last method to complete, so its output will be the final output of the Flow.\nThe `kickoff()` method will return the final output, which is then printed to the console.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#accessing-and-updating-state)  Accessing and Updating State\n\nIn addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.\n\nHere’s an example of how to update and access the state:\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, listen, start\nfrom pydantic import BaseModel\n\nclass ExampleState(BaseModel):\n    counter: int = 0\n    message: str = \"\"\n\nclass StateExampleFlow(Flow[ExampleState]):\n\n    @start()\n    def first_method(self):\n        self.state.message = \"Hello from first_method\"\n        self.state.counter += 1\n\n    @listen(first_method)\n    def second_method(self):\n        self.state.message += \" - updated by second_method\"\n        self.state.counter += 1\n        return self.state.message\n\nflow = StateExampleFlow()\nfinal_output = flow.kickoff()\nprint(f\"Final Output: {final_output}\")\nprint(\"Final State:\")\nprint(flow.state)\n\n```\n\nIn this example, the state is updated by both `first_method` and `second_method`.\nAfter the Flow has run, you can access the final state to see the updates made by these methods.\n\nBy ensuring that the final method’s output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,\nwhile also maintaining and accessing the state throughout the Flow’s execution.\n\n## [​](https://docs.crewai.com/concepts/flows\\#flow-state-management)  Flow State Management\n\nManaging state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,\nallowing developers to choose the approach that best fits their application’s needs.\n\n### [​](https://docs.crewai.com/concepts/flows\\#unstructured-state-management-2)  Unstructured State Management\n\nIn unstructured state management, all state is stored in the `state` attribute of the `Flow` class.\nThis approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, listen, start\n\nclass UnstructuredExampleFlow(Flow):\n\n    @start()\n    def first_method(self):\n        self.state.message = \"Hello from structured flow\"\n        self.state.counter = 0\n\n    @listen(first_method)\n    def second_method(self):\n        self.state.counter += 1\n        self.state.message += \" - updated\"\n\n    @listen(second_method)\n    def third_method(self):\n        self.state.counter += 1\n        self.state.message += \" - updated again\"\n\n        print(f\"State after third_method: {self.state}\")\n\nflow = UnstructuredExampleFlow()\nflow.kickoff()\n\n```\n\n**Key Points:**\n\n- **Flexibility:** You can dynamically add attributes to `self.state` without predefined constraints.\n- **Simplicity:** Ideal for straightforward workflows where state structure is minimal or varies significantly.\n\n### [​](https://docs.crewai.com/concepts/flows\\#structured-state-management-2)  Structured State Management\n\nStructured state management leverages predefined schemas to ensure consistency and type safety across the workflow.\nBy using models like Pydantic’s `BaseModel`, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, listen, start\nfrom pydantic import BaseModel\n\nclass ExampleState(BaseModel):\n    counter: int = 0\n    message: str = \"\"\n\nclass StructuredExampleFlow(Flow[ExampleState]):\n\n    @start()\n    def first_method(self):\n        self.state.message = \"Hello from structured flow\"\n\n    @listen(first_method)\n    def second_method(self):\n        self.state.counter += 1\n        self.state.message += \" - updated\"\n\n    @listen(second_method)\n    def third_method(self):\n        self.state.counter += 1\n        self.state.message += \" - updated again\"\n\n        print(f\"State after third_method: {self.state}\")\n\nflow = StructuredExampleFlow()\nflow.kickoff()\n\n```\n\n**Key Points:**\n\n- **Defined Schema:** `ExampleState` clearly outlines the state structure, enhancing code readability and maintainability.\n- **Type Safety:** Leveraging Pydantic ensures that state attributes adhere to the specified types, reducing runtime errors.\n- **Auto-Completion:** IDEs can provide better auto-completion and error checking based on the defined state model.\n\n### [​](https://docs.crewai.com/concepts/flows\\#choosing-between-unstructured-and-structured-state-management)  Choosing Between Unstructured and Structured State Management\n\n- **Use Unstructured State Management when:**\n  - The workflow’s state is simple or highly dynamic.\n  - Flexibility is prioritized over strict state definitions.\n  - Rapid prototyping is required without the overhead of defining schemas.\n- **Use Structured State Management when:**\n  - The workflow requires a well-defined and consistent state structure.\n  - Type safety and validation are important for your application’s reliability.\n  - You want to leverage IDE features like auto-completion and type checking for better developer experience.\n\nBy providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements.\n\n## [​](https://docs.crewai.com/concepts/flows\\#flow-control)  Flow Control\n\n### [​](https://docs.crewai.com/concepts/flows\\#conditional-logic-or)  Conditional Logic: `or`\n\nThe `or_` function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, listen, or_, start\n\nclass OrExampleFlow(Flow):\n\n    @start()\n    def start_method(self):\n        return \"Hello from the start method\"\n\n    @listen(start_method)\n    def second_method(self):\n        return \"Hello from the second method\"\n\n    @listen(or_(start_method, second_method))\n    def logger(self, result):\n        print(f\"Logger: {result}\")\n\nflow = OrExampleFlow()\nflow.kickoff()\n\n```\n\nWhen you run this Flow, the `logger` method will be triggered by the output of either the `start_method` or the `second_method`.\nThe `or_` function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.\n\n### [​](https://docs.crewai.com/concepts/flows\\#conditional-logic-and)  Conditional Logic: `and`\n\nThe `and_` function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.\n\nCopy\n\n```python\nfrom crewai.flow.flow import Flow, and_, listen, start\n\nclass AndExampleFlow(Flow):\n\n    @start()\n    def start_method(self):\n        self.state[\"greeting\"] = \"Hello from the start method\"\n\n    @listen(start_method)\n    def second_method(self):\n        self.state[\"joke\"] = \"What do computers eat? Microchips.\"\n\n    @listen(and_(start_method, second_method))\n    def logger(self):\n        print(\"---- Logger ----\")\n        print(self.state)\n\nflow = AndExampleFlow()\nflow.kickoff()\n\n```\n\nWhen you run this Flow, the `logger` method will be triggered only when both the `start_method` and the `second_method` emit an output.\nThe `and_` function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.\n\n### [​](https://docs.crewai.com/concepts/flows\\#router)  Router\n\nThe `@router()` decorator in Flows allows you to define conditional routing logic based on the output of a method.\nYou can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.\n\nCopy\n\n```python\nimport random\nfrom crewai.flow.flow import Flow, listen, router, start\nfrom pydantic import BaseModel\n\nclass ExampleState(BaseModel):\n    success_flag: bool = False\n\nclass RouterFlow(Flow[ExampleState]):\n\n    @start()\n    def start_method(self):\n        print(\"Starting the structured flow\")\n        random_boolean = random.choice([True, False])\n        self.state.success_flag = random_boolean\n\n    @router(start_method)\n    def second_method(self):\n        if self.state.success_flag:\n            return \"success\"\n        else:\n            return \"failed\"\n\n    @listen(\"success\")\n    def third_method(self):\n        print(\"Third method running\")\n\n    @listen(\"failed\")\n    def fourth_method(self):\n        print(\"Fourth method running\")\n\nflow = RouterFlow()\nflow.kickoff()\n\n```\n\nIn the above example, the `start_method` generates a random boolean value and sets it in the state.\nThe `second_method` uses the `@router()` decorator to define conditional routing logic based on the value of the boolean.\nIf the boolean is `True`, the method returns `\"success\"`, and if it is `False`, the method returns `\"failed\"`.\nThe `third_method` and `fourth_method` listen to the output of the `second_method` and execute based on the returned value.\n\nWhen you run this Flow, the output will change based on the random boolean value generated by the `start_method`.\n\n## [​](https://docs.crewai.com/concepts/flows\\#adding-crews-to-flows)  Adding Crews to Flows\n\nCreating a flow with multiple crews in CrewAI is straightforward.\n\nYou can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:\n\nCopy\n\n```bash\ncrewai create flow name_of_flow\n\n```\n\nThis command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew called `poem_crew` that is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews.\n\n### [​](https://docs.crewai.com/concepts/flows\\#folder-structure)  Folder Structure\n\nAfter running the `crewai create flow name_of_flow` command, you will see a folder structure similar to the following:\n\n| Directory/File | Description |\n| :-- | :-- |\n| `name_of_flow/` | Root directory for the flow. |\n| ├── `crews/` | Contains directories for specific crews. |\n| │ └── `poem_crew/` | Directory for the “poem\\_crew” with its configurations and scripts. |\n| │ ├── `config/` | Configuration files directory for the “poem\\_crew”. |\n| │ │ ├── `agents.yaml` | YAML file defining the agents for “poem\\_crew”. |\n| │ │ └── `tasks.yaml` | YAML file defining the tasks for “poem\\_crew”. |\n| │ ├── `poem_crew.py` | Script for “poem\\_crew” functionality. |\n| ├── `tools/` | Directory for additional tools used in the flow. |\n| │ └── `custom_tool.py` | Custom tool implementation. |\n| ├── `main.py` | Main script for running the flow. |\n| ├── `README.md` | Project description and instructions. |\n| ├── `pyproject.toml` | Configuration file for project dependencies and settings. |\n| └── `.gitignore` | Specifies files and directories to ignore in version control. |\n\n### [​](https://docs.crewai.com/concepts/flows\\#building-your-crews)  Building Your Crews\n\nIn the `crews` folder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, the `poem_crew` folder contains:\n\n- `config/agents.yaml`: Defines the agents for the crew.\n- `config/tasks.yaml`: Defines the tasks for the crew.\n- `poem_crew.py`: Contains the crew definition, including agents, tasks, and the crew itself.\n\nYou can copy, paste, and edit the `poem_crew` to create other crews.\n\n### [​](https://docs.crewai.com/concepts/flows\\#connecting-crews-in-main-py)  Connecting Crews in `main.py`\n\nThe `main.py` file is where you create your flow and connect the crews together. You can define your flow by using the `Flow` class and the decorators `@start` and `@listen` to specify the flow of execution.\n\nHere’s an example of how you can connect the `poem_crew` in the `main.py` file:\n\nCopy\n\n```python\n#!/usr/bin/env python\nfrom random import randint\n\nfrom pydantic import BaseModel\nfrom crewai.flow.flow import Flow, listen, start\nfrom .crews.poem_crew.poem_crew import PoemCrew\n\nclass PoemState(BaseModel):\n    sentence_count: int = 1\n    poem: str = \"\"\n\nclass PoemFlow(Flow[PoemState]):\n\n    @start()\n    def generate_sentence_count(self):\n        print(\"Generating sentence count\")\n        self.state.sentence_count = randint(1, 5)\n\n    @listen(generate_sentence_count)\n    def generate_poem(self):\n        print(\"Generating poem\")\n        result = PoemCrew().crew().kickoff(inputs={\"sentence_count\": self.state.sentence_count})\n\n        print(\"Poem generated\", result.raw)\n        self.state.poem = result.raw\n\n    @listen(generate_poem)\n    def save_poem(self):\n        print(\"Saving poem\")\n        with open(\"poem.txt\", \"w\") as f:\n            f.write(self.state.poem)\n\ndef kickoff():\n    poem_flow = PoemFlow()\n    poem_flow.kickoff()\n\ndef plot():\n    poem_flow = PoemFlow()\n    poem_flow.plot()\n\nif __name__ == \"__main__\":\n    kickoff()\n\n```\n\nIn this example, the `PoemFlow` class defines a flow that generates a sentence count, uses the `PoemCrew` to generate a poem, and then saves the poem to a file. The flow is kicked off by calling the `kickoff()` method.\n\n### [​](https://docs.crewai.com/concepts/flows\\#running-the-flow)  Running the Flow\n\n(Optional) Before running the flow, you can install the dependencies by running:\n\nCopy\n\n```bash\ncrewai install\n\n```\n\nOnce all of the dependencies are installed, you need to activate the virtual environment by running:\n\nCopy\n\n```bash\nsource .venv/bin/activate\n\n```\n\nAfter activating the virtual environment, you can run the flow by executing one of the following commands:\n\nCopy\n\n```bash\ncrewai flow kickoff\n\n```\n\nor\n\nCopy\n\n```bash\nuv run kickoff\n\n```\n\nThe flow will execute, and you should see the output in the console.\n\n### [​](https://docs.crewai.com/concepts/flows\\#adding-additional-crews-using-the-cli)  Adding Additional Crews Using the CLI\n\nOnce you have created your initial flow, you can easily add additional crews to your project using the CLI. This allows you to expand your flow’s capabilities by integrating new crews without starting from scratch.\n\nTo add a new crew to your existing flow, use the following command:\n\nCopy\n\n```bash\ncrewai flow add-crew <crew_name>\n\n```\n\nThis command will create a new directory for your crew within the `crews` folder of your flow project. It will include the necessary configuration files and a crew definition file, similar to the initial setup.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#folder-structure-2)  Folder Structure\n\nAfter adding a new crew, your folder structure will look like this:\n\n| Directory/File | Description |\n| :-- | :-- |\n| `name_of_flow/` | Root directory for the flow. |\n| ├── `crews/` | Contains directories for specific crews. |\n| │ ├── `poem_crew/` | Directory for the “poem\\_crew” with its configurations and scripts. |\n| │ │ ├── `config/` | Configuration files directory for the “poem\\_crew”. |\n| │ │ │ ├── `agents.yaml` | YAML file defining the agents for “poem\\_crew”. |\n| │ │ │ └── `tasks.yaml` | YAML file defining the tasks for “poem\\_crew”. |\n| │ │ └── `poem_crew.py` | Script for “poem\\_crew” functionality. |\n| └── `name_of_crew/` | Directory for the new crew. |\n| ├── `config/` | Configuration files directory for the new crew. |\n| │ ├── `agents.yaml` | YAML file defining the agents for the new crew. |\n| │ └── `tasks.yaml` | YAML file defining the tasks for the new crew. |\n| └── `name_of_crew.py` | Script for the new crew functionality. |\n\nYou can then customize the `agents.yaml` and `tasks.yaml` files to define the agents and tasks for your new crew. The `name_of_crew.py` file will contain the crew’s logic, which you can modify to suit your needs.\n\nBy using the CLI to add additional crews, you can efficiently build complex AI workflows that leverage multiple crews working together.\n\n## [​](https://docs.crewai.com/concepts/flows\\#plot-flows)  Plot Flows\n\nVisualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows.\n\n### [​](https://docs.crewai.com/concepts/flows\\#what-are-plots)  What are Plots?\n\nPlots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations.\n\n### [​](https://docs.crewai.com/concepts/flows\\#how-to-generate-a-plot)  How to Generate a Plot\n\nCrewAI provides two convenient methods to generate plots of your flows:\n\n#### [​](https://docs.crewai.com/concepts/flows\\#option-1-using-the-plot-method)  Option 1: Using the `plot()` Method\n\nIf you are working directly with a flow instance, you can generate a plot by calling the `plot()` method on your flow object. This method will create an HTML file containing the interactive plot of your flow.\n\nCopy\n\n```python\n# Assuming you have a flow instance\nflow.plot(\"my_flow_plot\")\n\n```\n\nThis will generate a file named `my_flow_plot.html` in your current directory. You can open this file in a web browser to view the interactive plot.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#option-2-using-the-command-line)  Option 2: Using the Command Line\n\nIf you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.\n\nCopy\n\n```bash\ncrewai flow plot\n\n```\n\nThis command will generate an HTML file with the plot of your flow, similar to the `plot()` method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow.\n\n### [​](https://docs.crewai.com/concepts/flows\\#understanding-the-plot)  Understanding the Plot\n\nThe generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.\n\nBy visualizing your flows, you can gain a clearer understanding of the workflow’s structure, making it easier to debug, optimize, and communicate your AI processes to others.\n\n## [​](https://docs.crewai.com/concepts/flows\\#advanced)  Advanced\n\nIn this section, we explore more complex use cases of CrewAI Flows, starting with a self-evaluation loop. This pattern is crucial for developing AI systems that can iteratively improve their outputs through feedback.\n\n### [​](https://docs.crewai.com/concepts/flows\\#1-self-evaluation-loop)  1) Self-Evaluation Loop\n\nThe self-evaluation loop is a powerful pattern that allows AI workflows to automatically assess and refine their outputs. This example demonstrates how to set up a flow that generates content, evaluates it, and iterates based on feedback until the desired quality is achieved.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#overview)  Overview\n\nThe self-evaluation loop involves two main Crews:\n\n1. **ShakespeareanXPostCrew**: Generates a Shakespearean-style post on a given topic.\n2. **XPostReviewCrew**: Evaluates the generated post, providing feedback on its validity and quality.\n\nThe process iterates until the post meets the criteria or a maximum retry limit is reached. This approach ensures high-quality outputs through iterative refinement.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#importance)  Importance\n\nThis pattern is essential for building robust AI systems that can adapt and improve over time. By automating the evaluation and feedback loop, developers can ensure that their AI workflows produce reliable and high-quality results.\n\n#### [​](https://docs.crewai.com/concepts/flows\\#main-code-highlights)  Main Code Highlights\n\nBelow is the `main.py` file for the self-evaluation loop flow:\n\nCopy\n\n```python\nfrom typing import Optional\nfrom crewai.flow.flow import Flow, listen, router, start\nfrom pydantic import BaseModel\nfrom self_evaluation_loop_flow.crews.shakespeare_crew.shakespeare_crew import (\n    ShakespeareanXPostCrew,\n)\nfrom self_evaluation_loop_flow.crews.x_post_review_crew.x_post_review_crew import (\n    XPostReviewCrew,\n)\n\nclass ShakespeareXPostFlowState(BaseModel):\n    x_post: str = \"\"\n    feedback: Optional[str] = None\n    valid: bool = False\n    retry_count: int = 0\n\nclass ShakespeareXPostFlow(Flow[ShakespeareXPostFlowState]):\n\n    @start(\"retry\")\n    def generate_shakespeare_x_post(self):\n        print(\"Generating Shakespearean X post\")\n        topic = \"Flying cars\"\n        result = (\n            ShakespeareanXPostCrew()\n            .crew()\n            .kickoff(inputs={\"topic\": topic, \"feedback\": self.state.feedback})\n        )\n        print(\"X post generated\", result.raw)\n        self.state.x_post = result.raw\n\n    @router(generate_shakespeare_x_post)\n    def evaluate_x_post(self):\n        if self.state.retry_count > 3:\n            return \"max_retry_exceeded\"\n        result = XPostReviewCrew().crew().kickoff(inputs={\"x_post\": self.state.x_post})\n        self.state.valid = result[\"valid\"]\n        self.state.feedback = result[\"feedback\"]\n        print(\"valid\", self.state.valid)\n        print(\"feedback\", self.state.feedback)\n        self.state.retry_count += 1\n        if self.state.valid:\n            return \"complete\"\n        return \"retry\"\n\n    @listen(\"complete\")\n    def save_result(self):\n        print(\"X post is valid\")\n        print(\"X post:\", self.state.x_post)\n        with open(\"x_post.txt\", \"w\") as file:\n            file.write(self.state.x_post)\n\n    @listen(\"max_retry_exceeded\")\n    def max_retry_exceeded_exit(self):\n        print(\"Max retry count exceeded\")\n        print(\"X post:\", self.state.x_post)\n        print(\"Feedback:\", self.state.feedback)\n\ndef kickoff():\n    shakespeare_flow = ShakespeareXPostFlow()\n    shakespeare_flow.kickoff()\n\ndef plot():\n    shakespeare_flow = ShakespeareXPostFlow()\n    shakespeare_flow.plot()\n\nif __name__ == \"__main__\":\n    kickoff()\n\n```\n\n#### [​](https://docs.crewai.com/concepts/flows\\#code-highlights)  Code Highlights\n\n- **Retry Mechanism**: The flow uses a retry mechanism to regenerate the post if it doesn’t meet the criteria, up to a maximum of three retries.\n- **Feedback Loop**: Feedback from the `XPostReviewCrew` is used to refine the post iteratively.\n- **State Management**: The flow maintains state using a Pydantic model, ensuring type safety and clarity.\n\nFor a complete example and further details, please refer to the [Self Evaluation Loop Flow repository](https://github.com/crewAIInc/crewAI-examples/tree/main/self_evaluation_loop_flow).\n\n## [​](https://docs.crewai.com/concepts/flows\\#next-steps)  Next Steps\n\nIf you’re interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are five specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:\n\n1. **Email Auto Responder Flow**: This example demonstrates an infinite loop where a background job continually runs to automate email responses. It’s a great use case for tasks that need to be performed repeatedly without manual intervention. [View Example](https://github.com/crewAIInc/crewAI-examples/tree/main/email_auto_responder_flow)\n\n2. **Lead Score Flow**: This flow showcases adding human-in-the-loop feedback and handling different conditional branches using the router. It’s an excellent example of how to incorporate dynamic decision-making and human oversight into your workflows. [View Example](https://github.com/crewAIInc/crewAI-examples/tree/main/lead-score-flow)\n\n3. **Write a Book Flow**: This example excels at chaining multiple crews together, where the output of one crew is used by another. Specifically, one crew outlines an entire book, and another crew generates chapters based on the outline. Eventually, everything is connected to produce a complete book. This flow is perfect for complex, multi-step processes that require coordination between different tasks. [View Example](https://github.com/crewAIInc/crewAI-examples/tree/main/write_a_book_with_flows)\n\n4. **Meeting Assistant Flow**: This flow demonstrates how to broadcast one event to trigger multiple follow-up actions. For instance, after a meeting is completed, the flow can update a Trello board, send a Slack message, and save the results. It’s a great example of handling multiple outcomes from a single event, making it ideal for comprehensive task management and notification systems. [View Example](https://github.com/crewAIInc/crewAI-examples/tree/main/meeting_assistant_flow)\n\n5. **Self Evaluation Loop Flow**: This flow demonstrates a self-evaluation loop where AI workflows automatically assess and refine their outputs through feedback. It involves generating content, evaluating it, and iterating until the desired quality is achieved. This pattern is crucial for developing robust AI systems that can adapt and improve over time. [View Example](https://github.com/crewAIInc/crewAI-examples/tree/main/self_evaluation_loop_flow)\n\n\nBy exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.\n\nAlso, check out our YouTube video on how to use flows in CrewAI below!\n\nCrewAI Flows \\| Sales Pipeline Flow Demo - YouTube\n\nCrewAI\n\n2.11K subscribers\n\n[CrewAI Flows \\| Sales Pipeline Flow Demo](https://www.youtube.com/watch?v=MTb5my6VOT8)\n\nCrewAI\n\nSearch\n\nWatch later\n\nShare\n\nCopy link\n\nInfo\n\nShopping\n\nTap to unmute\n\nIf playback doesn't begin shortly, try restarting your device.\n\nFull screen is unavailable. [Learn More](https://support.google.com/youtube/answer/6276924)\n\nYou're signed out\n\nVideos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.\n\nCancelConfirm\n\nMore videos\n\n## More videos\n\nShare\n\nInclude playlist\n\nAn error occurred while retrieving sharing information. Please try again later.\n\n[Watch on](https://www.youtube.com/watch?v=MTb5my6VOT8&embeds_referring_euri=https%3A%2F%2Fdocs.crewai.com%2F)\n\n0:00\n\n0:00 / 6:17•Live\n\n•\n\n[Watch on YouTube](https://www.youtube.com/watch?v=MTb5my6VOT8 \"Watch on YouTube\")\n\nWas this page helpful?\n\nYesNo\n\n[Crews](https://docs.crewai.com/concepts/crews) [LLMs](https://docs.crewai.com/concepts/llms)\n\n[website](https://crewai.com/) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/flows",
      "title": "Flows - CrewAICrewAI Flows | Sales Pipeline Flow Demo - YouTube",
      "og:url": "https://docs.crewai.com/concepts/flows",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Flows&description=Learn+how+to+create+and+manage+AI+workflows+using+CrewAI+Flows.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Flows - CrewAI",
      "viewport": [
        "width=device-width",
        "width=device-width, initial-scale=1"
      ],
      "sourceURL": "https://docs.crewai.com/concepts/flows",
      "statusCode": 200,
      "description": "Learn how to create and manage AI workflows using CrewAI Flows.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Flows&description=Learn+how+to+create+and+manage+AI+workflows+using+CrewAI+Flows.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Flows - CrewAI",
      "og:description": "Learn how to create and manage AI workflows using CrewAI Flows.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Telemetry\n\n# Telemetry\n\nUnderstanding the telemetry data collected by CrewAI and how it contributes to the enhancement of the library.\n\n## [​](\\#telemetry)  Telemetry\n\nBy default, we collect no data that would be considered personal information under GDPR and other privacy regulations.\nWe do collect Tool’s names and Agent’s roles, so be advised not to include any personal information in the tool’s names or the Agent’s roles.\nBecause no personal information is collected, it’s not necessary to worry about data residency.\nWhen `share_crew` is enabled, additional data is collected which may contain personal information if included by the user.\nUsers should exercise caution when enabling this feature to ensure compliance with privacy regulations.\n\nCrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library.\nOur focus is on improving and developing the features, integrations, and tools most utilized by our users.\n\nIt’s pivotal to understand that by default, **NO personal data is collected** concerning prompts, task descriptions, agents’ backstories or goals,\nusage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.\nWhen the `share_crew` feature is enabled, detailed data including task descriptions, agents’ backstories or goals, and other specific attributes are collected\nto provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks.\nUsers should carefully consider the content of their crews and tasks before enabling `share_crew`.\nUsers can disable telemetry by setting the environment variable `OTEL_SDK_DISABLED` to `true`.\n\n### [​](\\#data-explanation)  Data Explanation:\n\n| Defaulted | Data | Reason and Specifics |\n| --- | --- | --- |\n| Yes | CrewAI and Python Version | Tracks software versions. Example: CrewAI v1.2.3, Python 3.8.10. No personal data. |\n| Yes | Crew Metadata | Includes: randomly generated key and ID, process type (e.g., ‘sequential’, ‘parallel’), boolean flag for memory usage (true/false), count of tasks, count of agents. All non-personal. |\n| Yes | Agent Data | Includes: randomly generated key and ID, role name (should not include personal info), boolean settings (verbose, delegation enabled, code execution allowed), max iterations, max RPM, max retry limit, LLM info (see LLM Attributes), list of tool names (should not include personal info). No personal data. |\n| Yes | Task Metadata | Includes: randomly generated key and ID, boolean execution settings (async\\_execution, human\\_input), associated agent’s role and key, list of tool names. All non-personal. |\n| Yes | Tool Usage Statistics | Includes: tool name (should not include personal info), number of usage attempts (integer), LLM attributes used. No personal data. |\n| Yes | Test Execution Data | Includes: crew’s randomly generated key and ID, number of iterations, model name used, quality score (float), execution time (in seconds). All non-personal. |\n| Yes | Task Lifecycle Data | Includes: creation and execution start/end times, crew and task identifiers. Stored as spans with timestamps. No personal data. |\n| Yes | LLM Attributes | Includes: name, model\\_name, model, top\\_k, temperature, and class name of the LLM. All technical, non-personal data. |\n| Yes | Crew Deployment attempt using crewAI CLI | Includes: The fact a deploy is being made and crew id, and if it’s trying to pull logs, no other data. |\n| No | Agent’s Expanded Data | Includes: goal description, backstory text, i18n prompt file identifier. Users should ensure no personal info is included in text fields. |\n| No | Detailed Task Information | Includes: task description, expected output description, context references. Users should ensure no personal info is included in these fields. |\n| No | Environment Information | Includes: platform, release, system, version, and CPU count. Example: ‘Windows 10’, ‘x86\\_64’. No personal data. |\n| No | Crew and Task Inputs and Outputs | Includes: input parameters and output results as non-identifiable data. Users should ensure no personal info is included. |\n| No | Comprehensive Crew Execution Data | Includes: detailed logs of crew operations, all agents and tasks data, final output. All non-personal and technical in nature. |\n\n”No” in the “Defaulted” column indicates that this data is only collected when `share_crew` is set to `true`.\n\n### [​](\\#opt-in-further-telemetry-sharing)  Opt-In Further Telemetry Sharing\n\nUsers can choose to share their complete telemetry data by enabling the `share_crew` attribute to `True` in their crew configurations.\nEnabling `share_crew` results in the collection of detailed crew and task execution data, including `goal`, `backstory`, `context`, and `output` of tasks.\nThis enables a deeper insight into usage patterns.\n\nIf you enable `share_crew`, the collected data may include personal information if it has been incorporated into crew configurations, task descriptions, or outputs.\nUsers should carefully review their data and ensure compliance with GDPR and other applicable privacy regulations before enabling this feature.\n\nWas this page helpful?\n\nYesNo\n\n[YouTube Video RAG Search](/tools/youtubevideosearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/telemetry",
      "title": "Telemetry - CrewAI",
      "og:url": "https://docs.crewai.com/telemetry",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Telemetry&mode=dark&title=Telemetry&description=Understanding+the+telemetry+data+collected+by+CrewAI+and+how+it+contributes+to+the+enhancement+of+the+library.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Telemetry - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/telemetry",
      "statusCode": 200,
      "description": "Understanding the telemetry data collected by CrewAI and how it contributes to the enhancement of the library.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Telemetry&mode=dark&title=Telemetry&description=Understanding+the+telemetry+data+collected+by+CrewAI+and+how+it+contributes+to+the+enhancement+of+the+library.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Telemetry - CrewAI",
      "og:description": "Understanding the telemetry data collected by CrewAI and how it contributes to the enhancement of the library.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Get Started\n\n# Installation\n\nThis guide will walk you through the installation process for CrewAI and its dependencies.\nCrewAI is a flexible and powerful AI framework that enables you to create and manage AI agents, tools, and tasks efficiently.\nLet’s get started! 🚀\n\nMake sure you have `Python >=3.10 <=3.13` installed on your system before you proceed.\n\n1\n\nInstall CrewAI\n\nInstall the main CrewAI package with the following command:\n\nTerminal\n\nCopy\n\n```shell\npip install crewai\n\n```\n\nYou can also install the main CrewAI package and the tools package that include a series of helpful tools for your agents:\n\nTerminal\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\nAlternatively, you can also use:\n\nTerminal\n\nCopy\n\n```shell\npip install crewai crewai-tools\n\n```\n\n2\n\nUpgrade CrewAI\n\nTo upgrade CrewAI and CrewAI Tools to the latest version, run the following command\n\nTerminal\n\nCopy\n\n```shell\npip install --upgrade crewai crewai-tools\n\n```\n\n1. If you’re using an older version of CrewAI, you may receive a warning about using `Poetry` for dependency management.\n![Error from older versions](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/crewai-run-poetry-error.png)\n\n2. In this case, you’ll need to run the command below to update your project.\nThis command will migrate your project to use [UV](https://github.com/astral-sh/uv) and update the necessary files.\n\n\n\n\n\nTerminal\n\n\n\n\n\n\n\nCopy\n\n\n\n\n\n\n\n\n\n\n\n\n\n```shell\ncrewai update\n\n```\n\n3. After running the command above, you should see the following output:\n![Successfully migrated to UV](https://mintlify.s3-us-west-1.amazonaws.com/crewai/images/crewai-update.png)\n\n4. You’re all set! You can now proceed to the next step! 🎉\n\n\n3\n\nVerify the installation\n\nTo verify that `crewai` and `crewai-tools` are installed correctly, run the following command\n\nTerminal\n\nCopy\n\n```shell\npip freeze | grep crewai\n\n```\n\nYou should see the version number of `crewai` and `crewai-tools`.\n\nVersion\n\nCopy\n\n```markdown\ncrewai==X.X.X\ncrewai-tools==X.X.X\n\n```\n\nIf you see the version number, then the installation was successful! 🎉\n\n## [​](\\#create-a-new-crewai-project)  Create a new CrewAI project\n\nThe next step is to create a new CrewAI project.\nWe recommend using the YAML Template scaffolding to get started as it provides a structured approach to defining agents and tasks.\n\n1\n\nCreate a new CrewAI project using the YAML Template Configuration\n\nTo create a new CrewAI project, run the following CLI (Command Line Interface) command:\n\nTerminal\n\nCopy\n\n```shell\ncrewai create crew <project_name>\n\n```\n\nThis command creates a new project folder with the following structure:\n\n| File/Directory | Description |\n| :-- | :-- |\n| `my_project/` | Root directory of the project |\n| ├── `.gitignore` | Specifies files and directories to ignore in Git |\n| ├── `pyproject.toml` | Project configuration and dependencies |\n| ├── `README.md` | Project documentation |\n| ├── `.env` | Environment variables |\n| └── `src/` | Source code directory |\n| └── `my_project/` | Main application package |\n| ├── `__init__.py` | Marks the directory as a Python package |\n| ├── `main.py` | Main application script |\n| ├── `crew.py` | Crew-related functionalities |\n| ├── `tools/` | Custom tools directory |\n| │ ├── `custom_tool.py` | Custom tool implementation |\n| │ └── `__init__.py` | Marks tools directory as a package |\n| └── `config/` | Configuration files directory |\n| ├── `agents.yaml` | Agent configurations |\n| └── `tasks.yaml` | Task configurations |\n\nYou can now start developing your crew by editing the files in the `src/my_project` folder.\nThe `main.py` file is the entry point of the project, the `crew.py` file is where you define your crew, the `agents.yaml` file is where you define your agents,\nand the `tasks.yaml` file is where you define your tasks.\n\n2\n\nCustomize your project\n\nTo customize your project, you can:\n\n- Modify `src/my_project/config/agents.yaml` to define your agents.\n- Modify `src/my_project/config/tasks.yaml` to define your tasks.\n- Modify `src/my_project/crew.py` to add your own logic, tools, and specific arguments.\n- Modify `src/my_project/main.py` to add custom inputs for your agents and tasks.\n- Add your environment variables into the `.env` file.\n\n## [​](\\#next-steps)  Next steps\n\nNow that you have installed `crewai` and `crewai-tools`, you’re ready to spin up your first crew!\n\n- 👨‍💻 Build your first agent with CrewAI by following the [Quickstart](/quickstart) guide.\n- 💬 Join the [Community](https://community.crewai.com) to get help and share your feedback.\n\nWas this page helpful?\n\nYesNo\n\n[Introduction](/introduction) [Quickstart](/quickstart)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/installation",
      "title": "Installation - CrewAI",
      "og:url": "https://docs.crewai.com/installation",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Installation&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Installation - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/installation",
      "statusCode": 200,
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Get+Started&mode=dark&title=Installation&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Installation - CrewAI",
      "next-head-count": "23",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# YouTube Channel RAG Search\n\nThe `YoutubeChannelSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube channel.\n\n# [​](\\#youtubechannelsearchtool)  `YoutubeChannelSearchTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThis tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics.\n\n## [​](\\#installation)  Installation\n\nTo utilize the YoutubeChannelSearchTool, the `crewai_tools` package must be installed. Execute the following command in your shell to install:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nTo begin using the YoutubeChannelSearchTool, follow the example below.\nThis demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel’s content.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import YoutubeChannelSearchTool\n\n# Initialize the tool to search within any Youtube channel's content the agent learns about during its execution\ntool = YoutubeChannelSearchTool()\n\n# OR\n\n# Initialize the tool with a specific Youtube channel handle to target your search\ntool = YoutubeChannelSearchTool(youtube_channel_handle='@exampleChannel')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `youtube_channel_handle` : A mandatory string representing the Youtube channel handle. This parameter is crucial for initializing the tool to specify the channel you want to search within. The tool is designed to only search within the content of the provided channel handle.\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = YoutubeChannelSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[XML RAG Search](/tools/xmlsearchtool) [YouTube Video RAG Search](/tools/youtubevideosearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
      "title": "YouTube Channel RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=YouTube+Channel+RAG+Search&description=The+%60YoutubeChannelSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+Youtube+channel.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "YouTube Channel RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/youtubechannelsearchtool",
      "statusCode": 200,
      "description": "The `YoutubeChannelSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube channel.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=YouTube+Channel+RAG+Search&description=The+%60YoutubeChannelSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+Youtube+channel.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "YouTube Channel RAG Search - CrewAI",
      "og:description": "The `YoutubeChannelSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube channel.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# XML RAG Search\n\nThe `XMLSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a XML file.\n\n# [​](\\#xmlsearchtool)  `XMLSearchTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThe XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.\nIdeal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.\nBy specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes.\n\n## [​](\\#installation)  Installation\n\nTo start using the XMLSearchTool, you must first install the crewai\\_tools package. This can be easily done with the following command:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nHere are two examples demonstrating how to use the XMLSearchTool.\nThe first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import XMLSearchTool\n\n# Allow agents to search within any XML file's content\n#as it learns about their paths during execution\ntool = XMLSearchTool()\n\n# OR\n\n# Initialize the tool with a specific XML file path\n#for exclusive search within that document\ntool = XMLSearchTool(xml='path/to/your/xmlfile.xml')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `xml`: This is the path to the XML file you wish to search.\nIt is an optional parameter during the tool’s initialization but must be provided either at initialization or as part of the `run` method’s arguments to execute a search.\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = XMLSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Website RAG Search](/tools/websitesearchtool) [YouTube Channel RAG Search](/tools/youtubechannelsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/xmlsearchtool",
      "title": "XML RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/xmlsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=XML+RAG+Search&description=The+%60XMLSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+XML+file.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "XML RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/xmlsearchtool",
      "statusCode": 200,
      "description": "The `XMLSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a XML file.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=XML+RAG+Search&description=The+%60XMLSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+XML+file.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "XML RAG Search - CrewAI",
      "og:description": "The `XMLSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a XML file.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Google Serper Search\n\nThe `SerperDevTool` is designed to search the internet and return the most relevant results.\n\n# [​](\\#serperdevtool)  `SerperDevTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThis tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes the [serper.dev](https://serper.dev) API\nto fetch and display the most relevant search results based on the query provided by the user.\n\n## [​](\\#installation)  Installation\n\nTo incorporate this tool into your project, follow the installation instructions below:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nThe following example demonstrates how to initialize the tool and execute a search with a given query:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import SerperDevTool\n\n# Initialize the tool for internet searching capabilities\ntool = SerperDevTool()\n\n```\n\n## [​](\\#steps-to-get-started)  Steps to Get Started\n\nTo effectively use the `SerperDevTool`, follow these steps:\n\n1. **Package Installation**: Confirm that the `crewai[tools]` package is installed in your Python environment.\n2. **API Key Acquisition**: Acquire a `serper.dev` API key by registering for a free account at `serper.dev`.\n3. **Environment Configuration**: Store your obtained API key in an environment variable named `SERPER_API_KEY` to facilitate its use by the tool.\n\n## [​](\\#parameters)  Parameters\n\nThe `SerperDevTool` comes with several parameters that will be passed to the API :\n\n- **search\\_url**: The URL endpoint for the search API. (Default is `https://google.serper.dev/search`)\n\n- **country**: Optional. Specify the country for the search results.\n\n- **location**: Optional. Specify the location for the search results.\n\n- **locale**: Optional. Specify the locale for the search results.\n\n- **n\\_results**: Number of search results to return. Default is `10`.\n\n\nThe values for `country`, `location`, `locale` and `search_url` can be found on the [Serper Playground](https://serper.dev/playground).\n\n## [​](\\#example-with-parameters)  Example with Parameters\n\nHere is an example demonstrating how to use the tool with additional parameters:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import SerperDevTool\n\ntool = SerperDevTool(\n    search_url=\"https://google.serper.dev/scholar\",\n    n_results=2,\n)\n\nprint(tool.run(search_query=\"ChatGPT\"))\n\n# Using Tool: Search the internet\n\n# Search results: Title: Role of chat gpt in public health\n# Link: https://link.springer.com/article/10.1007/s10439-023-03172-7\n# Snippet: … ChatGPT in public health. In this overview, we will examine the potential uses of ChatGPT in\n# ---\n# Title: Potential use of chat gpt in global warming\n# Link: https://link.springer.com/article/10.1007/s10439-023-03171-8\n# Snippet: … as ChatGPT, have the potential to play a critical role in advancing our understanding of climate\n# ---\n\n```\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import SerperDevTool\n\ntool = SerperDevTool(\n    country=\"fr\",\n    locale=\"fr\",\n    location=\"Paris, Paris, Ile-de-France, France\",\n    n_results=2,\n)\n\nprint(tool.run(search_query=\"Jeux Olympiques\"))\n\n# Using Tool: Search the internet\n\n# Search results: Title: Jeux Olympiques de Paris 2024 - Actualités, calendriers, résultats\n# Link: https://olympics.com/fr/paris-2024\n# Snippet: Quels sont les sports présents aux Jeux Olympiques de Paris 2024 ? · Athlétisme · Aviron · Badminton · Basketball · Basketball 3x3 · Boxe · Breaking · Canoë ...\n# ---\n# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques\n# Link: https://tickets.paris2024.org/\n# Snippet: Achetez vos billets exclusivement sur le site officiel de la billetterie de Paris 2024 pour participer au plus grand événement sportif au monde.\n# ---\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nBy integrating the `SerperDevTool` into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.\n\nWas this page helpful?\n\nYesNo\n\n[Github Search](/tools/githubsearchtool) [JSON RAG Search](/tools/jsonsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/serperdevtool",
      "title": "Google Serper Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/serperdevtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Google+Serper+Search&description=The+%60SerperDevTool%60+is+designed+to+search+the+internet+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Google Serper Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/serperdevtool",
      "statusCode": 200,
      "description": "The `SerperDevTool` is designed to search the internet and return the most relevant results.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Google+Serper+Search&description=The+%60SerperDevTool%60+is+designed+to+search+the+internet+and+return+the+most+relevant+results.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Google Serper Search - CrewAI",
      "og:description": "The `SerperDevTool` is designed to search the internet and return the most relevant results.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Tools\n\nUnderstanding and leveraging tools within the CrewAI framework for agent collaboration and task execution.\n\n## [​](\\#introduction)  Introduction\n\nCrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.\nThis documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools.\n\n## [​](\\#what-is-a-tool)  What is a Tool?\n\nA tool in CrewAI is a skill or function that agents can utilize to perform various actions.\nThis includes tools from the [CrewAI Toolkit](https://github.com/joaomdmoura/crewai-tools) and [LangChain Tools](https://python.langchain.com/docs/integrations/tools),\nenabling everything from simple searches to complex interactions and effective teamwork among agents.\n\n## [​](\\#key-characteristics-of-tools)  Key Characteristics of Tools\n\n- **Utility**: Crafted for tasks such as web searching, data analysis, content generation, and agent collaboration.\n- **Integration**: Boosts agent capabilities by seamlessly integrating tools into their workflow.\n- **Customizability**: Provides the flexibility to develop custom tools or utilize existing ones, catering to the specific needs of agents.\n- **Error Handling**: Incorporates robust error handling mechanisms to ensure smooth operation.\n- **Caching Mechanism**: Features intelligent caching to optimize performance and reduce redundant operations.\n\n## [​](\\#using-crewai-tools)  Using CrewAI Tools\n\nTo enhance your agents’ capabilities with crewAI tools, begin by installing our extra tools package:\n\nCopy\n\n```bash\npip install 'crewai[tools]'\n\n```\n\nHere’s an example demonstrating their use:\n\nCode\n\nCopy\n\n```python\nimport os\nfrom crewai import Agent, Task, Crew\n# Importing crewAI tools\nfrom crewai_tools import (\n    DirectoryReadTool,\n    FileReadTool,\n    SerperDevTool,\n    WebsiteSearchTool\n)\n\n# Set up API keys\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\" # serper.dev API key\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\n\n# Instantiate tools\ndocs_tool = DirectoryReadTool(directory='./blog-posts')\nfile_tool = FileReadTool()\nsearch_tool = SerperDevTool()\nweb_rag_tool = WebsiteSearchTool()\n\n# Create agents\nresearcher = Agent(\n    role='Market Research Analyst',\n    goal='Provide up-to-date market analysis of the AI industry',\n    backstory='An expert analyst with a keen eye for market trends.',\n    tools=[search_tool, web_rag_tool],\n    verbose=True\n)\n\nwriter = Agent(\n    role='Content Writer',\n    goal='Craft engaging blog posts about the AI industry',\n    backstory='A skilled writer with a passion for technology.',\n    tools=[docs_tool, file_tool],\n    verbose=True\n)\n\n# Define tasks\nresearch = Task(\n    description='Research the latest trends in the AI industry and provide a summary.',\n    expected_output='A summary of the top 3 trending developments in the AI industry with a unique perspective on their significance.',\n    agent=researcher\n)\n\nwrite = Task(\n    description='Write an engaging blog post about the AI industry, based on the research analyst’s summary. Draw inspiration from the latest blog posts in the directory.',\n    expected_output='A 4-paragraph blog post formatted in markdown with engaging, informative, and accessible content, avoiding complex jargon.',\n    agent=writer,\n    output_file='blog-posts/new_post.md'  # The final blog post will be saved here\n)\n\n# Assemble a crew with planning enabled\ncrew = Crew(\n    agents=[researcher, writer],\n    tasks=[research, write],\n    verbose=True,\n    planning=True,  # Enable planning feature\n)\n\n# Execute tasks\ncrew.kickoff()\n\n```\n\n## [​](\\#available-crewai-tools)  Available CrewAI Tools\n\n- **Error Handling**: All tools are built with error handling capabilities, allowing agents to gracefully manage exceptions and continue their tasks.\n- **Caching Mechanism**: All tools support caching, enabling agents to efficiently reuse previously obtained results, reducing the load on external resources and speeding up the execution time. You can also define finer control over the caching mechanism using the `cache_function` attribute on the tool.\n\nHere is a list of the available tools and their descriptions:\n\n| Tool | Description |\n| :-- | :-- |\n| **BrowserbaseLoadTool** | A tool for interacting with and extracting data from web browsers. |\n| **CodeDocsSearchTool** | A RAG tool optimized for searching through code documentation and related technical documents. |\n| **CodeInterpreterTool** | A tool for interpreting python code. |\n| **ComposioTool** | Enables use of Composio tools. |\n| **CSVSearchTool** | A RAG tool designed for searching within CSV files, tailored to handle structured data. |\n| **DALL-E Tool** | A tool for generating images using the DALL-E API. |\n| **DirectorySearchTool** | A RAG tool for searching within directories, useful for navigating through file systems. |\n| **DOCXSearchTool** | A RAG tool aimed at searching within DOCX documents, ideal for processing Word files. |\n| **DirectoryReadTool** | Facilitates reading and processing of directory structures and their contents. |\n| **EXASearchTool** | A tool designed for performing exhaustive searches across various data sources. |\n| **FileReadTool** | Enables reading and extracting data from files, supporting various file formats. |\n| **FirecrawlSearchTool** | A tool to search webpages using Firecrawl and return the results. |\n| **FirecrawlCrawlWebsiteTool** | A tool for crawling webpages using Firecrawl. |\n| **FirecrawlScrapeWebsiteTool** | A tool for scraping webpages URL using Firecrawl and returning its contents. |\n| **GithubSearchTool** | A RAG tool for searching within GitHub repositories, useful for code and documentation search. |\n| **SerperDevTool** | A specialized tool for development purposes, with specific functionalities under development. |\n| **TXTSearchTool** | A RAG tool focused on searching within text (.txt) files, suitable for unstructured data. |\n| **JSONSearchTool** | A RAG tool designed for searching within JSON files, catering to structured data handling. |\n| **LlamaIndexTool** | Enables the use of LlamaIndex tools. |\n| **MDXSearchTool** | A RAG tool tailored for searching within Markdown (MDX) files, useful for documentation. |\n| **PDFSearchTool** | A RAG tool aimed at searching within PDF documents, ideal for processing scanned documents. |\n| **PGSearchTool** | A RAG tool optimized for searching within PostgreSQL databases, suitable for database queries. |\n| **Vision Tool** | A tool for generating images using the DALL-E API. |\n| **RagTool** | A general-purpose RAG tool capable of handling various data sources and types. |\n| **ScrapeElementFromWebsiteTool** | Enables scraping specific elements from websites, useful for targeted data extraction. |\n| **ScrapeWebsiteTool** | Facilitates scraping entire websites, ideal for comprehensive data collection. |\n| **WebsiteSearchTool** | A RAG tool for searching website content, optimized for web data extraction. |\n| **XMLSearchTool** | A RAG tool designed for searching within XML files, suitable for structured data formats. |\n| **YoutubeChannelSearchTool** | A RAG tool for searching within YouTube channels, useful for video content analysis. |\n| **YoutubeVideoSearchTool** | A RAG tool aimed at searching within YouTube videos, ideal for video data extraction. |\n\n## [​](\\#creating-your-own-tools)  Creating your own Tools\n\nDevelopers can craft `custom tools` tailored for their agent’s needs or\nutilize pre-built options.\n\nThere are two main ways for one to create a CrewAI tool:\n\n### [​](\\#subclassing-basetool)  Subclassing `BaseTool`\n\nCode\n\nCopy\n\n```python\nfrom crewai.tools import BaseTool\n\nclass MyCustomTool(BaseTool):\n    name: str = \"Name of my tool\"\n    description: str = \"Clear description for what this tool is useful for, your agent will need this information to use it.\"\n\n    def _run(self, argument: str) -> str:\n        # Implementation goes here\n        return \"Result from custom tool\"\n\n```\n\n### [​](\\#utilizing-the-tool-decorator)  Utilizing the `tool` Decorator\n\nCode\n\nCopy\n\n```python\nfrom crewai.tools import tool\n@tool(\"Name of my tool\")\ndef my_tool(question: str) -> str:\n    \"\"\"Clear description for what this tool is useful for, your agent will need this information to use it.\"\"\"\n    # Function logic here\n    return \"Result from your custom tool\"\n\n```\n\n### [​](\\#custom-caching-mechanism)  Custom Caching Mechanism\n\nTools can optionally implement a `cache_function` to fine-tune caching\nbehavior. This function determines when to cache results based on specific\nconditions, offering granular control over caching logic.\n\nCode\n\nCopy\n\n```python\nfrom crewai.tools import tool\n\n@tool\ndef multiplication_tool(first_number: int, second_number: int) -> str:\n    \"\"\"Useful for when you need to multiply two numbers together.\"\"\"\n    return first_number * second_number\n\ndef cache_func(args, result):\n    # In this case, we only cache the result if it's a multiple of 2\n    cache = result % 2 == 0\n    return cache\n\nmultiplication_tool.cache_function = cache_func\n\nwriter1 = Agent(\n        role=\"Writer\",\n        goal=\"You write lessons of math for kids.\",\n        backstory=\"You're an expert in writing and you love to teach kids but you know nothing of math.\",\n        tools=[multiplication_tool],\n        allow_delegation=False,\n    )\n    #...\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nTools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.\nWhen building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,\ncaching mechanisms, and the flexibility of tool arguments to optimize your agents’ performance and capabilities.\n\nWas this page helpful?\n\nYesNo\n\n[CLI](/concepts/cli) [Using LangChain Tools](/concepts/langchain-tools)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/tools",
      "title": "Tools - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/tools",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Tools&description=Understanding+and+leveraging+tools+within+the+CrewAI+framework+for+agent+collaboration+and+task+execution.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Tools - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts/tools",
      "statusCode": 200,
      "description": "Understanding and leveraging tools within the CrewAI framework for agent collaboration and task execution.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Tools&description=Understanding+and+leveraging+tools+within+the+CrewAI+framework+for+agent+collaboration+and+task+execution.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Tools - CrewAI",
      "og:description": "Understanding and leveraging tools within the CrewAI framework for agent collaboration and task execution.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Github Search\n\nThe `GithubSearchTool` is designed to search websites and convert them into clean markdown or structured data.\n\n# [​](\\#githubsearchtool)  `GithubSearchTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThe GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub.\n\n## [​](\\#installation)  Installation\n\nTo use the GithubSearchTool, first ensure the crewai\\_tools package is installed in your Python environment:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\nThis command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai\\_tools package.\n\n## [​](\\#example)  Example\n\nHere’s how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import GithubSearchTool\n\n# Initialize the tool for semantic searches within a specific GitHub repository\ntool = GithubSearchTool(\n\tgithub_repo='https://github.com/example/repo',\n\tgh_token='your_github_personal_access_token',\n\tcontent_types=['code', 'issue'] # Options: code, repo, pr, issue\n)\n\n# OR\n\n# Initialize the tool for semantic searches within a specific GitHub repository, so the agent can search any repository if it learns about during its execution\ntool = GithubSearchTool(\n\tgh_token='your_github_personal_access_token',\n\tcontent_types=['code', 'issue'] # Options: code, repo, pr, issue\n)\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `github_repo` : The URL of the GitHub repository where the search will be conducted. This is a mandatory field and specifies the target repository for your search.\n- `gh_token` : Your GitHub Personal Access Token (PAT) required for authentication. You can create one in your GitHub account settings under Developer Settings > Personal Access Tokens.\n- `content_types` : Specifies the types of content to include in your search. You must provide a list of content types from the following options: `code` for searching within the code,\n`repo` for searching within the repository’s general information, `pr` for searching within pull requests, and `issue` for searching within issues.\nThis field is mandatory and allows tailoring the search to specific content types within the GitHub repository.\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = GithubSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Firecrawl Search](/tools/firecrawlsearchtool) [Google Serper Search](/tools/serperdevtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/githubsearchtool",
      "title": "Github Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/githubsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Github+Search&description=The+%60GithubSearchTool%60+is+designed+to+search+websites+and+convert+them+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Github Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/githubsearchtool",
      "statusCode": 200,
      "description": "The `GithubSearchTool` is designed to search websites and convert them into clean markdown or structured data.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Github+Search&description=The+%60GithubSearchTool%60+is+designed+to+search+websites+and+convert+them+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Github Search - CrewAI",
      "og:description": "The `GithubSearchTool` is designed to search websites and convert them into clean markdown or structured data.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Vision Tool\n\nThe `VisionTool` is designed to extract text from images.\n\n# [​](\\#visiontool)  `VisionTool`\n\n## [​](\\#description)  Description\n\nThis tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.\nThe URL or the PATH of the image should be passed to the Agent.\n\n## [​](\\#installation)  Installation\n\nInstall the crewai\\_tools package\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#usage)  Usage\n\nIn order to use the VisionTool, the OpenAI API key should be set in the environment variable `OPENAI_API_KEY`.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import VisionTool\n\nvision_tool = VisionTool()\n\n@agent\ndef researcher(self) -> Agent:\n    '''\n    This agent uses the VisionTool to extract text from images.\n    '''\n    return Agent(\n        config=self.agents_config[\"researcher\"],\n        allow_delegation=False,\n        tools=[vision_tool]\n    )\n\n```\n\n## [​](\\#arguments)  Arguments\n\nThe VisionTool requires the following arguments:\n\n| Argument | Type | Description |\n| :-- | :-- | :-- |\n| **image\\_path\\_url** | `string` | **Mandatory**. The path to the image file from which text needs to be extracted. |\n\nWas this page helpful?\n\nYesNo\n\n[TXT RAG Search](/tools/txtsearchtool) [Website RAG Search](/tools/websitesearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/visiontool",
      "title": "Vision Tool - CrewAI",
      "og:url": "https://docs.crewai.com/tools/visiontool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Vision+Tool&description=The+%60VisionTool%60+is+designed+to+extract+text+from+images.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Vision Tool - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/visiontool",
      "statusCode": 200,
      "description": "The `VisionTool` is designed to extract text from images.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Vision+Tool&description=The+%60VisionTool%60+is+designed+to+extract+text+from+images.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Vision Tool - CrewAI",
      "og:description": "The `VisionTool` is designed to extract text from images.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Core Concepts\n\n# Agents\n\nWhat are CrewAI Agents and how to use them.\n\n## [​](\\#what-is-an-agent)  What is an agent?\n\nAn agent is an **autonomous unit** programmed to:\n\n- Perform tasks\n- Make decisions\n- Communicate with other agents\n\nThink of an agent as a member of a team, with specific skills and a particular job to do. Agents can have different roles like `Researcher`, `Writer`, or `Customer Support`, each contributing to the overall goal of the crew.\n\n## [​](\\#agent-attributes)  Agent attributes\n\n| Attribute | Parameter | Description |\n| :-- | :-- | :-- |\n| **Role** | `role` | Defines the agent’s function within the crew. It determines the kind of tasks the agent is best suited for. |\n| **Goal** | `goal` | The individual objective that the agent aims to achieve. It guides the agent’s decision-making process. |\n| **Backstory** | `backstory` | Provides context to the agent’s role and goal, enriching the interaction and collaboration dynamics. |\n| **LLM** _(optional)_ | `llm` | Represents the language model that will run the agent. It dynamically fetches the model name from the `OPENAI_MODEL_NAME` environment variable, defaulting to “gpt-4” if not specified. |\n| **Tools** _(optional)_ | `tools` | Set of capabilities or functions that the agent can use to perform tasks. Expected to be instances of custom classes compatible with the agent’s execution environment. Tools are initialized with a default value of an empty list. |\n| **Function Calling LLM** _(optional)_ | `function_calling_llm` | Specifies the language model that will handle the tool calling for this agent, overriding the crew function calling LLM if passed. Default is `None`. |\n| **Max Iter** _(optional)_ | `max_iter` | Max Iter is the maximum number of iterations the agent can perform before being forced to give its best answer. Default is `25`. |\n| **Max RPM** _(optional)_ | `max_rpm` | Max RPM is the maximum number of requests per minute the agent can perform to avoid rate limits. It’s optional and can be left unspecified, with a default value of `None`. |\n| **Max Execution Time** _(optional)_ | `max_execution_time` | Max Execution Time is the maximum execution time for an agent to execute a task. It’s optional and can be left unspecified, with a default value of `None`, meaning no max execution time. |\n| **Verbose** _(optional)_ | `verbose` | Setting this to `True` configures the internal logger to provide detailed execution logs, aiding in debugging and monitoring. Default is `False`. |\n| **Allow Delegation** _(optional)_ | `allow_delegation` | Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent. Default is `False`. |\n| **Step Callback** _(optional)_ | `step_callback` | A function that is called after each step of the agent. This can be used to log the agent’s actions or to perform other operations. It will overwrite the crew `step_callback`. |\n| **Cache** _(optional)_ | `cache` | Indicates if the agent should use a cache for tool usage. Default is `True`. |\n| **System Template** _(optional)_ | `system_template` | Specifies the system format for the agent. Default is `None`. |\n| **Prompt Template** _(optional)_ | `prompt_template` | Specifies the prompt format for the agent. Default is `None`. |\n| **Response Template** _(optional)_ | `response_template` | Specifies the response format for the agent. Default is `None`. |\n| **Allow Code Execution** _(optional)_ | `allow_code_execution` | Enable code execution for the agent. Default is `False`. |\n| **Max Retry Limit** _(optional)_ | `max_retry_limit` | Maximum number of retries for an agent to execute a task when an error occurs. Default is `2`. |\n| **Use System Prompt** _(optional)_ | `use_system_prompt` | Adds the ability to not use system prompt (to support o1 models). Default is `True`. |\n| **Respect Context Window** _(optional)_ | `respect_context_window` | Summary strategy to avoid overflowing the context window. Default is `True`. |\n| **Code Execution Mode** _(optional)_ | `code_execution_mode` | Determines the mode for code execution: ‘safe’ (using Docker) or ‘unsafe’ (direct execution on the host machine). Default is `safe`. |\n\n## [​](\\#creating-an-agent)  Creating an agent\n\n**Agent interaction**: Agents can interact with each other using CrewAI’s built-in delegation and communication mechanisms. This allows for dynamic task management and problem-solving within the crew.\n\nTo create an agent, you would typically initialize an instance of the `Agent` class with the desired properties. Here’s a conceptual example including all attributes:\n\nCode example\n\nCopy\n\n```python\nfrom crewai import Agent\n\nagent = Agent(\n  role='Data Analyst',\n  goal='Extract actionable insights',\n  backstory=\"\"\"You're a data analyst at a large company.\n    You're responsible for analyzing data and providing insights\n    to the business.\n    You're currently working on a project to analyze the\n    performance of our marketing campaigns.\"\"\",\n  tools=[my_tool1, my_tool2],  # Optional, defaults to an empty list\n  llm=my_llm,  # Optional\n  function_calling_llm=my_llm,  # Optional\n  max_iter=15,  # Optional\n  max_rpm=None, # Optional\n  max_execution_time=None, # Optional\n  verbose=True,  # Optional\n  allow_delegation=False,  # Optional\n  step_callback=my_intermediate_step_callback,  # Optional\n  cache=True,  # Optional\n  system_template=my_system_template,  # Optional\n  prompt_template=my_prompt_template,  # Optional\n  response_template=my_response_template,  # Optional\n  config=my_config,  # Optional\n  crew=my_crew,  # Optional\n  tools_handler=my_tools_handler,  # Optional\n  cache_handler=my_cache_handler,  # Optional\n  callbacks=[callback1, callback2],  # Optional\n  allow_code_execution=True,  # Optional\n  max_retry_limit=2,  # Optional\n  use_system_prompt=True,  # Optional\n  respect_context_window=True,  # Optional\n  code_execution_mode='safe',  # Optional, defaults to 'safe'\n)\n\n```\n\n## [​](\\#setting-prompt-templates)  Setting prompt templates\n\nPrompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here’s an example of how to set prompt templates:\n\nCode example\n\nCopy\n\n```python\nagent = Agent(\n        role=\"{topic} specialist\",\n        goal=\"Figure {goal} out\",\n        backstory=\"I am the master of {role}\",\n        system_template=\"\"\"<|start_header_id|>system<|end_header_id|>\n                        {{ .System }}<|eot_id|>\"\"\",\n        prompt_template=\"\"\"<|start_header_id|>user<|end_header_id|>\n                        {{ .Prompt }}<|eot_id|>\"\"\",\n        response_template=\"\"\"<|start_header_id|>assistant<|end_header_id|>\n                        {{ .Response }}<|eot_id|>\"\"\",\n)\n\n```\n\n## [​](\\#bring-your-third-party-agents)  Bring your third-party agents\n\nExtend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI’s `BaseAgent` class.\n\n**BaseAgent** includes attributes and methods required to integrate with your crews to run and delegate tasks to other agents within your own crew.\n\nCrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems.\n\nCode example\n\nCopy\n\n```python\nfrom crewai import Agent, Task, Crew\nfrom custom_agent import CustomAgent # You need to build and extend your own agent logic with the CrewAI BaseAgent class then import it here.\n\nfrom langchain.agents import load_tools\n\nlangchain_tools = load_tools([\"google-serper\"], llm=llm)\n\nagent1 = CustomAgent(\n    role=\"agent role\",\n    goal=\"who is {input}?\",\n    backstory=\"agent backstory\",\n    verbose=True,\n)\n\ntask1 = Task(\n    expected_output=\"a short biography of {input}\",\n    description=\"a short biography of {input}\",\n    agent=agent1,\n)\n\nagent2 = Agent(\n    role=\"agent role\",\n    goal=\"summarize the short bio for {input} and if needed do more research\",\n    backstory=\"agent backstory\",\n    verbose=True,\n)\n\ntask2 = Task(\n    description=\"a tldr summary of the short biography\",\n    expected_output=\"5 bullet point summary of the biography\",\n    agent=agent2,\n    context=[task1],\n)\n\nmy_crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])\ncrew = my_crew.kickoff(inputs={\"input\": \"Mark Twain\"})\n\n```\n\n## [​](\\#conclusion)  Conclusion\n\nAgents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,\nyou can create sophisticated AI systems that leverage the power of collaborative intelligence. The `code_execution_mode` attribute provides flexibility in how agents execute code, allowing for both secure and direct execution options.\n\nWas this page helpful?\n\nYesNo\n\n[Quickstart](/quickstart) [Tasks](/concepts/tasks)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/concepts/agents",
      "title": "Agents - CrewAI",
      "og:url": "https://docs.crewai.com/concepts/agents",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Agents&description=What+are+CrewAI+Agents+and+how+to+use+them.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Agents - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/concepts",
      "statusCode": 200,
      "description": "What are CrewAI Agents and how to use them.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Core+Concepts&mode=dark&title=Agents&description=What+are+CrewAI+Agents+and+how+to+use+them.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Agents - CrewAI",
      "og:description": "What are CrewAI Agents and how to use them.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Firecrawl Scrape Website\n\nThe `FirecrawlScrapeWebsiteTool` is designed to scrape websites and convert them into clean markdown or structured data.\n\n# [​](\\#firecrawlscrapewebsitetool)  `FirecrawlScrapeWebsiteTool`\n\n## [​](\\#description)  Description\n\n[Firecrawl](https://firecrawl.dev) is a platform for crawling and convert any website into clean markdown or structured data.\n\n## [​](\\#installation)  Installation\n\n- Get an API key from [firecrawl.dev](https://firecrawl.dev) and set it in environment variables ( `FIRECRAWL_API_KEY`).\n- Install the [Firecrawl SDK](https://github.com/mendableai/firecrawl) along with `crewai[tools]` package:\n\nCopy\n\n```shell\npip install firecrawl-py 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nUtilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import FirecrawlScrapeWebsiteTool\n\ntool = FirecrawlScrapeWebsiteTool(url='firecrawl.dev')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `api_key`: Optional. Specifies Firecrawl API key. Defaults is the `FIRECRAWL_API_KEY` environment variable.\n- `url`: The URL to scrape.\n- `page_options`: Optional.\n\n  - `onlyMainContent`: Optional. Only return the main content of the page excluding headers, navs, footers, etc.\n  - `includeHtml`: Optional. Include the raw HTML content of the page. Will output a html key in the response.\n- `extractor_options`: Optional. Options for LLM-based extraction of structured information from the page content\n\n  - `mode`: The extraction mode to use, currently supports ‘llm-extraction’\n  - `extractionPrompt`: Optional. A prompt describing what information to extract from the page\n  - `extractionSchema`: Optional. The schema for the data to be extracted\n- `timeout`: Optional. Timeout in milliseconds for the request\n\nWas this page helpful?\n\nYesNo\n\n[Firecrawl Crawl Website](/tools/firecrawlcrawlwebsitetool) [Firecrawl Search](/tools/firecrawlsearchtool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/firecrawlscrapewebsitetool",
      "title": "Firecrawl Scrape Website - CrewAI",
      "og:url": "https://docs.crewai.com/tools/firecrawlscrapewebsitetool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Firecrawl+Scrape+Website&description=The+%60FirecrawlScrapeWebsiteTool%60+is+designed+to+scrape+websites+and+convert+them+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Firecrawl Scrape Website - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/firecrawlscrapewebsitetool",
      "statusCode": 200,
      "description": "The `FirecrawlScrapeWebsiteTool` is designed to scrape websites and convert them into clean markdown or structured data.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Firecrawl+Scrape+Website&description=The+%60FirecrawlScrapeWebsiteTool%60+is+designed+to+scrape+websites+and+convert+them+into+clean+markdown+or+structured+data.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Firecrawl Scrape Website - CrewAI",
      "og:description": "The `FirecrawlScrapeWebsiteTool` is designed to scrape websites and convert them into clean markdown or structured data.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "How to Guides\n\n# Sequential Processes\n\nA comprehensive guide to utilizing the sequential processes for task execution in CrewAI projects.\n\n## [​](\\#introduction)  Introduction\n\nCrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.\nThis guide outlines how to effectively implement these processes to ensure efficient task execution and project completion.\n\n## [​](\\#sequential-process-overview)  Sequential Process Overview\n\nThe sequential process ensures tasks are executed one after the other, following a linear progression.\nThis approach is ideal for projects requiring tasks to be completed in a specific order.\n\n### [​](\\#key-features)  Key Features\n\n- **Linear Task Flow**: Ensures orderly progression by handling tasks in a predetermined sequence.\n- **Simplicity**: Best suited for projects with clear, step-by-step tasks.\n- **Easy Monitoring**: Facilitates easy tracking of task completion and project progress.\n\n## [​](\\#implementing-the-sequential-process)  Implementing the Sequential Process\n\nTo use the sequential process, assemble your crew and define tasks in the order they need to be executed.\n\nCode\n\nCopy\n\n```python\nfrom crewai import Crew, Process, Agent, Task, TaskOutput, CrewOutput\n\n# Define your agents\nresearcher = Agent(\n  role='Researcher',\n  goal='Conduct foundational research',\n  backstory='An experienced researcher with a passion for uncovering insights'\n)\nanalyst = Agent(\n  role='Data Analyst',\n  goal='Analyze research findings',\n  backstory='A meticulous analyst with a knack for uncovering patterns'\n)\nwriter = Agent(\n  role='Writer',\n  goal='Draft the final report',\n  backstory='A skilled writer with a talent for crafting compelling narratives'\n)\n\n# Define your tasks\nresearch_task = Task(\n  description='Gather relevant data...',\n  agent=researcher,\n  expected_output='Raw Data'\n)\nanalysis_task = Task(\n  description='Analyze the data...',\n  agent=analyst,\n  expected_output='Data Insights'\n)\nwriting_task = Task(\n  description='Compose the report...',\n  agent=writer,\n  expected_output='Final Report'\n)\n\n# Form the crew with a sequential process\nreport_crew = Crew(\n  agents=[researcher, analyst, writer],\n  tasks=[research_task, analysis_task, writing_task],\n  process=Process.sequential\n)\n\n# Execute the crew\nresult = report_crew.kickoff()\n\n# Accessing the type-safe output\ntask_output: TaskOutput = result.tasks[0].output\ncrew_output: CrewOutput = result.output\n\n```\n\n### [​](\\#note)  Note:\n\nEach task in a sequential process **must** have an agent assigned. Ensure that every `Task` includes an `agent` parameter.\n\n### [​](\\#workflow-in-action)  Workflow in Action\n\n1. **Initial Task**: In a sequential process, the first agent completes their task and signals completion.\n2. **Subsequent Tasks**: Agents pick up their tasks based on the process type, with outcomes of preceding tasks or directives guiding their execution.\n3. **Completion**: The process concludes once the final task is executed, leading to project completion.\n\n## [​](\\#advanced-features)  Advanced Features\n\n### [​](\\#task-delegation)  Task Delegation\n\nIn sequential processes, if an agent has `allow_delegation` set to `True`, they can delegate tasks to other agents in the crew.\nThis feature is automatically set up when there are multiple agents in the crew.\n\n### [​](\\#asynchronous-execution)  Asynchronous Execution\n\nTasks can be executed asynchronously, allowing for parallel processing when appropriate.\nTo create an asynchronous task, set `async_execution=True` when defining the task.\n\n### [​](\\#memory-and-caching)  Memory and Caching\n\nCrewAI supports both memory and caching features:\n\n- **Memory**: Enable by setting `memory=True` when creating the Crew. This allows agents to retain information across tasks.\n- **Caching**: By default, caching is enabled. Set `cache=False` to disable it.\n\n### [​](\\#callbacks)  Callbacks\n\nYou can set callbacks at both the task and step level:\n\n- `task_callback`: Executed after each task completion.\n- `step_callback`: Executed after each step in an agent’s execution.\n\n### [​](\\#usage-metrics)  Usage Metrics\n\nCrewAI tracks token usage across all tasks and agents. You can access these metrics after execution.\n\n## [​](\\#best-practices-for-sequential-processes)  Best Practices for Sequential Processes\n\n1. **Order Matters**: Arrange tasks in a logical sequence where each task builds upon the previous one.\n2. **Clear Task Descriptions**: Provide detailed descriptions for each task to guide the agents effectively.\n3. **Appropriate Agent Selection**: Match agents’ skills and roles to the requirements of each task.\n4. **Use Context**: Leverage the context from previous tasks to inform subsequent ones.\n\nThis updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.\nThe content is kept simple and direct to ensure easy understanding.\n\nWas this page helpful?\n\nYesNo\n\n[Create Custom Tools](/how-to/create-custom-tools) [Hierarchical Process](/how-to/hierarchical-process)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/how-to/sequential-process",
      "title": "Sequential Processes - CrewAI",
      "og:url": "https://docs.crewai.com/how-to/sequential-process",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Sequential+Processes&description=A+comprehensive+guide+to+utilizing+the+sequential+processes+for+task+execution+in+CrewAI+projects.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Sequential Processes - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/how-to/sequential-process",
      "statusCode": 200,
      "description": "A comprehensive guide to utilizing the sequential processes for task execution in CrewAI projects.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=How+to+Guides&mode=dark&title=Sequential+Processes&description=A+comprehensive+guide+to+utilizing+the+sequential+processes+for+task+execution+in+CrewAI+projects.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Sequential Processes - CrewAI",
      "og:description": "A comprehensive guide to utilizing the sequential processes for task execution in CrewAI projects.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# Code Interpreter\n\nThe `CodeInterpreterTool` is a powerful tool designed for executing Python 3 code within a secure, isolated environment.\n\n# [​](\\#codeinterpretertool)  `CodeInterpreterTool`\n\n## [​](\\#description)  Description\n\nThis tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.\n\nThis functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,\nobtain the results, and utilize that information to inform subsequent decisions and actions.\n\n## [​](\\#requirements)  Requirements\n\n- Docker\n\n## [​](\\#installation)  Installation\n\nInstall the `crewai_tools` package\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\n## [​](\\#example)  Example\n\nRemember that when using this tool, the code must be generated by the Agent itself.\nThe code must be a Python3 code. And it will take some time for the first time to run\nbecause it needs to build the Docker image.\n\nCode\n\nCopy\n\n```python\nfrom crewai import Agent\nfrom crewai_tools import CodeInterpreterTool\n\nAgent(\n    ...\n    tools=[CodeInterpreterTool()],\n)\n\n```\n\nWe also provide a simple way to use it directly from the Agent.\n\nCode\n\nCopy\n\n```python\nfrom crewai import Agent\n\nagent = Agent(\n    ...\n    allow_code_execution=True,\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Code Docs RAG Search](/tools/codedocssearchtool) [Composio Tool](/tools/composiotool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/codeinterpretertool",
      "title": "Code Interpreter - CrewAI",
      "og:url": "https://docs.crewai.com/tools/codeinterpretertool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Code+Interpreter&description=The+%60CodeInterpreterTool%60+is+a+powerful+tool+designed+for+executing+Python+3+code+within+a+secure%2C+isolated+environment.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "Code Interpreter - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/codeinterpretertool",
      "statusCode": 200,
      "description": "The `CodeInterpreterTool` is a powerful tool designed for executing Python 3 code within a secure, isolated environment.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=Code+Interpreter&description=The+%60CodeInterpreterTool%60+is+a+powerful+tool+designed+for+executing+Python+3+code+within+a+secure%2C+isolated+environment.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "Code Interpreter - CrewAI",
      "og:description": "The `CodeInterpreterTool` is a powerful tool designed for executing Python 3 code within a secure, isolated environment.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  },
  {
    "markdown": "Tools\n\n# TXT RAG Search\n\nThe `TXTSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\n\n# [​](\\#txtsearchtool)  `TXTSearchTool`\n\nWe are still working on improving tools, so there might be unexpected behavior or changes in the future.\n\n## [​](\\#description)  Description\n\nThis tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.\nIt allows for semantic searching of a query within a specified text file’s content,\nmaking it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided.\n\n## [​](\\#installation)  Installation\n\nTo use the `TXTSearchTool`, you first need to install the `crewai_tools` package.\nThis can be done using pip, a package manager for Python.\nOpen your terminal or command prompt and enter the following command:\n\nCopy\n\n```shell\npip install 'crewai[tools]'\n\n```\n\nThis command will download and install the TXTSearchTool along with any necessary dependencies.\n\n## [​](\\#example)  Example\n\nThe following example demonstrates how to use the TXTSearchTool to search within a text file.\nThis example shows both the initialization of the tool with a specific text file and the subsequent search within that file’s content.\n\nCode\n\nCopy\n\n```python\nfrom crewai_tools import TXTSearchTool\n\n# Initialize the tool to search within any text file's content\n# the agent learns about during its execution\ntool = TXTSearchTool()\n\n# OR\n\n# Initialize the tool with a specific text file,\n# so the agent can search within the given text file's content\ntool = TXTSearchTool(txt='path/to/text/file.txt')\n\n```\n\n## [​](\\#arguments)  Arguments\n\n- `txt` (str): **Optional**. The path to the text file you want to search.\nThis argument is only required if the tool was not initialized with a specific text file;\notherwise, the search will be conducted within the initially provided text file.\n\n## [​](\\#custom-model-and-embeddings)  Custom model and embeddings\n\nBy default, the tool uses OpenAI for both embeddings and summarization.\nTo customize the model, you can use a config dictionary as follows:\n\nCode\n\nCopy\n\n```python\ntool = TXTSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)\n\n```\n\nWas this page helpful?\n\nYesNo\n\n[Spider Scraper](/tools/spidertool) [Vision Tool](/tools/visiontool)\n\n[website](https://crewai.com) [x](https://x.com/crewAIInc) [github](https://github.com/crewAIInc/crewAI) [linkedin](https://www.linkedin.com/company/crewai-inc) [youtube](https://youtube.com/@crewAIInc)\n\n[Powered by Mintlify](https://mintlify.com/preview-request?utm_campaign=poweredBy&utm_medium=docs&utm_source=docs.crewai.com)",
    "metadata": {
      "url": "https://docs.crewai.com/tools/txtsearchtool",
      "title": "TXT RAG Search - CrewAI",
      "og:url": "https://docs.crewai.com/tools/txtsearchtool",
      "charset": "utf-8",
      "og:type": "website",
      "language": "en",
      "og:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=TXT+RAG+Search&description=The+%60TXTSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+text+file.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "og:title": "TXT RAG Search - CrewAI",
      "viewport": "width=device-width",
      "sourceURL": "https://docs.crewai.com/tools/txtsearchtool",
      "statusCode": 200,
      "description": "The `TXTSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.",
      "theme-color": "#ffffff",
      "og:site_name": "CrewAI",
      "twitter:card": "summary_large_image",
      "twitter:image": "https://docs.crewai.com/api/og?division=Documentation&section=Tools&mode=dark&title=TXT+RAG+Search&description=The+%60TXTSearchTool%60+is+designed+to+perform+a+RAG+%28Retrieval-Augmented+Generation%29+search+within+the+content+of+a+text+file.&logoLight=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&logoDark=https%3A%2F%2Fmintlify.s3-us-west-1.amazonaws.com%2Fcrewai%2Fcrew_only_logo.png&primaryColor=%23EB6658&lightColor=%23F3A78B&darkColor=%23C94C3C",
      "twitter:title": "TXT RAG Search - CrewAI",
      "og:description": "The `TXTSearchTool` is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.",
      "next-head-count": "25",
      "application-name": "CrewAI",
      "ogLocaleAlternate": [],
      "msapplication-config": "https://mintlify.s3-us-west-1.amazonaws.com/crewai/_generated/favicon/browserconfig.xml?v=3",
      "msapplication-TileColor": "#EB6658",
      "apple-mobile-web-app-title": "CrewAI"
    }
  }
]